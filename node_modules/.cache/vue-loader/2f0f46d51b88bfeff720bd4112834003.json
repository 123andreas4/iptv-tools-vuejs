{"remainingRequest":"/media/ernst/63bce43c-5e51-4bf1-a611-3afdf32ac6f6/VueJS/IPTV-Tools/node_modules/vue-loader/lib/index.js??vue-loader-options!/media/ernst/63bce43c-5e51-4bf1-a611-3afdf32ac6f6/VueJS/IPTV-Tools/src/views/app/m3u/series.vue?vue&type=script&lang=js&","dependencies":[{"path":"/media/ernst/63bce43c-5e51-4bf1-a611-3afdf32ac6f6/VueJS/IPTV-Tools/src/views/app/m3u/series.vue","mtime":1625832827542},{"path":"/media/ernst/63bce43c-5e51-4bf1-a611-3afdf32ac6f6/VueJS/IPTV-Tools/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/media/ernst/63bce43c-5e51-4bf1-a611-3afdf32ac6f6/VueJS/IPTV-Tools/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/media/ernst/63bce43c-5e51-4bf1-a611-3afdf32ac6f6/VueJS/IPTV-Tools/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/media/ernst/63bce43c-5e51-4bf1-a611-3afdf32ac6f6/VueJS/IPTV-Tools/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/media/ernst/63bce43c-5e51-4bf1-a611-3afdf32ac6f6/VueJS/IPTV-Tools/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCi8qIGVzbGludC1kaXNhYmxlIHZ1ZS9uby1zaWRlLWVmZmVjdHMtaW4tY29tcHV0ZWQtcHJvcGVydGllcyAqLwppbXBvcnQgeyBFdmVudEJ1cyB9IGZyb20gIi4uLy4uLy4uL3NlcnZpY2VzL2VidXMiOwppbXBvcnQgeyBodHRwU2VydmljZSB9IGZyb20gIi4uLy4uLy4uL3NlcnZpY2VzL2h0dHAiOwppbXBvcnQgeyBtYXBHZXR0ZXJzIH0gZnJvbSAidnVleCI7CgpleHBvcnQgZGVmYXVsdCB7CiAgZGF0YSgpIHsKICAgIHJldHVybiB7CiAgICAgIGRhdGVPcHRpb25zOiB7IGRheTogIjItZGlnaXQiLCBtb250aDogIm51bWVyaWMiLCB5ZWFyOiAibnVtZXJpYyIgfSwKICAgICAgYWN0aXZlVGFiOiAwLAogICAgICBwbGF5bGlzdHM6IFtdLAogICAgICBncm91cHM6IFtdLAogICAgICBzdHJlYW1zOiBbXSwKICAgICAgc3RyZWFtOiBudWxsLAogICAgICBlZGl0b3I6IGZhbHNlLAogICAgICBzZWFyY2g6IG51bGwsCiAgICAgIGlzTG9hZGluZzogZmFsc2UsCiAgICAgIGZyb206IDAsCiAgICAgIHRvOiAwLAogICAgICB0b3RhbDogMCwKICAgICAgY3VycmVudFBhZ2U6IDEsCiAgICAgIGZpZWxkczogWwogICAgICAgIHsKICAgICAgICAgIGtleTogInBsYXlsaXN0IiwKICAgICAgICAgIGxhYmVsOiB0aGlzLiR0KCJ4dHJlYW0ucGxheWxpc3QiKSwKICAgICAgICAgIHNvcnRhYmxlOiB0cnVlLAogICAgICAgIH0sCiAgICAgICAgeyBrZXk6ICJncm91cCIsIGxhYmVsOiB0aGlzLiR0KCJ4dHJlYW0uZ3JvdXAiKSwgc29ydGFibGU6IHRydWUgfSwKICAgICAgICB7CiAgICAgICAgICBrZXk6ICJzZXJpZV9uYW1lIiwKICAgICAgICAgIGxhYmVsOiB0aGlzLiR0KCJ4dHJlYW0ubmFtZSIpLAogICAgICAgICAgc29ydGFibGU6IHRydWUsCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICBrZXk6ICJzZXJpZV9zZWFzb24iLAogICAgICAgICAgbGFiZWw6IHRoaXMuJHQoInh0cmVhbS5zZWFzb24iKSwKICAgICAgICAgIHNvcnRhYmxlOiB0cnVlLAogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAga2V5OiAic2VyaWVfZXBpc29kZSIsCiAgICAgICAgICBsYWJlbDogdGhpcy4kdCgieHRyZWFtLmVwaXNvZGUiKSwKICAgICAgICAgIHNvcnRhYmxlOiB0cnVlLAogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAga2V5OiAic3RyZWFtX3R2Z19sb2dvIiwKICAgICAgICAgIGxhYmVsOiB0aGlzLiR0KCJ4dHJlYW0uc3RyZWFtLWljb24iKSwKICAgICAgICAgIHNvcnRhYmxlOiB0cnVlLAogICAgICAgIH0sCiAgICAgICAgeyBrZXk6ICJ0bWRiX2lkIiwgbGFiZWw6IHRoaXMuJHQoInh0cmVhbS50bWRiLWlkIiksIHNvcnRhYmxlOiB0cnVlIH0sCiAgICAgICAgewogICAgICAgICAga2V5OiAic3RyZWFtX2lzX2hpZGRlbiIsCiAgICAgICAgICBsYWJlbDogdGhpcy4kdCgieHRyZWFtLmhpZGRlbiIpLAogICAgICAgICAgc29ydGFibGU6IHRydWUsCiAgICAgICAgfSwKICAgICAgICB7IGtleTogInN0cmVhbV9vcmRlciIsIGxhYmVsOiB0aGlzLiR0KCJ4dHJlYW0ub3JkZXIiKSwgc29ydGFibGU6IHRydWUgfSwKICAgICAgICB7CiAgICAgICAgICBrZXk6ICJhY3Rpb25zIiwKICAgICAgICAgIGxhYmVsOiB0aGlzLiR0KCJ1c2Vycy5hY3Rpb25zIiksCiAgICAgICAgICBzb3J0YWJsZTogZmFsc2UsCiAgICAgICAgICB0aENsYXNzOiAidGV4dC1yaWdodCIsCiAgICAgICAgICB0ZENsYXNzOiAidGV4dC1yaWdodCIsCiAgICAgICAgfSwKICAgICAgXSwKICAgIH07CiAgfSwKICBjb21wdXRlZDogewogICAgLi4ubWFwR2V0dGVycyhbImN1cnJlbnRVc2VyIiwgInNldHRpbmdzIl0pLAogICAgc2hvd1Rvb2x0aXBzICgpIHsKICAgICAgcmV0dXJuIHRoaXMuc2V0dGluZ3Muc2hvd1Rvb2x0aXBzOwogICAgfSwKICAgIHBlclBhZ2UoKSB7CiAgICAgIHJldHVybiB0aGlzLnNldHRpbmdzLnBlclBhZ2U7CiAgICB9LAogICAgc2VhcmNoRmlsdGVyZWQoKSB7CiAgICAgIGlmICh0aGlzLnNlYXJjaCA9PT0gbnVsbCkgewogICAgICAgIHJldHVybiB0aGlzLnN0cmVhbXM7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdmFyIHJlID0gbmV3IFJlZ0V4cCh0aGlzLnNlYXJjaCwgImkiKTsKICAgICAgICByZXR1cm4gdGhpcy5zdHJlYW1zLmZpbHRlcigoc3RyZWFtKSA9PiB7CiAgICAgICAgICByZXR1cm4gKAogICAgICAgICAgICBTdHJpbmcoc3RyZWFtLnN0cmVhbV90dmdfbmFtZSkubWF0Y2gocmUpIHx8CiAgICAgICAgICAgIFN0cmluZyhzdHJlYW0uc3RyZWFtX3R2Z19sb2dvKS5tYXRjaChyZSkgfHwKICAgICAgICAgICAgU3RyaW5nKHN0cmVhbS5zZXJpZV9uYW1lKS5tYXRjaChyZSkgfHwKICAgICAgICAgICAgU3RyaW5nKHN0cmVhbS5zZXJpZV9zZWFzb24pLm1hdGNoKHJlKSB8fAogICAgICAgICAgICBTdHJpbmcoc3RyZWFtLnNlcmllX2VwaXNvZGUpLm1hdGNoKHJlKSB8fAogICAgICAgICAgICBTdHJpbmcoc3RyZWFtLnRtZGJfaWQpLm1hdGNoKHJlKSB8fAogICAgICAgICAgICBTdHJpbmcoc3RyZWFtLnBsYXlsaXN0KS5tYXRjaChyZSkgfHwKICAgICAgICAgICAgU3RyaW5nKHN0cmVhbS5ncm91cCkubWF0Y2gocmUpCiAgICAgICAgICApOwogICAgICAgIH0pOwogICAgICB9CiAgICB9LAogICAgcGFnZWQoKSB7CiAgICAgIHRoaXMudG90YWwgPSB0aGlzLnNlYXJjaEZpbHRlcmVkLmxlbmd0aDsKICAgICAgdGhpcy5mcm9tID0gKHRoaXMuY3VycmVudFBhZ2UgLSAxKSAqIHRoaXMucGVyUGFnZTsKICAgICAgdGhpcy50byA9CiAgICAgICAgdGhpcy5mcm9tICsgdGhpcy5wZXJQYWdlID4gdGhpcy50b3RhbAogICAgICAgICAgPyB0aGlzLnRvdGFsCiAgICAgICAgICA6IHRoaXMuZnJvbSArIHRoaXMucGVyUGFnZTsKICAgICAgcmV0dXJuIHRoaXMuc2VhcmNoRmlsdGVyZWQuc2xpY2UodGhpcy5mcm9tLCB0aGlzLnRvKTsKICAgIH0sCiAgfSwKICBtZXRob2RzOiB7CiAgICBsb2FkU3RyZWFtcygpIHsKICAgICAgbGV0IGFtb3VudCA9IDI1MDAwOwogICAgICBsZXQgc3RyZWFtcyA9IFtdOwogICAgICB0aGlzLmlzTG9hZGluZyA9IHRydWU7CiAgICAgIFByb21pc2UuYWxsKFsKICAgICAgICBodHRwU2VydmljZS5nZXQoInNlcmllcy90b3RhbCIpLAogICAgICAgIGh0dHBTZXJ2aWNlLmdldCgiZ3JvdXAvc2ltcGxlIiksCiAgICAgICAgaHR0cFNlcnZpY2UuZ2V0KCJwbGF5bGlzdC9zaW1wbGUiKSwKICAgICAgXSkKICAgICAgICAudGhlbigocmVzKSA9PiB7CiAgICAgICAgICBpZiAocmVzWzBdLnN0YXR1cyA9PT0gdHJ1ZSkgewogICAgICAgICAgICBsZXQgcmVxdWVzdHMgPSBbXTsKICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCByZXNbMF0uZGF0YSAvIGFtb3VudDsgaSsrKSB7CiAgICAgICAgICAgICAgcmVxdWVzdHMucHVzaChodHRwU2VydmljZS5nZXQoYHNlcmllcy8ke2kgKiBhbW91bnR9LyR7YW1vdW50fWApKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBQcm9taXNlLmFsbChyZXF1ZXN0cykudGhlbigocmVzdWx0cykgPT4gewogICAgICAgICAgICAgIHRoaXMuaXNMb2FkaW5nID0gZmFsc2U7CiAgICAgICAgICAgICAgcmVzdWx0cy5tYXAoKHJlcykgPT4gewogICAgICAgICAgICAgICAgaWYgKHJlcy5zdGF0dXMgPT09IHRydWUpIHsKICAgICAgICAgICAgICAgICAgc3RyZWFtcyA9IFsuLi5zdHJlYW1zLCAuLi5yZXMuZGF0YV07CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgdGhpcy5zdHJlYW1zID0gc3RyZWFtczsKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9CiAgICAgICAgICBpZiAocmVzWzFdLnN0YXR1cyA9PT0gdHJ1ZSkgewogICAgICAgICAgICB0aGlzLmdyb3VwcyA9IHJlc1sxXS5kYXRhCiAgICAgICAgICAgICAgLmZpbHRlcigoZ3JvdXApID0+IHsKICAgICAgICAgICAgICAgIHJldHVybiBncm91cC5ncm91cF90eXBlID09IDM7CiAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAubWFwKChncm91cCkgPT4gewogICAgICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgICAgdGV4dDogZ3JvdXAuZ3JvdXBfbmFtZSwKICAgICAgICAgICAgICAgICAgdmFsdWU6IGdyb3VwLmlkLAogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICB9KTsKICAgICAgICAgIH0KICAgICAgICAgIGlmIChyZXNbMl0uc3RhdHVzID09PSB0cnVlKSB7CiAgICAgICAgICAgIHRoaXMucGxheWxpc3RzID0gcmVzWzJdLmRhdGEubWFwKChwbGF5bGlzdCkgPT4gewogICAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICB0ZXh0OiBwbGF5bGlzdC5uYW1lLAogICAgICAgICAgICAgICAgdmFsdWU6IHBsYXlsaXN0LmlkLAogICAgICAgICAgICAgIH07CiAgICAgICAgICAgIH0pOwogICAgICAgICAgfQogICAgICAgIH0pCiAgICAgICAgLmNhdGNoKCgpID0+IHsKICAgICAgICAgIHRoaXMuaXNMb2FkaW5nID0gZmFsc2U7CiAgICAgICAgICB0aGlzLiRub3RpZnkoCiAgICAgICAgICAgICJlcnJvciIsCiAgICAgICAgICAgIHRoaXMuJHQoInByb2ZpbGUuZmFpbGVkIiksCiAgICAgICAgICAgIHRoaXMuJHQoInh0cmVhbS5zZXJpZXMtbG9hZC1lcnJvciIpLAogICAgICAgICAgICAibGEtdXNlci1zaGllbGQiLAogICAgICAgICAgICB7IGR1cmF0aW9uOiA1MDAwLCBwZXJtYW5lbnQ6IGZhbHNlIH0KICAgICAgICAgICk7CiAgICAgICAgfSk7CiAgICB9LAogICAgYWRkU3RyZWFtKCkgewogICAgICBodHRwU2VydmljZQogICAgICAgIC5wb3N0KCJzZXJpZXMvYWRkIikKICAgICAgICAudGhlbigocmVzKSA9PiB7CiAgICAgICAgICB0aGlzLmlzTG9hZGluZyA9IGZhbHNlOwogICAgICAgICAgaWYgKHJlcy5zdGF0dXMgPT09IHRydWUgJiYgcmVzLmRhdGEpIHsKICAgICAgICAgICAgdGhpcy5zdHJlYW0gPSB7CiAgICAgICAgICAgICAgaWQ6IHJlcy5kYXRhLAogICAgICAgICAgICAgIHBsYXlsaXN0X2lkOiAwLAogICAgICAgICAgICAgIGdyb3VwX2lkOiAwLAogICAgICAgICAgICAgIHN0cmVhbV90dmdfbmFtZTogIiIsCiAgICAgICAgICAgICAgc3RyZWFtX3R2Z19pZDogIiIsCiAgICAgICAgICAgICAgc3RyZWFtX3R2Z19sb2dvOiAiIiwKICAgICAgICAgICAgICBzdHJlYW1fb3JkZXI6IDAsCiAgICAgICAgICAgICAgc3RyZWFtX2lzX2hpZGRlbjogMCwKICAgICAgICAgICAgICBzZXJpZV9uYW1lOiAiIiwKICAgICAgICAgICAgICBzZXJpZV9zZWFzb246IDAsCiAgICAgICAgICAgICAgc2VyaWVfZXBpc29kZTogMCwKICAgICAgICAgICAgICBzZXJpZV90cmFpbGVyOiAiIiwKICAgICAgICAgICAgICB0bWRiX2lkOiAiIiwKICAgICAgICAgICAgICB0bWRiX2VwaXNvZGVfaWQ6ICIiLAogICAgICAgICAgICB9OwogICAgICAgICAgICB0aGlzLmVkaXRvciA9IHRydWU7CiAgICAgICAgICB9CiAgICAgICAgfSkKICAgICAgICAuY2F0Y2goKCkgPT4gewogICAgICAgICAgdGhpcy5pc0xvYWRpbmcgPSBmYWxzZTsKICAgICAgICAgIHRoaXMuJG5vdGlmeSgKICAgICAgICAgICAgImVycm9yIiwKICAgICAgICAgICAgdGhpcy4kdCgicHJvZmlsZS5mYWlsZWQiKSwKICAgICAgICAgICAgdGhpcy4kdCgieHRyZWFtLnNlcmllcy1sb2FkLWVycm9yIiksCiAgICAgICAgICAgICJsYS11c2VyLXNoaWVsZCIsCiAgICAgICAgICAgIHsgZHVyYXRpb246IDUwMDAsIHBlcm1hbmVudDogZmFsc2UgfQogICAgICAgICAgKTsKICAgICAgICB9KTsKICAgIH0sCiAgICBlZGl0U3RyZWFtKHN0cmVhbSkgewogICAgICB0aGlzLnN0cmVhbSA9IE9iamVjdC5hc3NpZ24oe30sIHN0cmVhbSk7CiAgICAgIHRoaXMuZWRpdG9yID0gdHJ1ZTsKICAgIH0sCiAgICBjYW5jZWxFZGl0b3IoKSB7CiAgICAgIHRoaXMuZWRpdG9yID0gZmFsc2U7CiAgICB9LAogICAgc2F2ZUVkaXRvcigpIHsKICAgICAgbGV0IHN0cmVhbSA9IE9iamVjdC5hc3NpZ24oe30sIHRoaXMuc3RyZWFtKTsKICAgICAgZGVsZXRlIHN0cmVhbS5pZDsKICAgICAgZGVsZXRlIHN0cmVhbS5wbGF5bGlzdDsKICAgICAgZGVsZXRlIHN0cmVhbS5ncm91cDsKCiAgICAgIGh0dHBTZXJ2aWNlCiAgICAgICAgLnB1dChgc2VyaWVzLyR7dGhpcy5zdHJlYW0uaWR9YCwgc3RyZWFtKQogICAgICAgIC50aGVuKChyZXMpID0+IHsKICAgICAgICAgIGlmIChyZXMuc3RhdHVzID09PSB0cnVlKSB7CiAgICAgICAgICAgIHRoaXMuJG5vdGlmeSgKICAgICAgICAgICAgICAicHJpbWFyeSIsCiAgICAgICAgICAgICAgdGhpcy4kdCgicHJvZmlsZS5zdWNjZXNzIiksCiAgICAgICAgICAgICAgdGhpcy4kdCgieHRyZWFtLnNlcmllcy1zYXZlLXN1Y2Nlc3MiKSwKICAgICAgICAgICAgICAibGEtdXNlci1zaGllbGQiLAogICAgICAgICAgICAgIHsgZHVyYXRpb246IDUwMDAsIHBlcm1hbmVudDogZmFsc2UgfQogICAgICAgICAgICApOwogICAgICAgICAgICB0aGlzLmVkaXRvciA9IGZhbHNlOwogICAgICAgICAgICB0aGlzLmxvYWRTdHJlYW1zKCk7CiAgICAgICAgICB9CiAgICAgICAgfSkKICAgICAgICAuY2F0Y2goKCkgPT4gewogICAgICAgICAgdGhpcy4kbm90aWZ5KAogICAgICAgICAgICAiZXJyb3IiLAogICAgICAgICAgICB0aGlzLiR0KCJwcm9maWxlLmZhaWxlZCIpLAogICAgICAgICAgICB0aGlzLiR0KCJ4dHJlYW0uc2VyaWVzLXNhdmUtZXJyb3IiKSwKICAgICAgICAgICAgImxhLXVzZXItc2hpZWxkIiwKICAgICAgICAgICAgeyBkdXJhdGlvbjogNTAwMCwgcGVybWFuZW50OiBmYWxzZSB9CiAgICAgICAgICApOwogICAgICAgIH0pOwogICAgfSwKICAgIGRlbGV0ZVN0cmVhbShpZCkgewogICAgICBodHRwU2VydmljZQogICAgICAgIC5kZWxldGUoYHNlcmllcy8ke2lkfWApCiAgICAgICAgLnRoZW4oKHJlcykgPT4gewogICAgICAgICAgaWYgKHJlcy5zdGF0dXMgPT09IHRydWUpIHsKICAgICAgICAgICAgdGhpcy4kbm90aWZ5KAogICAgICAgICAgICAgICJwcmltYXJ5IiwKICAgICAgICAgICAgICB0aGlzLiR0KCJwcm9maWxlLnN1Y2Nlc3MiKSwKICAgICAgICAgICAgICB0aGlzLiR0KCJ4dHJlYW0uc2VyaWVzLWRlbGV0ZS1zdWNjZXNzIiksCiAgICAgICAgICAgICAgImxhLXVzZXItc2hpZWxkIiwKICAgICAgICAgICAgICB7IGR1cmF0aW9uOiA1MDAwLCBwZXJtYW5lbnQ6IGZhbHNlIH0KICAgICAgICAgICAgKTsKICAgICAgICAgICAgdGhpcy5sb2FkU3RyZWFtcygpOwogICAgICAgICAgfQogICAgICAgIH0pCiAgICAgICAgLmNhdGNoKCgpID0+IHsKICAgICAgICAgIHRoaXMuJG5vdGlmeSgKICAgICAgICAgICAgImVycm9yIiwKICAgICAgICAgICAgdGhpcy4kdCgicHJvZmlsZS5mYWlsZWQiKSwKICAgICAgICAgICAgdGhpcy4kdCgieHRyZWFtLnNlcmllcy1kZWxldGUtZXJyb3IiKSwKICAgICAgICAgICAgImxhLXVzZXItc2hpZWxkIiwKICAgICAgICAgICAgeyBkdXJhdGlvbjogNTAwMCwgcGVybWFuZW50OiBmYWxzZSB9CiAgICAgICAgICApOwogICAgICAgIH0pOwogICAgfSwKICAgIHNlYXJjaFN0cmVhbShzZWFyY2gpIHsKICAgICAgaWYgKHNlYXJjaC5sZW5ndGggPT09IDApIHsKICAgICAgICB0aGlzLnNlYXJjaCA9IG51bGw7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdGhpcy5zZWFyY2ggPSBzZWFyY2g7CiAgICAgIH0KICAgIH0sCiAgICBwcmludFN0cmVhbXMoKSB7CiAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJzdHJlYW1zIikucHJpbnQoKTsKICAgIH0sCiAgICBmb3JtYXREYXRlKGRhdGUpIHsKICAgICAgcmV0dXJuIG5ldyBEYXRlKGRhdGUpLnRvTG9jYWxlU3RyaW5nKAogICAgICAgIHRoaXMuJHQoImRhdGUubG9jYWxlIiksCiAgICAgICAgdGhpcy5kYXRlT3B0aW9ucwogICAgICApOwogICAgfSwKICAgIGRvVGFiQ2hhbmdlKHRhYikgewogICAgICB0aGlzLmFjdGl2ZVRhYiA9IHRhYjsKICAgIH0sCiAgfSwKICBiZWZvcmVNb3VudCgpIHsKICAgIHRoaXMubG9hZFN0cmVhbXMoKTsKICAgIEV2ZW50QnVzLiRvbigic2VhcmNoIiwgdGhpcy5zZWFyY2hTdHJlYW0pOwogICAgRXZlbnRCdXMuJG9uKCJwcmludCIsIHRoaXMucHJpbnRTdHJlYW1zKTsKICAgIEV2ZW50QnVzLiRvbigicmVmcmVzaCIsIHRoaXMubG9hZFN0cmVhbXMpOwogICAgRXZlbnRCdXMuJG9uKCJhZGQiLCB0aGlzLmFkZFN0cmVhbSk7CiAgICBFdmVudEJ1cy4kb24oImNhbmNlbCIsIHRoaXMuY2FuY2VsRWRpdG9yKTsKICAgIEV2ZW50QnVzLiRvbigic2F2ZSIsIHRoaXMuc2F2ZUVkaXRvcik7CiAgICBFdmVudEJ1cy4kb24oInRhYi1jaGFuZ2UiLCB0aGlzLmRvVGFiQ2hhbmdlKTsKICB9LAogIGJlZm9yZURlc3Ryb3koKSB7CiAgICBFdmVudEJ1cy4kb2ZmKCJzZWFyY2giLCB0aGlzLnNlYXJjaFN0cmVhbSk7CiAgICBFdmVudEJ1cy4kb2ZmKCJwcmludCIsIHRoaXMucHJpbnRTdHJlYW1zKTsKICAgIEV2ZW50QnVzLiRvZmYoInJlZnJlc2giLCB0aGlzLmxvYWRTdHJlYW1zKTsKICAgIEV2ZW50QnVzLiRvZmYoImFkZCIsIHRoaXMuYWRkU3RyZWFtKTsKICAgIEV2ZW50QnVzLiRvZmYoImNhbmNlbCIsIHRoaXMuY2FuY2VsRWRpdG9yKTsKICAgIEV2ZW50QnVzLiRvZmYoInNhdmUiLCB0aGlzLnNhdmVFZGl0b3IpOwogICAgRXZlbnRCdXMuJG9mZigidGFiLWNoYW5nZSIsIHRoaXMuZG9UYWJDaGFuZ2UpOwogIH0sCiAgd2F0Y2g6IHsKICAgIGZyb206IGZ1bmN0aW9uICh2YWwpIHsKICAgICAgRXZlbnRCdXMuJGVtaXQoInVwZGF0ZS1mcm9tIiwgdmFsKTsKICAgICAgZG9jdW1lbnQuYm9keS5zY3JvbGxUb3AgPSAwOwogICAgICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsVG9wID0gMDsKICAgIH0sCiAgICB0bzogZnVuY3Rpb24gKHZhbCkgewogICAgICBFdmVudEJ1cy4kZW1pdCgidXBkYXRlLXRvIiwgdmFsKTsKICAgIH0sCiAgICB0b3RhbDogZnVuY3Rpb24gKHZhbCkgewogICAgICBFdmVudEJ1cy4kZW1pdCgidXBkYXRlLXRvdGFsIiwgdmFsKTsKICAgIH0sCiAgICBlZGl0b3I6IGZ1bmN0aW9uICh2YWwpIHsKICAgICAgRXZlbnRCdXMuJGVtaXQoInVwZGF0ZS1lZGl0b3IiLCB2YWwpOwogICAgfSwKICB9LAp9Owo="},null]}