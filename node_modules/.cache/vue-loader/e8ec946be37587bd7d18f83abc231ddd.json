{"remainingRequest":"/media/ernst/63bce43c-5e51-4bf1-a611-3afdf32ac6f6/VueJS/IPTV-Tools/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/media/ernst/63bce43c-5e51-4bf1-a611-3afdf32ac6f6/VueJS/IPTV-Tools/node_modules/cache-loader/dist/cjs.js??ref--0-0!/media/ernst/63bce43c-5e51-4bf1-a611-3afdf32ac6f6/VueJS/IPTV-Tools/node_modules/vue-loader/lib/index.js??vue-loader-options!/media/ernst/63bce43c-5e51-4bf1-a611-3afdf32ac6f6/VueJS/IPTV-Tools/src/views/app/m3u/editor.vue?vue&type=template&id=be3eb916&","dependencies":[{"path":"/media/ernst/63bce43c-5e51-4bf1-a611-3afdf32ac6f6/VueJS/IPTV-Tools/src/views/app/m3u/editor.vue","mtime":1624902882970},{"path":"/media/ernst/63bce43c-5e51-4bf1-a611-3afdf32ac6f6/VueJS/IPTV-Tools/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/media/ernst/63bce43c-5e51-4bf1-a611-3afdf32ac6f6/VueJS/IPTV-Tools/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/media/ernst/63bce43c-5e51-4bf1-a611-3afdf32ac6f6/VueJS/IPTV-Tools/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/media/ernst/63bce43c-5e51-4bf1-a611-3afdf32ac6f6/VueJS/IPTV-Tools/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:var render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c(
    "erd-row",
    { staticClass: "m-0 p-0", attrs: { id: "editor" } },
    [
      _vm.isLoading
        ? _c("erd-spinner", {
            attrs: { size: "lg", overlay: "", absolute: "" }
          })
        : _vm._e(),
      _c(
        "erd-modal",
        {
          directives: [
            {
              name: "show",
              rawName: "v-show",
              value: _vm.findReplace.modal,
              expression: "findReplace.modal"
            }
          ],
          staticClass: "select-none",
          attrs: { title: _vm.$t("editor.find-replace"), small: "" },
          on: {
            close: function($event) {
              return _vm.findAndReplaceModal(false)
            }
          },
          scopedSlots: _vm._u([
            {
              key: "footer",
              fn: function() {
                return [
                  _c(
                    "erd-button",
                    {
                      staticClass: "mr-1",
                      attrs: { icon: "la-times", variant: "danger" },
                      on: {
                        click: function($event) {
                          return _vm.findAndReplaceModal(false)
                        }
                      }
                    },
                    [_vm._v(_vm._s(_vm.$t("general.cancel")))]
                  ),
                  _c(
                    "erd-button",
                    {
                      attrs: { icon: "la-check", variant: "success" },
                      on: { click: _vm.findAndReplace }
                    },
                    [_vm._v(_vm._s(_vm.$t("general.ok")))]
                  )
                ]
              },
              proxy: true
            }
          ])
        },
        [
          _c(
            "div",
            { staticClass: "px-2" },
            [
              _c("label", { staticClass: "w-100" }, [
                _vm._v(_vm._s(_vm.$t("editor.search-for")))
              ]),
              _c("erd-input", {
                staticClass: "mt-1 mb-2 w-100",
                model: {
                  value: _vm.findReplace.from,
                  callback: function($$v) {
                    _vm.$set(_vm.findReplace, "from", $$v)
                  },
                  expression: "findReplace.from"
                }
              }),
              _c("label", { staticClass: "w-100" }, [
                _vm._v(_vm._s(_vm.$t("editor.replace-with")))
              ]),
              _c("erd-input", {
                staticClass: "mt-1 mb-2 w-100",
                model: {
                  value: _vm.findReplace.to,
                  callback: function($$v) {
                    _vm.$set(_vm.findReplace, "to", $$v)
                  },
                  expression: "findReplace.to"
                }
              }),
              _c("label", { staticClass: "w-100" }, [
                _vm._v(_vm._s(_vm.$t("editor.options")))
              ]),
              _c(
                "erd-checkbox",
                {
                  staticClass: "mt-1",
                  model: {
                    value: _vm.findReplace.replaceAll,
                    callback: function($$v) {
                      _vm.$set(_vm.findReplace, "replaceAll", $$v)
                    },
                    expression: "findReplace.replaceAll"
                  }
                },
                [_vm._v(_vm._s(_vm.$t("editor.replace-all-occurences")))]
              ),
              _c(
                "erd-checkbox",
                {
                  staticClass: "mb-2",
                  model: {
                    value: _vm.findReplace.ignoreCase,
                    callback: function($$v) {
                      _vm.$set(_vm.findReplace, "ignoreCase", $$v)
                    },
                    expression: "findReplace.ignoreCase"
                  }
                },
                [_vm._v(_vm._s(_vm.$t("editor.ignore-case")))]
              ),
              _vm.findReplace.type === 1
                ? [
                    _c("label", { staticClass: "w-100" }, [
                      _vm._v(_vm._s(_vm.$t("xtream.group")))
                    ]),
                    _c(
                      "erd-radiobutton",
                      {
                        staticClass: "mt-1",
                        attrs: { value: 1 },
                        model: {
                          value: _vm.findReplace.selectedOnly,
                          callback: function($$v) {
                            _vm.$set(_vm.findReplace, "selectedOnly", $$v)
                          },
                          expression: "findReplace.selectedOnly"
                        }
                      },
                      [_vm._v(_vm._s(_vm.$t("editor.selected-groups-only")))]
                    ),
                    _c(
                      "erd-radiobutton",
                      {
                        attrs: { value: 0 },
                        model: {
                          value: _vm.findReplace.selectedOnly,
                          callback: function($$v) {
                            _vm.$set(_vm.findReplace, "selectedOnly", $$v)
                          },
                          expression: "findReplace.selectedOnly"
                        }
                      },
                      [_vm._v(_vm._s(_vm.$t("editor.all-groups")))]
                    )
                  ]
                : _vm._e(),
              _vm.findReplace.type === 2
                ? [
                    _c("label", { staticClass: "w-100" }, [
                      _vm._v(_vm._s(_vm.$t("xtream.streams")))
                    ]),
                    _c(
                      "erd-radiobutton",
                      {
                        staticClass: "mt-1",
                        attrs: { value: 1 },
                        model: {
                          value: _vm.findReplace.selectedOnly,
                          callback: function($$v) {
                            _vm.$set(_vm.findReplace, "selectedOnly", $$v)
                          },
                          expression: "findReplace.selectedOnly"
                        }
                      },
                      [_vm._v(_vm._s(_vm.$t("editor.selected-streams-only")))]
                    ),
                    _c(
                      "erd-radiobutton",
                      {
                        attrs: { value: 0 },
                        model: {
                          value: _vm.findReplace.selectedOnly,
                          callback: function($$v) {
                            _vm.$set(_vm.findReplace, "selectedOnly", $$v)
                          },
                          expression: "findReplace.selectedOnly"
                        }
                      },
                      [_vm._v(_vm._s(_vm.$t("editor.all-streams")))]
                    )
                  ]
                : _vm._e()
            ],
            2
          )
        ]
      ),
      _c(
        "erd-modal",
        {
          directives: [
            {
              name: "show",
              rawName: "v-show",
              value: _vm.prefixSuffix.modal,
              expression: "prefixSuffix.modal"
            }
          ],
          staticClass: "select-none",
          attrs: { title: _vm.$t("editor.add-prefix-suffix"), small: "" },
          on: {
            close: function($event) {
              return _vm.prefixSuffixModal(false)
            }
          },
          scopedSlots: _vm._u([
            {
              key: "footer",
              fn: function() {
                return [
                  _c(
                    "erd-button",
                    {
                      staticClass: "mr-1",
                      attrs: { icon: "la-times", variant: "danger" },
                      on: {
                        click: function($event) {
                          return _vm.prefixSuffixModal(false)
                        }
                      }
                    },
                    [_vm._v(_vm._s(_vm.$t("general.cancel")))]
                  ),
                  _c(
                    "erd-button",
                    {
                      attrs: { icon: "la-check", variant: "success" },
                      on: { click: _vm.addPrefixSuffix }
                    },
                    [_vm._v(_vm._s(_vm.$t("general.ok")))]
                  )
                ]
              },
              proxy: true
            }
          ])
        },
        [
          _c(
            "div",
            { staticClass: "px-2" },
            [
              _c("label", { staticClass: "w-100" }, [
                _vm._v(_vm._s(_vm.$t("editor.prefix")))
              ]),
              _c("erd-input", {
                staticClass: "mt-1 mb-2 w-100",
                model: {
                  value: _vm.prefixSuffix.prefix,
                  callback: function($$v) {
                    _vm.$set(_vm.prefixSuffix, "prefix", $$v)
                  },
                  expression: "prefixSuffix.prefix"
                }
              }),
              _c("label", { staticClass: "w-100" }, [
                _vm._v(_vm._s(_vm.$t("editor.suffix")))
              ]),
              _c("erd-input", {
                staticClass: "mt-1 mb-2 w-100",
                model: {
                  value: _vm.prefixSuffix.suffix,
                  callback: function($$v) {
                    _vm.$set(_vm.prefixSuffix, "suffix", $$v)
                  },
                  expression: "prefixSuffix.suffix"
                }
              }),
              _vm.prefixSuffix.type === 1
                ? [
                    _c("label", { staticClass: "w-100" }, [
                      _vm._v(_vm._s(_vm.$t("xtream.group")))
                    ]),
                    _c(
                      "erd-radiobutton",
                      {
                        staticClass: "mt-1",
                        attrs: { value: 1 },
                        model: {
                          value: _vm.prefixSuffix.selectedOnly,
                          callback: function($$v) {
                            _vm.$set(_vm.prefixSuffix, "selectedOnly", $$v)
                          },
                          expression: "prefixSuffix.selectedOnly"
                        }
                      },
                      [_vm._v(_vm._s(_vm.$t("editor.selected-groups-only")))]
                    ),
                    _c(
                      "erd-radiobutton",
                      {
                        attrs: { value: 0 },
                        model: {
                          value: _vm.prefixSuffix.selectedOnly,
                          callback: function($$v) {
                            _vm.$set(_vm.prefixSuffix, "selectedOnly", $$v)
                          },
                          expression: "prefixSuffix.selectedOnly"
                        }
                      },
                      [_vm._v(_vm._s(_vm.$t("editor.all-groups")))]
                    )
                  ]
                : _vm._e(),
              _vm.prefixSuffix.type === 2
                ? [
                    _c("label", { staticClass: "w-100" }, [
                      _vm._v(_vm._s(_vm.$t("xtream.streams")))
                    ]),
                    _c(
                      "erd-radiobutton",
                      {
                        staticClass: "mt-1",
                        attrs: { value: 1 },
                        model: {
                          value: _vm.prefixSuffix.selectedOnly,
                          callback: function($$v) {
                            _vm.$set(_vm.prefixSuffix, "selectedOnly", $$v)
                          },
                          expression: "prefixSuffix.selectedOnly"
                        }
                      },
                      [_vm._v(_vm._s(_vm.$t("editor.selected-streams-only")))]
                    ),
                    _c(
                      "erd-radiobutton",
                      {
                        attrs: { value: 0 },
                        model: {
                          value: _vm.prefixSuffix.selectedOnly,
                          callback: function($$v) {
                            _vm.$set(_vm.prefixSuffix, "selectedOnly", $$v)
                          },
                          expression: "prefixSuffix.selectedOnly"
                        }
                      },
                      [_vm._v(_vm._s(_vm.$t("editor.all-streams")))]
                    )
                  ]
                : _vm._e()
            ],
            2
          )
        ]
      ),
      _c(
        "erd-modal",
        {
          directives: [
            {
              name: "show",
              rawName: "v-show",
              value: _vm.convertCase.modal,
              expression: "convertCase.modal"
            }
          ],
          staticClass: "select-none",
          attrs: { title: _vm.$t("editor.change-case"), small: "" },
          on: {
            close: function($event) {
              return _vm.convertCaseModal(false)
            }
          },
          scopedSlots: _vm._u([
            {
              key: "footer",
              fn: function() {
                return [
                  _c(
                    "erd-button",
                    {
                      staticClass: "mr-1",
                      attrs: { icon: "la-times", variant: "danger" },
                      on: {
                        click: function($event) {
                          return _vm.convertCaseModal(false)
                        }
                      }
                    },
                    [_vm._v(_vm._s(_vm.$t("general.cancel")))]
                  ),
                  _c(
                    "erd-button",
                    {
                      attrs: { icon: "la-check", variant: "success" },
                      on: { click: _vm.changeCase }
                    },
                    [_vm._v(_vm._s(_vm.$t("general.ok")))]
                  )
                ]
              },
              proxy: true
            }
          ])
        },
        [
          _c(
            "div",
            { staticClass: "px-2" },
            [
              _c("label", { staticClass: "d-block mb-2" }, [
                _vm._v(_vm._s(_vm.$t("editor.options")))
              ]),
              _c(
                "erd-radiobutton",
                {
                  attrs: { value: 0 },
                  model: {
                    value: _vm.convertCase.method,
                    callback: function($$v) {
                      _vm.$set(_vm.convertCase, "method", $$v)
                    },
                    expression: "convertCase.method"
                  }
                },
                [_vm._v(_vm._s(_vm.$t("editor.title-case")))]
              ),
              _c(
                "erd-radiobutton",
                {
                  attrs: { value: 1 },
                  model: {
                    value: _vm.convertCase.method,
                    callback: function($$v) {
                      _vm.$set(_vm.convertCase, "method", $$v)
                    },
                    expression: "convertCase.method"
                  }
                },
                [_vm._v(_vm._s(_vm.$t("editor.upper-case")))]
              ),
              _c(
                "erd-radiobutton",
                {
                  staticClass: "mb-2",
                  attrs: { value: 2 },
                  model: {
                    value: _vm.convertCase.method,
                    callback: function($$v) {
                      _vm.$set(_vm.convertCase, "method", $$v)
                    },
                    expression: "convertCase.method"
                  }
                },
                [_vm._v(_vm._s(_vm.$t("editor.lower-case")))]
              ),
              _vm.convertCase.type === 1
                ? [
                    _c("label", { staticClass: "w-100" }, [
                      _vm._v(_vm._s(_vm.$t("xtream.group")))
                    ]),
                    _c(
                      "erd-radiobutton",
                      {
                        staticClass: "mt-1",
                        attrs: { value: 1 },
                        model: {
                          value: _vm.convertCase.selectedOnly,
                          callback: function($$v) {
                            _vm.$set(_vm.convertCase, "selectedOnly", $$v)
                          },
                          expression: "convertCase.selectedOnly"
                        }
                      },
                      [_vm._v(_vm._s(_vm.$t("editor.selected-groups-only")))]
                    ),
                    _c(
                      "erd-radiobutton",
                      {
                        attrs: { value: 0 },
                        model: {
                          value: _vm.convertCase.selectedOnly,
                          callback: function($$v) {
                            _vm.$set(_vm.convertCase, "selectedOnly", $$v)
                          },
                          expression: "convertCase.selectedOnly"
                        }
                      },
                      [_vm._v(_vm._s(_vm.$t("editor.all-groups")))]
                    )
                  ]
                : _vm._e(),
              _vm.convertCase.type === 2
                ? [
                    _c("label", { staticClass: "w-100" }, [
                      _vm._v(_vm._s(_vm.$t("xtream.streams")))
                    ]),
                    _c(
                      "erd-radiobutton",
                      {
                        staticClass: "mt-1",
                        attrs: { value: 1 },
                        model: {
                          value: _vm.convertCase.selectedOnly,
                          callback: function($$v) {
                            _vm.$set(_vm.convertCase, "selectedOnly", $$v)
                          },
                          expression: "convertCase.selectedOnly"
                        }
                      },
                      [_vm._v(_vm._s(_vm.$t("editor.selected-streams-only")))]
                    ),
                    _c(
                      "erd-radiobutton",
                      {
                        attrs: { value: 0 },
                        model: {
                          value: _vm.convertCase.selectedOnly,
                          callback: function($$v) {
                            _vm.$set(_vm.convertCase, "selectedOnly", $$v)
                          },
                          expression: "convertCase.selectedOnly"
                        }
                      },
                      [_vm._v(_vm._s(_vm.$t("editor.all-streams")))]
                    )
                  ]
                : _vm._e()
            ],
            2
          )
        ]
      ),
      _c(
        "erd-modal",
        {
          directives: [
            {
              name: "show",
              rawName: "v-show",
              value: _vm.groupEditor.modal,
              expression: "groupEditor.modal"
            }
          ],
          staticClass: "select-none",
          attrs: { title: _vm.$t("editor.edit-group"), small: "" },
          on: {
            close: function($event) {
              return _vm.editGroupModal(false)
            }
          },
          scopedSlots: _vm._u([
            {
              key: "footer",
              fn: function() {
                return [
                  _c(
                    "erd-button",
                    {
                      staticClass: "mr-1",
                      attrs: { icon: "la-times", variant: "danger" },
                      on: {
                        click: function($event) {
                          return _vm.editGroupModal(false)
                        }
                      }
                    },
                    [_vm._v(_vm._s(_vm.$t("general.cancel")))]
                  ),
                  _c(
                    "erd-button",
                    {
                      attrs: { icon: "la-check", variant: "success" },
                      on: { click: _vm.editGroup }
                    },
                    [_vm._v(_vm._s(_vm.$t("general.ok")))]
                  )
                ]
              },
              proxy: true
            }
          ])
        },
        [
          _c(
            "div",
            { staticClass: "px-2" },
            [
              _vm.canEditGroupType
                ? [
                    _c("label", { staticClass: "w-100" }, [
                      _vm._v(_vm._s(_vm.$t("editor.group-type")))
                    ]),
                    _vm.groupEditor.modal
                      ? _c("erd-select", {
                          staticClass: "w-100 mt-1 mb-2",
                          attrs: { items: _vm.groupTypes },
                          model: {
                            value: _vm.groupEditor.group_type,
                            callback: function($$v) {
                              _vm.$set(_vm.groupEditor, "group_type", $$v)
                            },
                            expression: "groupEditor.group_type"
                          }
                        })
                      : _vm._e()
                  ]
                : _vm._e(),
              _c("label", { staticClass: "w-100" }, [
                _vm._v(_vm._s(_vm.$t("m3u.group-title")))
              ]),
              _c("erd-input", {
                staticClass: "mt-1 mb-2 w-100",
                model: {
                  value: _vm.groupEditor.group_name,
                  callback: function($$v) {
                    _vm.$set(_vm.groupEditor, "group_name", $$v)
                  },
                  expression: "groupEditor.group_name"
                }
              }),
              _c("label", { staticClass: "w-100" }, [
                _vm._v(_vm._s(_vm.$t("m3u.parent-code")))
              ]),
              _c("erd-input", {
                staticClass: "mt-1 mb-2 w-100",
                model: {
                  value: _vm.groupEditor.group_parent_code,
                  callback: function($$v) {
                    _vm.$set(_vm.groupEditor, "group_parent_code", $$v)
                  },
                  expression: "groupEditor.group_parent_code"
                }
              }),
              _c(
                "erd-checkbox",
                {
                  staticClass: "mb-2",
                  model: {
                    value: _vm.groupEditor.group_is_hidden,
                    callback: function($$v) {
                      _vm.$set(_vm.groupEditor, "group_is_hidden", $$v)
                    },
                    expression: "groupEditor.group_is_hidden"
                  }
                },
                [_vm._v(_vm._s(_vm.$t("editor.hidden")))]
              )
            ],
            2
          )
        ]
      ),
      _c(
        "erd-modal",
        {
          directives: [
            {
              name: "show",
              rawName: "v-show",
              value: _vm.streamEditor.modal,
              expression: "streamEditor.modal"
            }
          ],
          staticClass: "select-none",
          attrs: { title: _vm.$t("editor.edit-stream"), small: "" },
          on: {
            close: function($event) {
              return _vm.editStreamModal(false)
            }
          },
          scopedSlots: _vm._u([
            {
              key: "footer",
              fn: function() {
                return [
                  _c(
                    "erd-button",
                    {
                      staticClass: "mr-1",
                      attrs: { icon: "la-times", variant: "danger" },
                      on: {
                        click: function($event) {
                          return _vm.editStreamModal(false)
                        }
                      }
                    },
                    [_vm._v(_vm._s(_vm.$t("general.cancel")))]
                  ),
                  _c(
                    "erd-button",
                    {
                      attrs: { icon: "la-check", variant: "success" },
                      on: { click: _vm.editStream }
                    },
                    [_vm._v(_vm._s(_vm.$t("general.ok")))]
                  )
                ]
              },
              proxy: true
            }
          ])
        },
        [
          _c(
            "div",
            { staticClass: "px-2" },
            [
              _vm.activeGroupType === 1
                ? [
                    _c("label", { staticClass: "w-100" }, [
                      _vm._v(_vm._s(_vm.$t("m3u.tvg-name")))
                    ]),
                    _c("erd-input", {
                      staticClass: "mt-1 mb-2 w-100",
                      model: {
                        value: _vm.streamEditor.stream_tvg_name,
                        callback: function($$v) {
                          _vm.$set(_vm.streamEditor, "stream_tvg_name", $$v)
                        },
                        expression: "streamEditor.stream_tvg_name"
                      }
                    }),
                    _c("label", { staticClass: "w-100" }, [
                      _vm._v(_vm._s(_vm.$t("m3u.tvg-id")))
                    ]),
                    _c("erd-input", {
                      staticClass: "mt-1 mb-2 w-100",
                      model: {
                        value: _vm.streamEditor.stream_tvg_id,
                        callback: function($$v) {
                          _vm.$set(_vm.streamEditor, "stream_tvg_id", $$v)
                        },
                        expression: "streamEditor.stream_tvg_id"
                      }
                    }),
                    _c("label", { staticClass: "w-100" }, [
                      _vm._v(_vm._s(_vm.$t("m3u.tvg-logo")))
                    ]),
                    _c("erd-input", {
                      staticClass: "mt-1 mb-2 w-100",
                      model: {
                        value: _vm.streamEditor.stream_tvg_logo,
                        callback: function($$v) {
                          _vm.$set(_vm.streamEditor, "stream_tvg_logo", $$v)
                        },
                        expression: "streamEditor.stream_tvg_logo"
                      }
                    }),
                    _c("label", { staticClass: "w-100" }, [
                      _vm._v(_vm._s(_vm.$t("m3u.tvg-chno")))
                    ]),
                    _c("erd-input", {
                      staticClass: "mt-1 mb-2 w-100",
                      model: {
                        value: _vm.streamEditor.stream_tvg_chno,
                        callback: function($$v) {
                          _vm.$set(_vm.streamEditor, "stream_tvg_chno", $$v)
                        },
                        expression: "streamEditor.stream_tvg_chno"
                      }
                    }),
                    _c("label", { staticClass: "w-100" }, [
                      _vm._v(_vm._s(_vm.$t("m3u.tvg-shift")))
                    ]),
                    _c("erd-input", {
                      staticClass: "mt-1 mb-2 w-100",
                      model: {
                        value: _vm.streamEditor.stream_tvg_shift,
                        callback: function($$v) {
                          _vm.$set(_vm.streamEditor, "stream_tvg_shift", $$v)
                        },
                        expression: "streamEditor.stream_tvg_shift"
                      }
                    }),
                    _c("label", { staticClass: "w-100" }, [
                      _vm._v(_vm._s(_vm.$t("m3u.parent-code")))
                    ]),
                    _c("erd-input", {
                      staticClass: "mt-1 mb-2 w-100",
                      model: {
                        value: _vm.streamEditor.stream_parent_code,
                        callback: function($$v) {
                          _vm.$set(_vm.streamEditor, "stream_parent_code", $$v)
                        },
                        expression: "streamEditor.stream_parent_code"
                      }
                    }),
                    _c("label", { staticClass: "w-100" }, [
                      _vm._v(_vm._s(_vm.$t("m3u.audio-track")))
                    ]),
                    _c("erd-input", {
                      staticClass: "mt-1 mb-2 w-100",
                      model: {
                        value: _vm.streamEditor.stream_audio_track,
                        callback: function($$v) {
                          _vm.$set(_vm.streamEditor, "stream_audio_track", $$v)
                        },
                        expression: "streamEditor.stream_audio_track"
                      }
                    }),
                    _c("label", { staticClass: "w-100" }, [
                      _vm._v(_vm._s(_vm.$t("m3u.aspect-ratio")))
                    ]),
                    _c("erd-input", {
                      staticClass: "mt-1 mb-2 w-100",
                      model: {
                        value: _vm.streamEditor.stream_aspect_ratio,
                        callback: function($$v) {
                          _vm.$set(_vm.streamEditor, "stream_aspect_ratio", $$v)
                        },
                        expression: "streamEditor.stream_aspect_ratio"
                      }
                    }),
                    _vm.streamEditor.stream_is_custom == 1
                      ? _c("label", { staticClass: "w-100" }, [
                          _vm._v(_vm._s(_vm.$t("editor.stream-url")))
                        ])
                      : _vm._e(),
                    _vm.streamEditor.stream_is_custom == 1
                      ? _c("erd-input", {
                          staticClass: "mt-1 mb-2 w-100",
                          model: {
                            value: _vm.streamEditor.source_stream_url,
                            callback: function($$v) {
                              _vm.$set(
                                _vm.streamEditor,
                                "source_stream_url",
                                $$v
                              )
                            },
                            expression: "streamEditor.source_stream_url"
                          }
                        })
                      : _vm._e(),
                    _c(
                      "erd-checkbox",
                      {
                        staticClass: "mb-1",
                        attrs: { "true-value": 1, "false-value": 0 },
                        model: {
                          value: _vm.streamEditor.stream_radio,
                          callback: function($$v) {
                            _vm.$set(_vm.streamEditor, "stream_radio", $$v)
                          },
                          expression: "streamEditor.stream_radio"
                        }
                      },
                      [_vm._v(_vm._s(_vm.$t("editor.radio")))]
                    )
                  ]
                : _vm._e(),
              _vm.activeGroupType === 2
                ? [
                    _c("label", { staticClass: "w-100" }, [
                      _vm._v(_vm._s(_vm.$t("xtream.movie-name")))
                    ]),
                    _c("erd-input", {
                      staticClass: "mt-1 mb-2 w-100",
                      model: {
                        value: _vm.streamEditor.movie_name,
                        callback: function($$v) {
                          _vm.$set(_vm.streamEditor, "movie_name", $$v)
                        },
                        expression: "streamEditor.movie_name"
                      }
                    }),
                    _c("label", { staticClass: "w-100" }, [
                      _vm._v(_vm._s(_vm.$t("xtream.movie-year")))
                    ]),
                    _c("erd-input", {
                      staticClass: "mt-1 mb-2 w-100",
                      model: {
                        value: _vm.streamEditor.movie_year,
                        callback: function($$v) {
                          _vm.$set(_vm.streamEditor, "movie_year", $$v)
                        },
                        expression: "streamEditor.movie_year"
                      }
                    }),
                    _c("label", { staticClass: "w-100" }, [
                      _vm._v(_vm._s(_vm.$t("xtream.tmdb-id")))
                    ]),
                    _c("erd-input", {
                      staticClass: "mt-1 mb-2 w-100",
                      model: {
                        value: _vm.streamEditor.tmdb_id,
                        callback: function($$v) {
                          _vm.$set(_vm.streamEditor, "tmdb_id", $$v)
                        },
                        expression: "streamEditor.tmdb_id"
                      }
                    }),
                    _vm.streamEditor.stream_is_custom == 1
                      ? _c("label", { staticClass: "w-100" }, [
                          _vm._v(_vm._s(_vm.$t("editor.stream-url")))
                        ])
                      : _vm._e(),
                    _vm.streamEditor.stream_is_custom == 1
                      ? _c("erd-input", {
                          staticClass: "mt-1 mb-2 w-100",
                          model: {
                            value: _vm.streamEditor.source_stream_url,
                            callback: function($$v) {
                              _vm.$set(
                                _vm.streamEditor,
                                "source_stream_url",
                                $$v
                              )
                            },
                            expression: "streamEditor.source_stream_url"
                          }
                        })
                      : _vm._e(),
                    _c("label", { staticClass: "w-100" }, [
                      _vm._v(_vm._s(_vm.$t("xtream.movie-poster")))
                    ]),
                    _c("erd-input", {
                      staticClass: "mt-1 mb-2 w-100",
                      model: {
                        value: _vm.streamEditor.stream_tvg_logo,
                        callback: function($$v) {
                          _vm.$set(_vm.streamEditor, "stream_tvg_logo", $$v)
                        },
                        expression: "streamEditor.stream_tvg_logo"
                      }
                    }),
                    _vm.streamEditor.stream_tvg_logo
                      ? _c(
                          "div",
                          { staticClass: "form-control text-center mb-2" },
                          [
                            _c(
                              "a",
                              {
                                attrs: {
                                  href: _vm.streamEditor.stream_tvg_logo,
                                  target: "_blank"
                                }
                              },
                              [
                                _c("img", {
                                  staticClass: "editor-movie-poster",
                                  attrs: {
                                    src: _vm.streamEditor.stream_tvg_logo
                                  }
                                })
                              ]
                            )
                          ]
                        )
                      : _vm._e()
                  ]
                : _vm._e(),
              _vm.activeGroupType === 3
                ? [
                    _c("label", { staticClass: "w-100" }, [
                      _vm._v(_vm._s(_vm.$t("xtream.name")))
                    ]),
                    _c("erd-input", {
                      staticClass: "mt-1 mb-2 w-100",
                      model: {
                        value: _vm.streamEditor.serie_name,
                        callback: function($$v) {
                          _vm.$set(_vm.streamEditor, "serie_name", $$v)
                        },
                        expression: "streamEditor.serie_name"
                      }
                    }),
                    _c("label", { staticClass: "w-100" }, [
                      _vm._v(_vm._s(_vm.$t("xtream.season")))
                    ]),
                    _c("erd-input", {
                      staticClass: "mt-1 mb-2 w-100",
                      attrs: { type: "number" },
                      model: {
                        value: _vm.streamEditor.serie_season,
                        callback: function($$v) {
                          _vm.$set(_vm.streamEditor, "serie_season", $$v)
                        },
                        expression: "streamEditor.serie_season"
                      }
                    }),
                    _c("label", { staticClass: "w-100" }, [
                      _vm._v(_vm._s(_vm.$t("xtream.episode")))
                    ]),
                    _c("erd-input", {
                      staticClass: "mt-1 mb-2 w-100",
                      attrs: { type: "number" },
                      model: {
                        value: _vm.streamEditor.serie_episode,
                        callback: function($$v) {
                          _vm.$set(_vm.streamEditor, "serie_episode", $$v)
                        },
                        expression: "streamEditor.serie_episode"
                      }
                    }),
                    _c("label", { staticClass: "w-100" }, [
                      _vm._v(_vm._s(_vm.$t("xtream.tmdb-id")))
                    ]),
                    _c("erd-input", {
                      staticClass: "mt-1 mb-2 w-100",
                      model: {
                        value: _vm.streamEditor.tmdb_id,
                        callback: function($$v) {
                          _vm.$set(_vm.streamEditor, "tmdb_id", $$v)
                        },
                        expression: "streamEditor.tmdb_id"
                      }
                    }),
                    _vm.streamEditor.stream_is_custom == 1
                      ? _c("label", { staticClass: "w-100" }, [
                          _vm._v(_vm._s(_vm.$t("editor.stream-url")))
                        ])
                      : _vm._e(),
                    _vm.streamEditor.stream_is_custom == 1
                      ? _c("erd-input", {
                          staticClass: "mt-1 mb-2 w-100",
                          model: {
                            value: _vm.streamEditor.source_stream_url,
                            callback: function($$v) {
                              _vm.$set(
                                _vm.streamEditor,
                                "source_stream_url",
                                $$v
                              )
                            },
                            expression: "streamEditor.source_stream_url"
                          }
                        })
                      : _vm._e(),
                    _c("label", { staticClass: "w-100" }, [
                      _vm._v(_vm._s(_vm.$t("xtream.serie-poster")))
                    ]),
                    _c("erd-input", {
                      staticClass: "mt-1 mb-2 w-100",
                      model: {
                        value: _vm.streamEditor.stream_tvg_logo,
                        callback: function($$v) {
                          _vm.$set(_vm.streamEditor, "stream_tvg_logo", $$v)
                        },
                        expression: "streamEditor.stream_tvg_logo"
                      }
                    }),
                    _vm.streamEditor.stream_tvg_logo
                      ? _c(
                          "div",
                          { staticClass: "form-control text-center mb-2" },
                          [
                            _c(
                              "a",
                              {
                                attrs: {
                                  href: _vm.streamEditor.stream_tvg_logo,
                                  target: "_blank"
                                }
                              },
                              [
                                _c("img", {
                                  staticClass: "editor-movie-poster",
                                  attrs: {
                                    src: _vm.streamEditor.stream_tvg_logo
                                  }
                                })
                              ]
                            )
                          ]
                        )
                      : _vm._e()
                  ]
                : _vm._e(),
              _c(
                "erd-checkbox",
                {
                  staticClass: "mb-1",
                  model: {
                    value: _vm.streamEditor.stream_is_hidden,
                    callback: function($$v) {
                      _vm.$set(_vm.streamEditor, "stream_is_hidden", $$v)
                    },
                    expression: "streamEditor.stream_is_hidden"
                  }
                },
                [_vm._v(_vm._s(_vm.$t("editor.hidden")))]
              )
            ],
            2
          )
        ]
      ),
      _c(
        "erd-modal",
        {
          directives: [
            {
              name: "show",
              rawName: "v-show",
              value: _vm.saveChanges.modal,
              expression: "saveChanges.modal"
            }
          ],
          staticClass: "select-none",
          attrs: { title: _vm.$t("editor.save-changes"), small: "" },
          on: {
            close: function($event) {
              return _vm.saveChangesModal(false)
            }
          },
          scopedSlots: _vm._u([
            {
              key: "footer",
              fn: function() {
                return [
                  _c(
                    "erd-button",
                    {
                      staticClass: "mr-1",
                      attrs: { icon: "la-times", variant: "danger" },
                      on: {
                        click: function($event) {
                          return _vm.saveChangesModal(false)
                        }
                      }
                    },
                    [_vm._v(_vm._s(_vm.$t("general.cancel")))]
                  ),
                  _c(
                    "erd-button",
                    {
                      attrs: { icon: "la-check", variant: "success" },
                      on: {
                        click: function($event) {
                          return _vm.saveChangesModal(false, true)
                        }
                      }
                    },
                    [_vm._v(_vm._s(_vm.$t("general.ok")))]
                  )
                ]
              },
              proxy: true
            }
          ])
        },
        [
          _c("div", { staticClass: "px-2" }, [
            _c("p", [_vm._v(_vm._s(_vm.$t("editor.save-changes-text")))])
          ])
        ]
      ),
      _c(
        "erd-modal",
        {
          directives: [
            {
              name: "show",
              rawName: "v-show",
              value: _vm.radioBrowser.modal,
              expression: "radioBrowser.modal"
            }
          ],
          staticClass: "select-none",
          attrs: { title: _vm.$t("editor.import-radiobrowser") },
          on: {
            close: function($event) {
              return _vm.radioBrowserModal(false)
            }
          },
          scopedSlots: _vm._u([
            {
              key: "footer",
              fn: function() {
                return [
                  _c(
                    "erd-button",
                    {
                      staticClass: "mr-1",
                      attrs: { icon: "la-times", variant: "danger" },
                      on: {
                        click: function($event) {
                          return _vm.radioBrowserModal(false)
                        }
                      }
                    },
                    [_vm._v(_vm._s(_vm.$t("general.cancel")))]
                  ),
                  _c(
                    "erd-button",
                    {
                      attrs: {
                        icon: "la-check",
                        variant: "success",
                        disabled:
                          _vm.radioBrowser.isLoading ||
                          _vm.radioBrowser.results.length === 0
                      },
                      on: {
                        click: function($event) {
                          return _vm.radioBrowserModal(false, true)
                        }
                      }
                    },
                    [_vm._v(_vm._s(_vm.$t("general.ok")))]
                  )
                ]
              },
              proxy: true
            }
          ])
        },
        [
          _c(
            "div",
            { staticClass: "px-2" },
            [
              _c(
                "label",
                { staticClass: "w-100", attrs: { for: "radiobrowser-search" } },
                [_vm._v(_vm._s(_vm.$t("menu.search")))]
              ),
              _c("erd-input", {
                staticClass: "mt-1 mb-2 w-100",
                attrs: {
                  id: "radiobrowser-search",
                  autocomplete: "off",
                  placeholder: _vm.$t("menu.search")
                },
                model: {
                  value: _vm.radioBrowser.search,
                  callback: function($$v) {
                    _vm.$set(_vm.radioBrowser, "search", $$v)
                  },
                  expression: "radioBrowser.search"
                }
              }),
              _c(
                "div",
                { staticClass: "radiobrowser-stations" },
                [
                  _vm.radioBrowser.isLoading
                    ? _c("erd-spinner", {
                        attrs: { size: "lg", overlay: "", absolute: "" }
                      })
                    : _vm._e(),
                  _vm.radioBrowser.results.length
                    ? _c("p", { staticClass: "mb-1 pb-0" }, [
                        _vm._v(
                          " " +
                            _vm._s(_vm.$t("editor.select-radio-stations")) +
                            " "
                        )
                      ])
                    : _vm._e(),
                  _c(
                    "perfect-scrollbar",
                    {
                      attrs: {
                        settings: {
                          suppressScrollX: true,
                          wheelPropagation: false
                        }
                      }
                    },
                    _vm._l(_vm.radioBrowser.results, function(station, index) {
                      return _c(
                        "div",
                        {
                          key:
                            "radiobrowser-station-" +
                            index +
                            "-" +
                            station.name,
                          staticClass: "form-control radiobrowser-station",
                          class: {
                            selected: _vm.radioBrowser.active.includes(index)
                          },
                          on: {
                            click: [
                              function($event) {
                                if (!$event.ctrlKey) {
                                  return null
                                }
                                return _vm.toggleRadiobrowserSelection(index)
                              },
                              function($event) {
                                if (!$event.shiftKey) {
                                  return null
                                }
                                return _vm.selectRadiobrowserRangeSelection(
                                  index
                                )
                              },
                              function($event) {
                                if (
                                  $event.ctrlKey ||
                                  $event.shiftKey ||
                                  $event.altKey ||
                                  $event.metaKey
                                ) {
                                  return null
                                }
                                return _vm.selectRadiobrowserSelection(index)
                              }
                            ]
                          }
                        },
                        [
                          _c("span", { staticClass: "station-name" }, [
                            _vm._v(_vm._s(station.name))
                          ]),
                          _c(
                            "span",
                            { staticClass: "text-muted text-small ml-1" },
                            [
                              _vm._v(
                                _vm._s(
                                  station.language.replace(/\b\w/g, function(
                                    l
                                  ) {
                                    return l.toUpperCase()
                                  })
                                )
                              )
                            ]
                          ),
                          _c(
                            "span",
                            {
                              staticClass: "text-muted text-small float-right"
                            },
                            [
                              _vm._v(
                                _vm._s(station.codec) +
                                  " - " +
                                  _vm._s(station.bitrate)
                              )
                            ]
                          )
                        ]
                      )
                    }),
                    0
                  )
                ],
                1
              )
            ],
            1
          )
        ]
      ),
      _c(
        "erd-modal",
        {
          directives: [
            {
              name: "show",
              rawName: "v-show",
              value: _vm.soundcloud.modal,
              expression: "soundcloud.modal"
            }
          ],
          staticClass: "select-none",
          attrs: { title: _vm.$t("editor.import-soundcloud") },
          on: {
            close: function($event) {
              return _vm.soundcloudModal(false)
            }
          },
          scopedSlots: _vm._u([
            {
              key: "footer",
              fn: function() {
                return [
                  _c(
                    "erd-button",
                    {
                      staticClass: "mr-1",
                      attrs: { icon: "la-times", variant: "danger" },
                      on: {
                        click: function($event) {
                          return _vm.soundcloudModal(false)
                        }
                      }
                    },
                    [_vm._v(_vm._s(_vm.$t("general.cancel")))]
                  ),
                  _c(
                    "erd-button",
                    {
                      attrs: {
                        icon: "la-check",
                        variant: "success",
                        disabled:
                          _vm.soundcloud.isLoading ||
                          _vm.soundcloud.track === null
                      },
                      on: {
                        click: function($event) {
                          return _vm.soundcloudModal(false, true)
                        }
                      }
                    },
                    [_vm._v(_vm._s(_vm.$t("general.ok")))]
                  )
                ]
              },
              proxy: true
            }
          ])
        },
        [
          _c(
            "div",
            { staticClass: "px-2" },
            [
              _vm.soundcloud.isLoading
                ? _c("erd-spinner", {
                    attrs: { size: "lg", overlay: "", absolute: "" }
                  })
                : _vm._e(),
              _c(
                "label",
                { staticClass: "w-100", attrs: { for: "soundcloud-url" } },
                [_vm._v(_vm._s(_vm.$t("radio.soundcloud-url")))]
              ),
              _c("erd-input", {
                staticClass: "mt-1 mb-2 w-100",
                attrs: {
                  id: "soundcloud-url",
                  autocomplete: "off",
                  placeholder: _vm.$t("radio.soundcloud-url-placeholder")
                },
                model: {
                  value: _vm.soundcloud.url,
                  callback: function($$v) {
                    _vm.$set(_vm.soundcloud, "url", $$v)
                  },
                  expression: "soundcloud.url"
                }
              }),
              _vm.soundcloud.track
                ? _c(
                    "div",
                    {
                      staticClass:
                        "soundcloud-info form-control mb-2 w-100 text-center"
                    },
                    [
                      _c("img", {
                        staticClass: "cover mt-2",
                        attrs: {
                          src: _vm.soundcloud.track.artwork_url.replace(
                            "large.jpg",
                            "t500x500.jpg"
                          )
                        }
                      }),
                      _c("div", { staticClass: "info" }, [
                        _c("h5", { staticClass: "mb-1" }, [
                          _vm._v(_vm._s(_vm.soundcloud.track.title))
                        ]),
                        _c("p", { staticClass: "p-0 m-0 text-muted" }, [
                          _vm._v(
                            " " +
                              _vm._s(
                                _vm.formatNumber(
                                  _vm.soundcloud.track.likes_count
                                )
                              ) +
                              " " +
                              _vm._s(_vm.$t("radio.likes")) +
                              " "
                          ),
                          _c("small", [_vm._v("•")]),
                          _vm._v(
                            " " +
                              _vm._s(
                                _vm.formatDateYoutube(
                                  _vm.soundcloud.track.display_date
                                )
                              ) +
                              " "
                          ),
                          _c("small", [_vm._v("•")]),
                          _vm._v(
                            " " +
                              _vm._s(
                                _vm.formatSeconds(
                                  _vm.soundcloud.track.duration / 1000
                                )
                              ) +
                              " "
                          )
                        ])
                      ])
                    ]
                  )
                : _vm._e()
            ],
            1
          )
        ]
      ),
      _c(
        "erd-modal",
        {
          directives: [
            {
              name: "show",
              rawName: "v-show",
              value: _vm.youtube.modal,
              expression: "youtube.modal"
            }
          ],
          staticClass: "select-none",
          attrs: { title: _vm.$t("editor.import-youtube") },
          on: {
            close: function($event) {
              return _vm.youtubeModal(false)
            }
          },
          scopedSlots: _vm._u([
            {
              key: "footer",
              fn: function() {
                return [
                  _c(
                    "erd-button",
                    {
                      staticClass: "mr-1",
                      attrs: { icon: "la-times", variant: "danger" },
                      on: {
                        click: function($event) {
                          return _vm.youtubeModal(false)
                        }
                      }
                    },
                    [_vm._v(_vm._s(_vm.$t("general.cancel")))]
                  ),
                  _c(
                    "erd-button",
                    {
                      attrs: {
                        icon: "la-check",
                        variant: "success",
                        disabled:
                          _vm.youtube.isLoading || _vm.youtube.video === null
                      },
                      on: {
                        click: function($event) {
                          return _vm.youtubeModal(false, true)
                        }
                      }
                    },
                    [_vm._v(_vm._s(_vm.$t("general.ok")))]
                  )
                ]
              },
              proxy: true
            }
          ])
        },
        [
          _c(
            "div",
            { staticClass: "px-2" },
            [
              _vm.youtube.isLoading
                ? _c("erd-spinner", {
                    attrs: { size: "lg", overlay: "", absolute: "" }
                  })
                : _vm._e(),
              _c(
                "label",
                { staticClass: "w-100", attrs: { for: "youtube-url" } },
                [_vm._v(_vm._s(_vm.$t("editor.youtube-url")))]
              ),
              _c("erd-input", {
                staticClass: "mt-1 mb-2 w-100",
                attrs: {
                  id: "youtube-url",
                  autocomplete: "off",
                  placeholder: _vm.$t("editor.youtube-url-placeholder")
                },
                model: {
                  value: _vm.youtube.url,
                  callback: function($$v) {
                    _vm.$set(_vm.youtube, "url", $$v)
                  },
                  expression: "youtube.url"
                }
              }),
              _vm.youtube.video
                ? _c(
                    "div",
                    {
                      staticClass:
                        "soundcloud-info form-control mb-2 w-100 text-center"
                    },
                    [
                      _c("img", {
                        staticClass: "cover mt-2",
                        attrs: {
                          src:
                            "https://i.ytimg.com/vi/" +
                            _vm.youtube.videoId +
                            "/maxresdefault.jpg"
                        }
                      }),
                      _c("div", { staticClass: "info" }, [
                        _c("h5", { staticClass: "mb-1" }, [
                          _vm._v(_vm._s(_vm.youtube.video.videoDetails.title))
                        ]),
                        _c("p", { staticClass: "p-0 m-0 text-muted" }, [
                          _vm._v(
                            " " +
                              _vm._s(
                                _vm.formatNumber(
                                  _vm.youtube.video.videoDetails.viewCount
                                )
                              ) +
                              " " +
                              _vm._s(_vm.$t("editor.views")) +
                              " "
                          ),
                          _c("small", [_vm._v("•")]),
                          _vm._v(
                            " " +
                              _vm._s(
                                _vm.formatSeconds(
                                  _vm.youtube.video.videoDetails.lengthSeconds
                                )
                              ) +
                              " "
                          )
                        ])
                      ])
                    ]
                  )
                : _vm._e()
            ],
            1
          )
        ]
      ),
      _c(
        "erd-modal",
        {
          directives: [
            {
              name: "show",
              rawName: "v-show",
              value: _vm.vimeo.modal,
              expression: "vimeo.modal"
            }
          ],
          staticClass: "select-none",
          attrs: { title: _vm.$t("editor.import-vimeo") },
          on: {
            close: function($event) {
              return _vm.vimeoModal(false)
            }
          },
          scopedSlots: _vm._u([
            {
              key: "footer",
              fn: function() {
                return [
                  _c(
                    "erd-button",
                    {
                      staticClass: "mr-1",
                      attrs: { icon: "la-times", variant: "danger" },
                      on: {
                        click: function($event) {
                          return _vm.vimeoModal(false)
                        }
                      }
                    },
                    [_vm._v(_vm._s(_vm.$t("general.cancel")))]
                  ),
                  _c(
                    "erd-button",
                    {
                      attrs: {
                        icon: "la-check",
                        variant: "success",
                        disabled:
                          _vm.vimeo.isLoading || _vm.vimeo.video === null
                      },
                      on: {
                        click: function($event) {
                          return _vm.vimeoModal(false, true)
                        }
                      }
                    },
                    [_vm._v(_vm._s(_vm.$t("general.ok")))]
                  )
                ]
              },
              proxy: true
            }
          ])
        },
        [
          _c(
            "div",
            { staticClass: "px-2" },
            [
              _vm.vimeo.isLoading
                ? _c("erd-spinner", {
                    attrs: { size: "lg", overlay: "", absolute: "" }
                  })
                : _vm._e(),
              _c(
                "label",
                { staticClass: "w-100", attrs: { for: "vimeo-url" } },
                [_vm._v(_vm._s(_vm.$t("editor.vimeo-url")))]
              ),
              _c("erd-input", {
                staticClass: "mt-1 mb-2 w-100",
                attrs: {
                  id: "vimeo-url",
                  autocomplete: "off",
                  placeholder: _vm.$t("editor.vimeo-url-placeholder")
                },
                model: {
                  value: _vm.vimeo.url,
                  callback: function($$v) {
                    _vm.$set(_vm.vimeo, "url", $$v)
                  },
                  expression: "vimeo.url"
                }
              }),
              _vm.vimeo.video
                ? _c(
                    "div",
                    {
                      staticClass:
                        "soundcloud-info form-control mb-2 w-100 text-center"
                    },
                    [
                      _c("img", {
                        staticClass: "cover mt-2",
                        attrs: { src: _vm.vimeo.video.video.thumbs.base }
                      }),
                      _c("div", { staticClass: "info" }, [
                        _c("h5", { staticClass: "mb-1" }, [
                          _vm._v(_vm._s(_vm.vimeo.video.video.title))
                        ]),
                        _c("p", { staticClass: "p-0 m-0 text-muted" }, [
                          _vm._v(
                            " " +
                              _vm._s(
                                _vm.formatSeconds(
                                  _vm.vimeo.video.video.duration
                                )
                              ) +
                              " "
                          )
                        ])
                      ])
                    ]
                  )
                : _vm._e()
            ],
            1
          )
        ]
      ),
      _c(
        "erd-modal",
        {
          directives: [
            {
              name: "show",
              rawName: "v-show",
              value: _vm.dailymotion.modal,
              expression: "dailymotion.modal"
            }
          ],
          staticClass: "select-none",
          attrs: { title: _vm.$t("editor.import-dailymotion") },
          on: {
            close: function($event) {
              return _vm.dailymotionModal(false)
            }
          },
          scopedSlots: _vm._u([
            {
              key: "footer",
              fn: function() {
                return [
                  _c(
                    "erd-button",
                    {
                      staticClass: "mr-1",
                      attrs: { icon: "la-times", variant: "danger" },
                      on: {
                        click: function($event) {
                          return _vm.dailymotionModal(false)
                        }
                      }
                    },
                    [_vm._v(_vm._s(_vm.$t("general.cancel")))]
                  ),
                  _c(
                    "erd-button",
                    {
                      attrs: {
                        icon: "la-check",
                        variant: "success",
                        disabled:
                          _vm.dailymotion.isLoading ||
                          _vm.dailymotion.video === null
                      },
                      on: {
                        click: function($event) {
                          return _vm.dailymotionModal(false, true)
                        }
                      }
                    },
                    [_vm._v(_vm._s(_vm.$t("general.ok")))]
                  )
                ]
              },
              proxy: true
            }
          ])
        },
        [
          _c(
            "div",
            { staticClass: "px-2" },
            [
              _vm.dailymotion.isLoading
                ? _c("erd-spinner", {
                    attrs: { size: "lg", overlay: "", absolute: "" }
                  })
                : _vm._e(),
              _c(
                "label",
                { staticClass: "w-100", attrs: { for: "dailymotion-url" } },
                [_vm._v(_vm._s(_vm.$t("editor.dailymotion-url")))]
              ),
              _c("erd-input", {
                staticClass: "mt-1 mb-2 w-100",
                attrs: {
                  id: "dailymotion-url",
                  autocomplete: "off",
                  placeholder: _vm.$t("editor.dailymotion-url-placeholder")
                },
                model: {
                  value: _vm.dailymotion.url,
                  callback: function($$v) {
                    _vm.$set(_vm.dailymotion, "url", $$v)
                  },
                  expression: "dailymotion.url"
                }
              }),
              _vm.dailymotion.video
                ? _c(
                    "div",
                    {
                      staticClass:
                        "soundcloud-info form-control mb-2 w-100 text-center"
                    },
                    [
                      _c("img", {
                        staticClass: "cover mt-2",
                        attrs: { src: _vm.dailymotion.video.thumbnail_1080_url }
                      }),
                      _c("div", { staticClass: "info" }, [
                        _c("h5", { staticClass: "mb-1" }, [
                          _vm._v(_vm._s(_vm.dailymotion.video.title))
                        ]),
                        _c("p", { staticClass: "p-0 m-0 text-muted" }, [
                          _vm._v(
                            " " +
                              _vm._s(
                                _vm.formatNumber(
                                  _vm.dailymotion.video.views_total
                                )
                              ) +
                              " " +
                              _vm._s(_vm.$t("editor.views")) +
                              " "
                          ),
                          _c("small", [_vm._v("•")]),
                          _vm._v(
                            " " +
                              _vm._s(
                                _vm.formatSeconds(
                                  _vm.dailymotion.video.duration
                                )
                              ) +
                              " "
                          )
                        ])
                      ])
                    ]
                  )
                : _vm._e()
            ],
            1
          )
        ]
      ),
      _c(
        "erd-modal",
        {
          directives: [
            {
              name: "show",
              rawName: "v-show",
              value: _vm.tedTalks.modal,
              expression: "tedTalks.modal"
            }
          ],
          staticClass: "select-none",
          attrs: { title: _vm.$t("editor.import-ted-talks") },
          on: {
            close: function($event) {
              return _vm.tedTalksModal(false)
            }
          },
          scopedSlots: _vm._u([
            {
              key: "footer",
              fn: function() {
                return [
                  _c(
                    "erd-button",
                    {
                      staticClass: "mr-1",
                      attrs: { icon: "la-times", variant: "danger" },
                      on: {
                        click: function($event) {
                          return _vm.tedTalksModal(false)
                        }
                      }
                    },
                    [_vm._v(_vm._s(_vm.$t("general.cancel")))]
                  ),
                  _c(
                    "erd-button",
                    {
                      attrs: {
                        icon: "la-check",
                        variant: "success",
                        disabled:
                          _vm.tedTalks.isLoading || _vm.tedTalks.video === null
                      },
                      on: {
                        click: function($event) {
                          return _vm.tedTalksModal(false, true)
                        }
                      }
                    },
                    [_vm._v(_vm._s(_vm.$t("general.ok")))]
                  )
                ]
              },
              proxy: true
            }
          ])
        },
        [
          _c(
            "div",
            { staticClass: "px-2" },
            [
              _vm.tedTalks.isLoading
                ? _c("erd-spinner", {
                    attrs: { size: "lg", overlay: "", absolute: "" }
                  })
                : _vm._e(),
              _c(
                "label",
                { staticClass: "w-100", attrs: { for: "tedTalks-url" } },
                [_vm._v(_vm._s(_vm.$t("editor.ted-talks-url")))]
              ),
              _c("erd-input", {
                staticClass: "mt-1 mb-2 w-100",
                attrs: {
                  id: "tedTalks-url",
                  autocomplete: "off",
                  placeholder: _vm.$t("editor.ted-talks-url-placeholder")
                },
                model: {
                  value: _vm.tedTalks.url,
                  callback: function($$v) {
                    _vm.$set(_vm.tedTalks, "url", $$v)
                  },
                  expression: "tedTalks.url"
                }
              }),
              _vm.tedTalks.video
                ? _c(
                    "div",
                    {
                      staticClass:
                        "soundcloud-info form-control mb-2 w-100 text-center"
                    },
                    [
                      _c("img", {
                        staticClass: "cover mt-2",
                        attrs: { src: _vm.tedTalks.video.hero }
                      }),
                      _c("div", { staticClass: "info" }, [
                        _c("h5", { staticClass: "mb-1" }, [
                          _vm._v(_vm._s(_vm.tedTalks.video.title))
                        ]),
                        _c("p", { staticClass: "p-0 m-0 text-muted" }, [
                          _vm._v(
                            " " +
                              _vm._s(
                                _vm.formatNumber(
                                  _vm.tedTalks.video.viewed_count
                                )
                              ) +
                              " " +
                              _vm._s(_vm.$t("editor.views")) +
                              " "
                          ),
                          _c("small", [_vm._v("•")]),
                          _vm._v(
                            " " +
                              _vm._s(
                                _vm.formatSeconds(_vm.tedTalks.video.duration)
                              ) +
                              " "
                          )
                        ])
                      ])
                    ]
                  )
                : _vm._e()
            ],
            1
          )
        ]
      ),
      _c(
        "erd-modal",
        {
          directives: [
            {
              name: "show",
              rawName: "v-show",
              value: _vm.xhamster.modal,
              expression: "xhamster.modal"
            }
          ],
          staticClass: "select-none",
          attrs: { title: _vm.$t("editor.import-xhamster") },
          on: {
            close: function($event) {
              return _vm.xhamsterModal(false)
            }
          },
          scopedSlots: _vm._u([
            {
              key: "footer",
              fn: function() {
                return [
                  _c(
                    "erd-button",
                    {
                      staticClass: "mr-1",
                      attrs: { icon: "la-times", variant: "danger" },
                      on: {
                        click: function($event) {
                          return _vm.xhamsterModal(false)
                        }
                      }
                    },
                    [_vm._v(_vm._s(_vm.$t("general.cancel")))]
                  ),
                  _c(
                    "erd-button",
                    {
                      attrs: {
                        icon: "la-check",
                        variant: "success",
                        disabled:
                          _vm.xhamster.isLoading || _vm.xhamster.video === null
                      },
                      on: {
                        click: function($event) {
                          return _vm.xhamsterModal(false, true)
                        }
                      }
                    },
                    [_vm._v(_vm._s(_vm.$t("general.ok")))]
                  )
                ]
              },
              proxy: true
            }
          ])
        },
        [
          _c(
            "div",
            { staticClass: "px-2" },
            [
              _vm.xhamster.isLoading
                ? _c("erd-spinner", {
                    attrs: { size: "lg", overlay: "", absolute: "" }
                  })
                : _vm._e(),
              _c(
                "label",
                { staticClass: "w-100", attrs: { for: "xhamster-url" } },
                [_vm._v(_vm._s(_vm.$t("editor.xhamster-url")))]
              ),
              _c("erd-input", {
                staticClass: "mt-1 mb-2 w-100",
                attrs: {
                  id: "xhamster-url",
                  autocomplete: "off",
                  placeholder: _vm.$t("editor.xhamster-url-placeholder")
                },
                model: {
                  value: _vm.xhamster.url,
                  callback: function($$v) {
                    _vm.$set(_vm.xhamster, "url", $$v)
                  },
                  expression: "xhamster.url"
                }
              }),
              _vm.xhamster.video
                ? _c(
                    "div",
                    {
                      staticClass:
                        "soundcloud-info form-control mb-2 w-100 text-center"
                    },
                    [
                      _c("img", {
                        staticClass: "cover mt-2",
                        attrs: { src: _vm.xhamster.video.videoEntity.thumbBig }
                      }),
                      _c("div", { staticClass: "info" }, [
                        _c("h5", { staticClass: "mb-1" }, [
                          _vm._v(_vm._s(_vm.xhamster.video.videoEntity.title))
                        ]),
                        _c("p", { staticClass: "p-0 m-0 text-muted" }, [
                          _vm._v(
                            " " +
                              _vm._s(
                                _vm.formatSeconds(
                                  _vm.xhamster.video.videoEntity.duration
                                )
                              ) +
                              " "
                          )
                        ])
                      ])
                    ]
                  )
                : _vm._e()
            ],
            1
          )
        ]
      ),
      _c(
        "erd-modal",
        {
          directives: [
            {
              name: "show",
              rawName: "v-show",
              value: _vm.findLogo.modal,
              expression: "findLogo.modal"
            }
          ],
          staticClass: "select-none",
          attrs: {
            title: _vm.$t("editor.find-logo") + ": " + _vm.findLogo.title,
            small: ""
          },
          on: {
            close: function($event) {
              return _vm.findLogoModal(false)
            }
          },
          scopedSlots: _vm._u([
            {
              key: "footer",
              fn: function() {
                return [
                  _c(
                    "erd-button",
                    {
                      staticClass: "mr-1",
                      attrs: { icon: "la-times", variant: "danger" },
                      on: {
                        click: function($event) {
                          return _vm.findLogoModal(false)
                        }
                      }
                    },
                    [_vm._v(_vm._s(_vm.$t("general.cancel")))]
                  ),
                  _c(
                    "erd-button",
                    {
                      attrs: {
                        icon: "la-check",
                        variant: "success",
                        disabled:
                          _vm.findLogo.isLoading ||
                          _vm.findLogo.logos.length === 0
                      },
                      on: {
                        click: function($event) {
                          return _vm.findLogoModal(false, true)
                        }
                      }
                    },
                    [_vm._v(_vm._s(_vm.$t("general.ok")))]
                  )
                ]
              },
              proxy: true
            }
          ])
        },
        [
          _c(
            "div",
            { staticClass: "px-2" },
            [
              _vm.findLogo.isLoading
                ? _c("erd-spinner", {
                    attrs: { size: "lg", overlay: "", absolute: "" }
                  })
                : _vm._e(),
              _c(
                "label",
                { staticClass: "w-100", attrs: { for: "logo-country" } },
                [_vm._v(_vm._s(_vm.$t("editor.logo-country")))]
              ),
              _c("erd-select", {
                key: "logo-countries",
                staticClass: "w-100 mt-1 mb-2",
                attrs: { id: "logo-country", items: _vm.findLogo.countries },
                model: {
                  value: _vm.findLogo.country,
                  callback: function($$v) {
                    _vm.$set(_vm.findLogo, "country", $$v)
                  },
                  expression: "findLogo.country"
                }
              }),
              _c(
                "label",
                { staticClass: "w-100", attrs: { for: "find-logo-search" } },
                [_vm._v(_vm._s(_vm.$t("editor.find-logo-search")))]
              ),
              _c("erd-input", {
                staticClass: "mt-1 mb-2 w-100",
                attrs: {
                  id: "find-logo-search",
                  autocomplete: "off",
                  placeholder: _vm.$t("menu.search")
                },
                model: {
                  value: _vm.findLogo.search,
                  callback: function($$v) {
                    _vm.$set(_vm.findLogo, "search", $$v)
                  },
                  expression: "findLogo.search"
                }
              }),
              _c("label", { staticClass: "w-100", attrs: { for: "logos" } }, [
                _vm._v(_vm._s(_vm.$t("editor.logos")))
              ]),
              _c("erd-select", {
                key: "logo-logos",
                staticClass: "w-100 mt-1 mb-2",
                attrs: { id: "logos", items: _vm.filteredLogos },
                model: {
                  value: _vm.findLogo.logo,
                  callback: function($$v) {
                    _vm.$set(_vm.findLogo, "logo", $$v)
                  },
                  expression: "findLogo.logo"
                }
              }),
              _c(
                "div",
                {
                  staticClass: "find-logo form-control mb-2 w-100 text-center"
                },
                [
                  _c(
                    "a",
                    {
                      attrs: {
                        href:
                          "http://static.iptv-tools.com/" +
                          _vm.findLogo.country +
                          "/" +
                          _vm.findLogo.logo,
                        target: "_blank"
                      }
                    },
                    [
                      _vm.findLogo.logo.length
                        ? _c("img", {
                            staticClass: "stream-logo mt-2",
                            attrs: {
                              src:
                                "http://static.iptv-tools.com/" +
                                _vm.findLogo.country +
                                "/" +
                                _vm.findLogo.logo
                            }
                          })
                        : _vm._e()
                    ]
                  )
                ]
              )
            ],
            1
          )
        ]
      ),
      _c(
        "erd-modal",
        {
          directives: [
            {
              name: "show",
              rawName: "v-show",
              value: _vm.assignLogo.modal,
              expression: "assignLogo.modal"
            }
          ],
          staticClass: "select-none",
          attrs: { title: _vm.$t("editor.assign-stream-logos"), small: "" },
          on: {
            close: function($event) {
              return _vm.assignLogoModal(false)
            }
          },
          scopedSlots: _vm._u([
            {
              key: "footer",
              fn: function() {
                return [
                  _c(
                    "erd-button",
                    {
                      staticClass: "mr-1",
                      attrs: { icon: "la-times", variant: "danger" },
                      on: {
                        click: function($event) {
                          return _vm.assignLogoModal(false)
                        }
                      }
                    },
                    [_vm._v(_vm._s(_vm.$t("general.cancel")))]
                  ),
                  _c(
                    "erd-button",
                    {
                      attrs: {
                        icon: "la-check",
                        variant: "success",
                        disabled:
                          _vm.assignLogo.isLoading ||
                          _vm.assignLogo.country.length === 0
                      },
                      on: {
                        click: function($event) {
                          return _vm.assignLogoModal(false, true)
                        }
                      }
                    },
                    [_vm._v(_vm._s(_vm.$t("general.ok")))]
                  )
                ]
              },
              proxy: true
            }
          ])
        },
        [
          _c(
            "div",
            { staticClass: "px-2 assign-logo" },
            [
              _vm.assignLogo.isLoading
                ? _c("erd-spinner", {
                    attrs: { size: "lg", overlay: "", absolute: "" }
                  })
                : _vm._e(),
              _c(
                "label",
                { staticClass: "w-100", attrs: { for: "assign-logo-country" } },
                [_vm._v(_vm._s(_vm.$t("editor.logo-country")))]
              ),
              _c("erd-select", {
                key: "assign-logo-countries",
                staticClass: "w-100 mt-1 mb-2",
                attrs: {
                  id: "assign-logo-country",
                  items: _vm.assignLogo.countries
                },
                model: {
                  value: _vm.assignLogo.country,
                  callback: function($$v) {
                    _vm.$set(_vm.assignLogo, "country", $$v)
                  },
                  expression: "assignLogo.country"
                }
              }),
              _c(
                "erd-radiobutton",
                {
                  staticClass: "mt-1",
                  attrs: { value: 1 },
                  model: {
                    value: _vm.assignLogo.assignAll,
                    callback: function($$v) {
                      _vm.$set(_vm.assignLogo, "assignAll", $$v)
                    },
                    expression: "assignLogo.assignAll"
                  }
                },
                [_vm._v(_vm._s(_vm.$t("editor.assign-all-streams")))]
              ),
              _c(
                "erd-radiobutton",
                {
                  attrs: { value: 0 },
                  model: {
                    value: _vm.assignLogo.assignAll,
                    callback: function($$v) {
                      _vm.$set(_vm.assignLogo, "assignAll", $$v)
                    },
                    expression: "assignLogo.assignAll"
                  }
                },
                [_vm._v(_vm._s(_vm.$t("editor.assign-missing-only")))]
              )
            ],
            1
          )
        ]
      ),
      _c(
        "erd-modal",
        {
          directives: [
            {
              name: "show",
              rawName: "v-show",
              value: _vm.importM3U.modal,
              expression: "importM3U.modal"
            }
          ],
          staticClass: "select-none",
          attrs: { title: _vm.$t("editor.import-m3u"), small: "" },
          on: {
            close: function($event) {
              return _vm.importM3UModal(false)
            }
          },
          scopedSlots: _vm._u([
            {
              key: "footer",
              fn: function() {
                return [
                  _c(
                    "erd-button",
                    {
                      staticClass: "mr-1",
                      attrs: { icon: "la-times", variant: "danger" },
                      on: {
                        click: function($event) {
                          return _vm.importM3UModal(false)
                        }
                      }
                    },
                    [_vm._v(_vm._s(_vm.$t("general.cancel")))]
                  ),
                  _c(
                    "erd-button",
                    {
                      attrs: {
                        icon: "la-check",
                        variant: "success",
                        disabled:
                          _vm.importM3U.isLoading ||
                          _vm.importM3U.groups.length === 0 ||
                          _vm.importM3U.importGroups.length === 0
                      },
                      on: {
                        click: function($event) {
                          return _vm.importM3UModal(false, true)
                        }
                      }
                    },
                    [_vm._v(_vm._s(_vm.$t("general.ok")))]
                  )
                ]
              },
              proxy: true
            }
          ])
        },
        [
          _c(
            "div",
            { staticClass: "px-2 assign-logo" },
            [
              _c(
                "label",
                { staticClass: "d-block mb-1", attrs: { for: "title" } },
                [_vm._v(_vm._s(_vm.$t("m3u.file")))]
              ),
              _c("erd-input", {
                staticClass: "w-100",
                attrs: { type: "file", accept: ".m3u8, .m3u" },
                on: { change: _vm.uploadM3U },
                model: {
                  value: _vm.importM3U.file,
                  callback: function($$v) {
                    _vm.$set(_vm.importM3U, "file", $$v)
                  },
                  expression: "importM3U.file"
                }
              }),
              _c(
                "div",
                { staticClass: "radiobrowser-stations" },
                [
                  _vm.importM3U.isLoading
                    ? _c("erd-spinner", {
                        attrs: { size: "lg", overlay: "", absolute: "" }
                      })
                    : _vm._e(),
                  _vm.importM3U.groups.length
                    ? _c("p", { staticClass: "mb-1 pb-0" }, [
                        _vm._v(
                          " " + _vm._s(_vm.$t("editor.select-groups")) + " "
                        )
                      ])
                    : _vm._e(),
                  _c(
                    "perfect-scrollbar",
                    {
                      attrs: {
                        settings: {
                          suppressScrollX: true,
                          wheelPropagation: false
                        }
                      }
                    },
                    _vm._l(_vm.importM3U.groups, function(group, index) {
                      return _c(
                        "div",
                        {
                          key: "import-group-" + index + "-" + group.name,
                          staticClass: "form-control radiobrowser-station",
                          class: {
                            selected: _vm.importM3U.importGroups.includes(index)
                          },
                          on: {
                            click: [
                              function($event) {
                                if (!$event.ctrlKey) {
                                  return null
                                }
                                return _vm.toggleImportM3USelection(index)
                              },
                              function($event) {
                                if (!$event.shiftKey) {
                                  return null
                                }
                                return _vm.selectImportM3URangeSelection(index)
                              },
                              function($event) {
                                if (
                                  $event.ctrlKey ||
                                  $event.shiftKey ||
                                  $event.altKey ||
                                  $event.metaKey
                                ) {
                                  return null
                                }
                                return _vm.selectImportM3USelection(index)
                              }
                            ]
                          }
                        },
                        [
                          _c("span", { staticClass: "station-name" }, [
                            _vm._v(_vm._s(group.name))
                          ]),
                          _c(
                            "span",
                            { staticClass: "text-muted text-small ml-2" },
                            [
                              _vm._v(
                                _vm._s(_vm.$t("category-type." + group.type))
                              )
                            ]
                          ),
                          _c(
                            "span",
                            {
                              staticClass: "text-muted text-small float-right"
                            },
                            [_vm._v(_vm._s(group.streams.length))]
                          )
                        ]
                      )
                    }),
                    0
                  )
                ],
                1
              )
            ],
            1
          )
        ]
      ),
      _c(
        "erd-modal",
        {
          directives: [
            {
              name: "show",
              rawName: "v-show",
              value: _vm.assignTVGID.modal,
              expression: "assignTVGID.modal"
            }
          ],
          staticClass: "select-none",
          attrs: { title: _vm.$t("editor.assign-tv-guide"), small: "" },
          on: {
            close: function($event) {
              return _vm.assignTVGIDModal(false)
            }
          },
          scopedSlots: _vm._u([
            {
              key: "footer",
              fn: function() {
                return [
                  _c(
                    "erd-button",
                    {
                      staticClass: "mr-1",
                      attrs: { icon: "la-times", variant: "danger" },
                      on: {
                        click: function($event) {
                          return _vm.assignTVGIDModal(false)
                        }
                      }
                    },
                    [_vm._v(_vm._s(_vm.$t("general.cancel")))]
                  ),
                  _c(
                    "erd-button",
                    {
                      attrs: {
                        icon: "la-check",
                        variant: "success",
                        disabled:
                          _vm.assignTVGID.isLoading ||
                          _vm.assignTVGID.country.length === 0
                      },
                      on: {
                        click: function($event) {
                          return _vm.assignTVGIDModal(false, true)
                        }
                      }
                    },
                    [_vm._v(_vm._s(_vm.$t("general.ok")))]
                  )
                ]
              },
              proxy: true
            }
          ])
        },
        [
          _c(
            "div",
            { staticClass: "px-2 assign-logo" },
            [
              _vm.assignTVGID.isLoading
                ? _c("erd-spinner", {
                    attrs: { size: "lg", overlay: "", absolute: "" }
                  })
                : _vm._e(),
              _c(
                "label",
                {
                  staticClass: "w-100",
                  attrs: { for: "assign-tv-guide-country" }
                },
                [_vm._v(_vm._s(_vm.$t("editor.logo-country")))]
              ),
              _c("erd-select", {
                key: "assign-tv-guide-countries",
                staticClass: "w-100 mt-1 mb-2",
                attrs: {
                  id: "assign-tv-guide-country",
                  items: _vm.assignTVGID.countries
                },
                model: {
                  value: _vm.assignTVGID.country,
                  callback: function($$v) {
                    _vm.$set(_vm.assignTVGID, "country", $$v)
                  },
                  expression: "assignTVGID.country"
                }
              }),
              _c(
                "erd-radiobutton",
                {
                  staticClass: "mt-1",
                  attrs: { value: 1 },
                  model: {
                    value: _vm.assignTVGID.assignAll,
                    callback: function($$v) {
                      _vm.$set(_vm.assignTVGID, "assignAll", $$v)
                    },
                    expression: "assignTVGID.assignAll"
                  }
                },
                [_vm._v(_vm._s(_vm.$t("editor.assign-all-streams")))]
              ),
              _c(
                "erd-radiobutton",
                {
                  attrs: { value: 0 },
                  model: {
                    value: _vm.assignTVGID.assignAll,
                    callback: function($$v) {
                      _vm.$set(_vm.assignTVGID, "assignAll", $$v)
                    },
                    expression: "assignTVGID.assignAll"
                  }
                },
                [_vm._v(_vm._s(_vm.$t("editor.assign-epg-missing-only")))]
              )
            ],
            1
          )
        ]
      ),
      _c(
        "erd-modal",
        {
          directives: [
            {
              name: "show",
              rawName: "v-show",
              value: _vm.findTVGID.modal,
              expression: "findTVGID.modal"
            }
          ],
          staticClass: "select-none",
          attrs: {
            title: _vm.$t("editor.find-tv-guide") + ": " + _vm.findTVGID.title,
            small: ""
          },
          on: {
            close: function($event) {
              return _vm.findTVGIDModal(false)
            }
          },
          scopedSlots: _vm._u([
            {
              key: "footer",
              fn: function() {
                return [
                  _c(
                    "erd-button",
                    {
                      staticClass: "mr-1",
                      attrs: { icon: "la-times", variant: "danger" },
                      on: {
                        click: function($event) {
                          return _vm.findTVGIDModal(false)
                        }
                      }
                    },
                    [_vm._v(_vm._s(_vm.$t("general.cancel")))]
                  ),
                  _c(
                    "erd-button",
                    {
                      attrs: {
                        icon: "la-check",
                        variant: "success",
                        disabled:
                          _vm.findTVGID.isLoading ||
                          _vm.findTVGID.channels.length === 0
                      },
                      on: {
                        click: function($event) {
                          return _vm.findTVGIDModal(false, true)
                        }
                      }
                    },
                    [_vm._v(_vm._s(_vm.$t("general.ok")))]
                  )
                ]
              },
              proxy: true
            }
          ])
        },
        [
          _c(
            "div",
            { staticClass: "px-2 find-channel-id" },
            [
              _vm.findTVGID.isLoading
                ? _c("erd-spinner", {
                    attrs: { size: "lg", overlay: "", absolute: "" }
                  })
                : _vm._e(),
              _c(
                "label",
                { staticClass: "w-100", attrs: { for: "logo-country" } },
                [_vm._v(_vm._s(_vm.$t("editor.logo-country")))]
              ),
              _c("erd-select", {
                key: "logo-countries",
                staticClass: "w-100 mt-1 mb-2",
                attrs: { id: "logo-country", items: _vm.findTVGID.countries },
                model: {
                  value: _vm.findTVGID.country,
                  callback: function($$v) {
                    _vm.$set(_vm.findTVGID, "country", $$v)
                  },
                  expression: "findTVGID.country"
                }
              }),
              _c(
                "label",
                { staticClass: "w-100", attrs: { for: "find-tvguide-search" } },
                [_vm._v(_vm._s(_vm.$t("editor.find-logo-search")))]
              ),
              _c("erd-input", {
                staticClass: "mt-1 mb-2 w-100",
                attrs: {
                  id: "find-tvguide-search",
                  autocomplete: "off",
                  placeholder: _vm.$t("menu.search")
                },
                model: {
                  value: _vm.findTVGID.search,
                  callback: function($$v) {
                    _vm.$set(_vm.findTVGID, "search", $$v)
                  },
                  expression: "findTVGID.search"
                }
              }),
              _c(
                "label",
                { staticClass: "w-100", attrs: { for: "channels" } },
                [_vm._v(_vm._s(_vm.$t("editor.channel")))]
              ),
              _c("erd-select", {
                key: "tvguide-channels",
                staticClass: "w-100 mt-1 mb-2",
                attrs: { id: "channels", items: _vm.filteredTVGIDS },
                model: {
                  value: _vm.findTVGID.channel,
                  callback: function($$v) {
                    _vm.$set(_vm.findTVGID, "channel", $$v)
                  },
                  expression: "findTVGID.channel"
                }
              })
            ],
            1
          )
        ]
      ),
      _c("erd-app-menu", { attrs: { icon: "la-tools" } }, [
        _vm.playlistSelected
          ? _c(
              "div",
              { staticClass: "pt-3 select-none" },
              [
                _c(
                  "erd-collapse",
                  {
                    key: "import-m3u",
                    attrs: { title: _vm.$t("editor.import-m3u"), small: "" }
                  },
                  [
                    _c("ul", { staticClass: "list-unstyled mb-0" }, [
                      _c("li", { staticClass: "nav-item" }, [
                        _c(
                          "a",
                          {
                            attrs: { href: "#" },
                            on: {
                              click: function($event) {
                                $event.preventDefault()
                                return _vm.importM3UModal(true)
                              }
                            }
                          },
                          [
                            _c("i", { staticClass: "las la-file-import mr-1" }),
                            _vm._v(_vm._s(_vm.$t("editor.import-file")))
                          ]
                        )
                      ])
                    ])
                  ]
                ),
                _c(
                  "erd-collapse",
                  {
                    key: "sort-groups",
                    attrs: { title: _vm.$t("editor.sort-groups"), small: "" }
                  },
                  [
                    _c("ul", { staticClass: "list-unstyled mb-0" }, [
                      _c("li", { staticClass: "nav-item" }, [
                        _c(
                          "a",
                          {
                            attrs: { href: "#" },
                            on: {
                              click: function($event) {
                                $event.preventDefault()
                                return _vm.sortGroupAlphaUp.apply(
                                  null,
                                  arguments
                                )
                              }
                            }
                          },
                          [
                            _c("i", {
                              staticClass: "las la-sort-alpha-up mr-1"
                            }),
                            _vm._v(_vm._s(_vm.$t("editor.sort-alpha-up")))
                          ]
                        )
                      ]),
                      _c("li", { staticClass: "nav-item" }, [
                        _c(
                          "a",
                          {
                            attrs: { href: "#" },
                            on: {
                              click: function($event) {
                                $event.preventDefault()
                                return _vm.sortGroupAlphaDown.apply(
                                  null,
                                  arguments
                                )
                              }
                            }
                          },
                          [
                            _c("i", {
                              staticClass: "las la-sort-alpha-down mr-1"
                            }),
                            _vm._v(_vm._s(_vm.$t("editor.sort-alpha-down")))
                          ]
                        )
                      ]),
                      _c("li", { staticClass: "nav-item" }, [
                        _c(
                          "a",
                          {
                            attrs: { href: "#" },
                            on: {
                              click: function($event) {
                                $event.preventDefault()
                                return _vm.sortGroupTypeUp.apply(
                                  null,
                                  arguments
                                )
                              }
                            }
                          },
                          [
                            _c("i", {
                              staticClass: "las la-sort-numeric-up mr-1"
                            }),
                            _vm._v(_vm._s(_vm.$t("editor.sort-type-up")))
                          ]
                        )
                      ]),
                      _c("li", { staticClass: "nav-item" }, [
                        _c(
                          "a",
                          {
                            attrs: { href: "#" },
                            on: {
                              click: function($event) {
                                $event.preventDefault()
                                return _vm.sortGroupTypeDown.apply(
                                  null,
                                  arguments
                                )
                              }
                            }
                          },
                          [
                            _c("i", {
                              staticClass: "las la-sort-numeric-down mr-1"
                            }),
                            _vm._v(_vm._s(_vm.$t("editor.sort-type-down")))
                          ]
                        )
                      ])
                    ])
                  ]
                ),
                _c(
                  "erd-collapse",
                  {
                    key: "sort-streams",
                    attrs: { title: _vm.$t("editor.sort-streams"), small: "" }
                  },
                  [
                    _c("ul", { staticClass: "list-unstyled mb-0" }, [
                      _c("li", { staticClass: "nav-item" }, [
                        _c(
                          "a",
                          {
                            attrs: { href: "#" },
                            on: {
                              click: function($event) {
                                $event.preventDefault()
                                return _vm.sortStreamAlphaUp.apply(
                                  null,
                                  arguments
                                )
                              }
                            }
                          },
                          [
                            _c("i", {
                              staticClass: "las la-sort-alpha-up mr-1"
                            }),
                            _vm._v(_vm._s(_vm.$t("editor.sort-alpha-up")))
                          ]
                        )
                      ]),
                      _c("li", { staticClass: "nav-item" }, [
                        _c(
                          "a",
                          {
                            attrs: { href: "#" },
                            on: {
                              click: function($event) {
                                $event.preventDefault()
                                return _vm.sortStreamAlphaDown.apply(
                                  null,
                                  arguments
                                )
                              }
                            }
                          },
                          [
                            _c("i", {
                              staticClass: "las la-sort-alpha-down mr-1"
                            }),
                            _vm._v(_vm._s(_vm.$t("editor.sort-alpha-down")))
                          ]
                        )
                      ]),
                      _c("li", { staticClass: "nav-item" }, [
                        _c(
                          "a",
                          {
                            attrs: { href: "#" },
                            on: {
                              click: function($event) {
                                $event.preventDefault()
                                return _vm.sortStreamHiddenUp.apply(
                                  null,
                                  arguments
                                )
                              }
                            }
                          },
                          [
                            _c("i", { staticClass: "las la-eye-slash mr-1" }),
                            _vm._v(_vm._s(_vm.$t("editor.sort-hidden-up")))
                          ]
                        )
                      ]),
                      _c("li", { staticClass: "nav-item" }, [
                        _c(
                          "a",
                          {
                            attrs: { href: "#" },
                            on: {
                              click: function($event) {
                                $event.preventDefault()
                                return _vm.sortStreamHiddenDown.apply(
                                  null,
                                  arguments
                                )
                              }
                            }
                          },
                          [
                            _c("i", { staticClass: "las la-eye-slash mr-1" }),
                            _vm._v(_vm._s(_vm.$t("editor.sort-hidden-down")))
                          ]
                        )
                      ])
                    ])
                  ]
                ),
                _vm.activeGroupType == 1
                  ? _c(
                      "erd-collapse",
                      {
                        key: "import-radio",
                        attrs: {
                          title: _vm.$t("editor.import-radio"),
                          small: ""
                        }
                      },
                      [
                        _c("ul", { staticClass: "list-unstyled mb-0" }, [
                          _c("li", { staticClass: "nav-item" }, [
                            _c(
                              "a",
                              {
                                attrs: { href: "#" },
                                on: {
                                  click: function($event) {
                                    $event.preventDefault()
                                    return _vm.radioBrowserModal(true)
                                  }
                                }
                              },
                              [
                                _c("i", {
                                  staticClass: "las la-broadcast-tower mr-1"
                                }),
                                _vm._v(
                                  _vm._s(_vm.$t("editor.import-radiobrowser"))
                                )
                              ]
                            )
                          ])
                        ])
                      ]
                    )
                  : _vm._e(),
                _vm.activeGroupType == 1
                  ? _c(
                      "erd-collapse",
                      {
                        key: "import-music",
                        attrs: {
                          title: _vm.$t("editor.import-music"),
                          small: ""
                        }
                      },
                      [
                        _c("ul", { staticClass: "list-unstyled mb-0" }, [
                          _c("li", { staticClass: "nav-item" }, [
                            _c(
                              "a",
                              {
                                attrs: { href: "#" },
                                on: {
                                  click: function($event) {
                                    $event.preventDefault()
                                    return _vm.soundcloudModal(true)
                                  }
                                }
                              },
                              [
                                _c("i", {
                                  staticClass: "lab la-soundcloud mr-1"
                                }),
                                _vm._v(
                                  _vm._s(_vm.$t("editor.import-soundcloud"))
                                )
                              ]
                            )
                          ])
                        ])
                      ]
                    )
                  : _vm._e(),
                _c(
                  "erd-collapse",
                  {
                    key: "import-video",
                    attrs: { title: _vm.$t("editor.import-video"), small: "" }
                  },
                  [
                    _c("ul", { staticClass: "list-unstyled mb-0" }, [
                      _c("li", { staticClass: "nav-item" }, [
                        _c(
                          "a",
                          {
                            attrs: { href: "#" },
                            on: {
                              click: function($event) {
                                $event.preventDefault()
                                return _vm.youtubeModal(true)
                              }
                            }
                          },
                          [
                            _c("i", { staticClass: "lab la-youtube mr-1" }),
                            _vm._v(_vm._s(_vm.$t("editor.import-youtube")))
                          ]
                        )
                      ]),
                      _c("li", { staticClass: "nav-item" }, [
                        _c(
                          "a",
                          {
                            attrs: { href: "#" },
                            on: {
                              click: function($event) {
                                $event.preventDefault()
                                return _vm.vimeoModal(true)
                              }
                            }
                          },
                          [
                            _c("i", { staticClass: "lab la-vimeo mr-1" }),
                            _vm._v(_vm._s(_vm.$t("editor.import-vimeo")))
                          ]
                        )
                      ]),
                      _c("li", { staticClass: "nav-item" }, [
                        _c(
                          "a",
                          {
                            attrs: { href: "#" },
                            on: {
                              click: function($event) {
                                $event.preventDefault()
                                return _vm.dailymotionModal(true)
                              }
                            }
                          },
                          [
                            _c("i", { staticClass: "lab la-youtube mr-1" }),
                            _vm._v(_vm._s(_vm.$t("editor.import-dailymotion")))
                          ]
                        )
                      ]),
                      _c("li", { staticClass: "nav-item" }, [
                        _c(
                          "a",
                          {
                            attrs: { href: "#" },
                            on: {
                              click: function($event) {
                                $event.preventDefault()
                                return _vm.tedTalksModal(true)
                              }
                            }
                          },
                          [
                            _c("i", { staticClass: "las la-comments mr-1" }),
                            _vm._v(_vm._s(_vm.$t("editor.import-ted-talks")))
                          ]
                        )
                      ]),
                      _c("li", { staticClass: "nav-item" }, [
                        _c(
                          "a",
                          {
                            attrs: { href: "#" },
                            on: {
                              click: function($event) {
                                $event.preventDefault()
                                return _vm.xhamsterModal(true)
                              }
                            }
                          },
                          [
                            _c("i", { staticClass: "las la-heart mr-1" }),
                            _vm._v(_vm._s(_vm.$t("editor.import-xhamster")))
                          ]
                        )
                      ])
                    ])
                  ]
                ),
                _vm.activeGroupType == 1
                  ? _c(
                      "erd-collapse",
                      {
                        key: "assign-logos",
                        attrs: {
                          title: _vm.$t("editor.assign-logos"),
                          small: ""
                        }
                      },
                      [
                        _c("ul", { staticClass: "list-unstyled mb-0" }, [
                          _c("li", { staticClass: "nav-item" }, [
                            _c(
                              "a",
                              {
                                attrs: { href: "#" },
                                on: {
                                  click: function($event) {
                                    $event.preventDefault()
                                    return _vm.assignLogoModal(true)
                                  }
                                }
                              },
                              [
                                _c("i", {
                                  staticClass: "las la-photo-video mr-1"
                                }),
                                _vm._v(
                                  _vm._s(_vm.$t("editor.assign-stream-logos"))
                                )
                              ]
                            )
                          ])
                        ])
                      ]
                    )
                  : _vm._e(),
                _vm.activeGroupType == 1
                  ? _c(
                      "erd-collapse",
                      {
                        key: "assign-tv-guide",
                        attrs: {
                          title: _vm.$t("editor.assign-tv-guide"),
                          small: ""
                        }
                      },
                      [
                        _c("ul", { staticClass: "list-unstyled mb-0" }, [
                          _c("li", { staticClass: "nav-item" }, [
                            _c(
                              "a",
                              {
                                attrs: { href: "#" },
                                on: {
                                  click: function($event) {
                                    $event.preventDefault()
                                    return _vm.assignTVGIDModal(true)
                                  }
                                }
                              },
                              [
                                _c("i", { staticClass: "las la-th-list mr-1" }),
                                _vm._v(_vm._s(_vm.$t("editor.assign-tvg-ids")))
                              ]
                            )
                          ])
                        ])
                      ]
                    )
                  : _vm._e()
              ],
              1
            )
          : _vm._e()
      ]),
      _vm.playlistSelected
        ? _c(
            "erd-row",
            { staticClass: "m-0 p-0" },
            [
              _c(
                "erd-col",
                {
                  staticClass: "pr-lg-0",
                  attrs: { xl: "4", lg: "4", md: "12" }
                },
                [
                  _c("div", { staticClass: "form-control" }, [
                    _c("span", { staticClass: "mr-1" }, [
                      _vm._v(_vm._s(_vm.$t("xtream.groups")))
                    ]),
                    _c("span", { staticClass: "font-weight-bold" }, [
                      _vm._v(_vm._s(_vm.filteredGroups.length))
                    ])
                  ]),
                  _c("erd-context-menu", {
                    ref: "context-group",
                    attrs: { items: _vm.groupContextMenu, depth: "1" }
                  }),
                  _c(
                    "div",
                    {
                      on: {
                        contextmenu: function($event) {
                          $event.preventDefault()
                          return _vm.openContext("context-group")
                        }
                      }
                    },
                    [
                      _c(
                        "draggable",
                        {
                          attrs: {
                            animation: "200",
                            group: "groups",
                            "ghost-class": "ghost",
                            "scroll-sensitivity": "200",
                            "selected-class": "selected",
                            handle: ".handle",
                            "force-fallback": true,
                            "multi-drag": true
                          },
                          on: {
                            start: function($event) {
                              _vm.dragGroup = true
                            },
                            end: function($event) {
                              _vm.dragGroup = false
                            },
                            change: _vm.groupDragChanged
                          },
                          model: {
                            value: _vm.playlistEditor.groups,
                            callback: function($$v) {
                              _vm.$set(_vm.playlistEditor, "groups", $$v)
                            },
                            expression: "playlistEditor.groups"
                          }
                        },
                        [
                          _c(
                            "transition-group",
                            {
                              attrs: {
                                type: "transition",
                                name: !_vm.dragGroup ? "flip-list" : null
                              }
                            },
                            _vm._l(_vm.filteredGroups, function(group, index) {
                              return _c(
                                "div",
                                {
                                  key: "group-" + index,
                                  staticClass: "form-control editor-group",
                                  class: {
                                    selected: _vm.activeGroups.includes(
                                      group.id
                                    ),
                                    active: _vm.activeGroup === group.id,
                                    hidden: group.group_is_hidden
                                  },
                                  on: {
                                    click: [
                                      function($event) {
                                        if (!$event.ctrlKey) {
                                          return null
                                        }
                                        return _vm.toggleGroupSelection(
                                          group.id
                                        )
                                      },
                                      function($event) {
                                        if (!$event.shiftKey) {
                                          return null
                                        }
                                        return _vm.selectGroupRangeSelection(
                                          group.id
                                        )
                                      },
                                      function($event) {
                                        if (
                                          $event.ctrlKey ||
                                          $event.shiftKey ||
                                          $event.altKey ||
                                          $event.metaKey
                                        ) {
                                          return null
                                        }
                                        return _vm.selectGroupSelection(
                                          group.id
                                        )
                                      }
                                    ],
                                    dblclick: _vm.groupDoubleClick
                                  }
                                },
                                [
                                  _c("i", {
                                    staticClass: "las la-braille handle mr-2"
                                  }),
                                  _c(
                                    "a",
                                    {
                                      attrs: { href: "#" },
                                      on: {
                                        click: function($event) {
                                          $event.preventDefault()
                                          _vm.activeGroup = group.id
                                        }
                                      }
                                    },
                                    [_vm._v(_vm._s(group.group_name))]
                                  ),
                                  _c(
                                    "span",
                                    {
                                      staticClass: "text-muted text-small ml-2"
                                    },
                                    [
                                      _vm._v(
                                        _vm._s(
                                          _vm.$t(
                                            "category-type." + group.group_type
                                          )
                                        )
                                      )
                                    ]
                                  ),
                                  _c("span", { staticClass: "float-right" }, [
                                    _vm._v(_vm._s(group.streams))
                                  ])
                                ]
                              )
                            }),
                            0
                          )
                        ],
                        1
                      )
                    ],
                    1
                  )
                ],
                1
              ),
              _c(
                "erd-col",
                { attrs: { xl: "8", lg: "8", md: "12" } },
                [
                  _c("div", { staticClass: "form-control" }, [
                    _c("span", { staticClass: "mr-1" }, [
                      _vm._v(_vm._s(_vm.$t("xtream.streams")))
                    ]),
                    _c("span", { staticClass: "font-weight-bold" }, [
                      _vm._v(_vm._s(_vm.filteredStreams.length))
                    ])
                  ]),
                  _c("erd-context-menu", {
                    ref: "context-stream",
                    attrs: { items: _vm.streamContextMenu, depth: "1" }
                  }),
                  _vm.activeGroupType === 1 && !_vm.isLoading
                    ? [
                        _c(
                          "div",
                          {
                            on: {
                              contextmenu: function($event) {
                                $event.preventDefault()
                                return _vm.openContext("context-stream")
                              }
                            }
                          },
                          [
                            _c(
                              "draggable",
                              {
                                attrs: {
                                  animation: "200",
                                  group: "streams",
                                  "ghost-class": "ghost",
                                  "scroll-sensitivity": "200",
                                  "selected-class": "selected",
                                  handle: ".handle",
                                  "force-fallback": true,
                                  "multi-drag": true
                                },
                                on: {
                                  start: function($event) {
                                    _vm.dragStream = true
                                  },
                                  end: function($event) {
                                    _vm.dragStream = false
                                  },
                                  change: _vm.streamDragChanged
                                },
                                model: {
                                  value: _vm.playlistEditor.streams,
                                  callback: function($$v) {
                                    _vm.$set(_vm.playlistEditor, "streams", $$v)
                                  },
                                  expression: "playlistEditor.streams"
                                }
                              },
                              [
                                _c(
                                  "transition-group",
                                  {
                                    attrs: {
                                      type: "transition",
                                      name: !_vm.dragStream ? "flip-list" : null
                                    }
                                  },
                                  _vm._l(_vm.filteredStreams, function(
                                    stream,
                                    index
                                  ) {
                                    return _c(
                                      "div",
                                      {
                                        key:
                                          "stream-" + index + "-" + stream.id,
                                        staticClass:
                                          "form-control editor-stream",
                                        class: {
                                          selected: _vm.activeStreams.includes(
                                            stream.id
                                          ),
                                          active:
                                            _vm.activeStream === stream.id,
                                          hidden: stream.stream_is_hidden
                                        },
                                        on: {
                                          click: [
                                            function($event) {
                                              if (!$event.ctrlKey) {
                                                return null
                                              }
                                              return _vm.toggleStreamSelection(
                                                stream.id
                                              )
                                            },
                                            function($event) {
                                              if (!$event.shiftKey) {
                                                return null
                                              }
                                              return _vm.selectStreamRangeSelection(
                                                stream.id
                                              )
                                            },
                                            function($event) {
                                              if (
                                                $event.ctrlKey ||
                                                $event.shiftKey ||
                                                $event.altKey ||
                                                $event.metaKey
                                              ) {
                                                return null
                                              }
                                              return _vm.selectStreamSelection(
                                                stream.id
                                              )
                                            }
                                          ],
                                          dblclick: _vm.streamDoubleClick
                                        }
                                      },
                                      [
                                        _c("i", {
                                          staticClass:
                                            "las la-braille handle mr-2"
                                        }),
                                        _c("span", { staticClass: "mr-2" }, [
                                          _vm._v(_vm._s(stream.stream_tvg_name))
                                        ]),
                                        _c(
                                          "span",
                                          { staticClass: "text-muted" },
                                          [_vm._v(_vm._s(stream.stream_tvg_id))]
                                        ),
                                        stream.stream_radio
                                          ? _c("i", {
                                              staticClass: "ml-2 las la-music"
                                            })
                                          : _vm._e(),
                                        stream.stream_tvg_logo
                                          ? _c("img", {
                                              staticClass: "stream-icon",
                                              attrs: {
                                                src: stream.stream_tvg_logo
                                              }
                                            })
                                          : _vm._e()
                                      ]
                                    )
                                  }),
                                  0
                                )
                              ],
                              1
                            )
                          ],
                          1
                        )
                      ]
                    : _vm._e(),
                  _vm.activeGroupType === 2 && !_vm.isLoading
                    ? [
                        _c(
                          "div",
                          {
                            on: {
                              contextmenu: function($event) {
                                $event.preventDefault()
                                return _vm.openContext("context-stream")
                              }
                            }
                          },
                          [
                            _c(
                              "draggable",
                              {
                                attrs: {
                                  animation: "200",
                                  group: "streams",
                                  "ghost-class": "ghost",
                                  "scroll-sensitivity": "200",
                                  "selected-class": "selected",
                                  handle: ".handle",
                                  "force-fallback": true,
                                  "multi-drag": true
                                },
                                on: {
                                  start: function($event) {
                                    _vm.dragStream = true
                                  },
                                  end: function($event) {
                                    _vm.dragStream = false
                                  },
                                  change: _vm.streamDragChanged
                                },
                                model: {
                                  value: _vm.playlistEditor.streams,
                                  callback: function($$v) {
                                    _vm.$set(_vm.playlistEditor, "streams", $$v)
                                  },
                                  expression: "playlistEditor.streams"
                                }
                              },
                              [
                                _c(
                                  "transition-group",
                                  {
                                    attrs: {
                                      type: "transition",
                                      name: !_vm.dragStream ? "flip-list" : null
                                    }
                                  },
                                  _vm._l(_vm.filteredStreams, function(
                                    stream,
                                    index
                                  ) {
                                    return _c(
                                      "div",
                                      {
                                        key: "stream-" + index,
                                        staticClass:
                                          "form-control editor-stream",
                                        class: {
                                          selected: _vm.activeStreams.includes(
                                            stream.id
                                          ),
                                          active:
                                            _vm.activeStream === stream.id,
                                          hidden: stream.stream_is_hidden,
                                          success: stream.sync_is_new,
                                          danger: stream.sync_is_removed
                                        },
                                        on: {
                                          click: [
                                            function($event) {
                                              if (!$event.ctrlKey) {
                                                return null
                                              }
                                              return _vm.toggleStreamSelection(
                                                stream.id
                                              )
                                            },
                                            function($event) {
                                              if (!$event.shiftKey) {
                                                return null
                                              }
                                              return _vm.selectStreamRangeSelection(
                                                stream.id
                                              )
                                            },
                                            function($event) {
                                              if (
                                                $event.ctrlKey ||
                                                $event.shiftKey ||
                                                $event.altKey ||
                                                $event.metaKey
                                              ) {
                                                return null
                                              }
                                              return _vm.selectStreamSelection(
                                                stream.id
                                              )
                                            }
                                          ],
                                          dblclick: _vm.streamDoubleClick
                                        }
                                      },
                                      [
                                        _c("i", {
                                          staticClass:
                                            "las la-braille handle mr-2"
                                        }),
                                        _c("span", { staticClass: "mr-2" }, [
                                          _vm._v(
                                            _vm._s(
                                              stream.movie_name &&
                                                stream.movie_name.length
                                                ? stream.movie_name
                                                : stream.stream_tvg_name
                                            )
                                          )
                                        ]),
                                        _c(
                                          "span",
                                          { staticClass: "text-muted" },
                                          [_vm._v(_vm._s(stream.movie_year))]
                                        )
                                      ]
                                    )
                                  }),
                                  0
                                )
                              ],
                              1
                            )
                          ],
                          1
                        )
                      ]
                    : _vm._e(),
                  _vm.activeGroupType === 3 && !_vm.isLoading
                    ? [
                        _c(
                          "div",
                          {
                            on: {
                              contextmenu: function($event) {
                                $event.preventDefault()
                                return _vm.openContext("context-stream")
                              }
                            }
                          },
                          [
                            _c(
                              "draggable",
                              {
                                attrs: {
                                  animation: "200",
                                  group: "streams",
                                  "ghost-class": "ghost",
                                  "scroll-sensitivity": "200",
                                  "selected-class": "selected",
                                  handle: ".handle",
                                  "force-fallback": true,
                                  "multi-drag": true
                                },
                                on: {
                                  start: function($event) {
                                    _vm.dragStream = true
                                  },
                                  end: function($event) {
                                    _vm.dragStream = false
                                  },
                                  change: _vm.streamDragChanged
                                },
                                model: {
                                  value: _vm.playlistEditor.streams,
                                  callback: function($$v) {
                                    _vm.$set(_vm.playlistEditor, "streams", $$v)
                                  },
                                  expression: "playlistEditor.streams"
                                }
                              },
                              [
                                _c(
                                  "transition-group",
                                  {
                                    attrs: {
                                      type: "transition",
                                      name: !_vm.dragStream ? "flip-list" : null
                                    }
                                  },
                                  _vm._l(_vm.filteredStreams, function(
                                    stream,
                                    index
                                  ) {
                                    return _c(
                                      "div",
                                      {
                                        key: "stream-" + index,
                                        staticClass:
                                          "form-control editor-stream",
                                        class: {
                                          selected: _vm.activeStreams.includes(
                                            stream.id
                                          ),
                                          active:
                                            _vm.activeStream === stream.id,
                                          hidden: stream.stream_is_hidden,
                                          success: stream.sync_is_new,
                                          danger: stream.sync_is_removed
                                        },
                                        on: {
                                          click: [
                                            function($event) {
                                              if (!$event.ctrlKey) {
                                                return null
                                              }
                                              return _vm.toggleStreamSelection(
                                                stream.id
                                              )
                                            },
                                            function($event) {
                                              if (!$event.shiftKey) {
                                                return null
                                              }
                                              return _vm.selectStreamRangeSelection(
                                                stream.id
                                              )
                                            },
                                            function($event) {
                                              if (
                                                $event.ctrlKey ||
                                                $event.shiftKey ||
                                                $event.altKey ||
                                                $event.metaKey
                                              ) {
                                                return null
                                              }
                                              return _vm.selectStreamSelection(
                                                stream.id
                                              )
                                            }
                                          ],
                                          dblclick: _vm.streamDoubleClick
                                        }
                                      },
                                      [
                                        _c("i", {
                                          staticClass:
                                            "las la-braille handle mr-2"
                                        }),
                                        _c("span", { staticClass: "mr-2" }, [
                                          _vm._v(
                                            _vm._s(
                                              stream.serie_name &&
                                                stream.serie_name.length
                                                ? stream.serie_name
                                                : stream.stream_tvg_name
                                            )
                                          )
                                        ]),
                                        _c(
                                          "span",
                                          { staticClass: "text-muted mr-1" },
                                          [
                                            _vm._v(
                                              _vm._s(
                                                _vm
                                                  .$t("editor.season")
                                                  .format(stream.serie_season)
                                              )
                                            )
                                          ]
                                        ),
                                        _c(
                                          "span",
                                          { staticClass: "text-muted" },
                                          [
                                            _vm._v(
                                              _vm._s(
                                                _vm
                                                  .$t("editor.episode")
                                                  .format(stream.serie_episode)
                                              )
                                            )
                                          ]
                                        )
                                      ]
                                    )
                                  }),
                                  0
                                )
                              ],
                              1
                            )
                          ],
                          1
                        )
                      ]
                    : _vm._e()
                ],
                2
              )
            ],
            1
          )
        : _vm._e()
    ],
    1
  )
}
var staticRenderFns = []
render._withStripped = true

export { render, staticRenderFns }"}]}