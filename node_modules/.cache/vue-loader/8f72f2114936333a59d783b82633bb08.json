{"remainingRequest":"/media/ernst/63bce43c-5e51-4bf1-a611-3afdf32ac6f6/VueJS/IPTV-Tools/node_modules/vue-loader/lib/index.js??vue-loader-options!/media/ernst/63bce43c-5e51-4bf1-a611-3afdf32ac6f6/VueJS/IPTV-Tools/src/views/app/m3u/playlists.vue?vue&type=style&index=0&lang=scss&","dependencies":[{"path":"/media/ernst/63bce43c-5e51-4bf1-a611-3afdf32ac6f6/VueJS/IPTV-Tools/src/views/app/m3u/playlists.vue","mtime":1627751995245},{"path":"/media/ernst/63bce43c-5e51-4bf1-a611-3afdf32ac6f6/VueJS/IPTV-Tools/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/media/ernst/63bce43c-5e51-4bf1-a611-3afdf32ac6f6/VueJS/IPTV-Tools/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/media/ernst/63bce43c-5e51-4bf1-a611-3afdf32ac6f6/VueJS/IPTV-Tools/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/media/ernst/63bce43c-5e51-4bf1-a611-3afdf32ac6f6/VueJS/IPTV-Tools/node_modules/sass-loader/dist/cjs.js","mtime":499162500000},{"path":"/media/ernst/63bce43c-5e51-4bf1-a611-3afdf32ac6f6/VueJS/IPTV-Tools/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/media/ernst/63bce43c-5e51-4bf1-a611-3afdf32ac6f6/VueJS/IPTV-Tools/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoubW9kYWwtZ3JvdXBzIHsKICBtYXgtaGVpZ2h0OiAyNTBweDsKICBvdmVyZmxvdzogaGlkZGVuOwoKICAucHMgewogICAgbWF4LWhlaWdodDogMjUwcHg7CiAgfQp9Cgouc3luYy1ncm91cHMgewogIC5jaGVja2JveC10ZXh0IHsKICAgIG1hcmdpbi10b3A6IDJweDsKICB9Cn0KCi5lbXB0eS1ncm91cCB7CiAgdGV4dC1hbGlnbjogY2VudGVyOwogIGNvbG9yOiAkc2VwYXJhdG9yLWNvbG9yOwogIHBhZGRpbmctdG9wOiAxcmVtOwoKICBpIHsKICAgIGRpc3BsYXk6IGJsb2NrOwogIH0KICBwIHsKICAgIHBhZGRpbmc6IDA7CiAgICBkaXNwbGF5OiBibG9jazsKICB9Cn0KCi5iYWNrdXAtYnV0dG9uLAouZXhwb3J0LWJ1dHRvbiB7CiAgZGlzcGxheTogYmxvY2s7CiAgbWluLXdpZHRoOiAyNTBweDsKfQo="},{"version":3,"sources":["playlists.vue"],"names":[],"mappingsszCA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA","file":"playlists.vue","sourceRoot":"src/views/app/m3u","sourcesContent":["<template>\n  <erd-row class=\"m-0 p-0\" id=\"playlists\">\n    <!--  \n\n      Playlist Info\n\n    -->\n    <erd-modal\n      v-show=\"playlistInfo.modal\"\n      @close=\"playlistInfoModal(false)\"\n      :title=\"$t('m3u.playlist-info')\"\n      class=\"select-none\"\n      small\n    >\n      <div class=\"px-2\">\n        <p class=\"mt-0\">{{ $t(\"m3u.playlist-info-text\") }}</p>\n        <label class=\"w-100\">{{ $t(\"m3u.playlist-url\") }}</label>\n        <erd-input\n          class=\"mt-1 mb-2 w-100\"\n          :value=\"`${iptvToolsHost}/get.php?username=${playlistInfo.username}&password=${playlistInfo.password}&type=m3u_plus`\"\n          readonly\n        ></erd-input>\n        <label class=\"w-100\"><span v-html=\"$t('m3u.playlist-live-url')\"></span></label>\n        <erd-input\n          class=\"mt-1 mb-2 w-100\"\n          :value=\"`${iptvToolsHost}/get.php?username=${playlistInfo.username}&password=${playlistInfo.password}&type=m3u_plus&streams=live`\"\n          readonly\n        ></erd-input>\n        <label class=\"w-100\"><span v-html=\"$t('m3u.playlist-movies-url')\"></span></label>\n        <erd-input\n          class=\"mt-1 mb-2 w-100\"\n          :value=\"`${iptvToolsHost}/get.php?username=${playlistInfo.username}&password=${playlistInfo.password}&type=m3u_plus&streams=movies`\"\n          readonly\n        ></erd-input>\n        <label class=\"w-100\"><span v-html=\"$t('m3u.playlist-series-url')\"></span></label>\n        <erd-input\n          class=\"mt-1 mb-2 w-100\"\n          :value=\"`${iptvToolsHost}/get.php?username=${playlistInfo.username}&password=${playlistInfo.password}&type=m3u_plus&streams=series`\"\n          readonly\n        ></erd-input>\n        <label class=\"w-100\"><span v-html=\"$t('m3u.xmltv-url')\"></span></label>\n        <erd-input\n          class=\"mt-1 mb-2 w-100\"\n          :value=\"`${iptvToolsHost}/xmltv.php?username=${playlistInfo.username}&password=${playlistInfo.password}`\"\n          readonly\n        ></erd-input>\n      </div>\n      <template v-slot:footer>\n        <erd-button\n          @click=\"playlistInfoModal(false)\"\n          icon=\"la-times\"\n          class=\"mr-1\"\n          variant=\"primary\"\n          >{{ $t(\"general.close\") }}</erd-button\n        >\n      </template>\n    </erd-modal>\n    <erd-spinner v-if=\"isLoading\" size=\"lg\" overlay absolute></erd-spinner>\n    <erd-col xl=\"12\" sm=\"12\" v-if=\"!editor\">\n      <b-table :items=\"paged\" :fields=\"fields\" striped small>\n        <template v-slot:cell(created_at)=\"row\">\n          {{ formatDate(row.item.created_at) }}\n        </template>\n        <template v-slot:cell(last_updated)=\"row\">\n          {{ formatDate(row.item.last_updated) }}\n        </template>\n        <template v-slot:cell(synced_at)=\"row\">\n          {{\n            row.item.synced_at && row.item.synced_at !== \"0000-00-00 00:00:00\"\n              ? formatDate(row.item.synced_at)\n              : $t(\"general.not-available\")\n          }}\n        </template>\n        <template v-slot:cell(source_exp_date)=\"row\">\n          {{ formatDate(row.item.source_exp_date * 1000) }}\n        </template>\n        <template v-slot:cell(sync_interval)=\"row\">\n          {{ $t(`sync-interval.${row.item.sync_interval}`) }}\n        </template>\n        <template v-slot:cell(actions)=\"row\">\n          <erd-tooltip :tooltip=\"$t('m3u.tooltip-playlist-info')\" :enabled=\"showTooltips\">\n            <erd-button\n              variant=\"info\"\n              class=\"btn-table\"\n              @click=\"playlistInfoModal(true, row.item)\"\n              ><i class=\"las la-info\"></i\n            ></erd-button>\n          </erd-tooltip>\n          <erd-tooltip :tooltip=\"$t('xtream.tooltip-sync-playlist')\" :enabled=\"showTooltips\">\n            <erd-button\n              variant=\"info\"\n              class=\"btn-table\"\n              :disabled=\"syncPlaylist\"\n              @click=\"synchronizePlaylist(row.item.id)\"\n              ><i class=\"las la-sync\"></i\n            ></erd-button>\n          </erd-tooltip>\n          <erd-tooltip :tooltip=\"$t('xtream.tooltip-sync-tmdb')\" :enabled=\"showTooltips\">\n            <erd-button\n              variant=\"info\"\n              class=\"btn-table\"\n              :disabled=\"syncTMDB\"\n              @click=\"synchronizeTMDB(row.item.id)\"\n              ><i class=\"lab la-imdb\"></i\n            ></erd-button>\n          </erd-tooltip>\n          <erd-tooltip :tooltip=\"$t('xtream.tooltip-edit-playlist')\" :enabled=\"showTooltips\">\n            <erd-button\n              variant=\"info\"\n              class=\"btn-table\"\n              @click=\"editPlaylist(row.item)\"\n              ><i class=\"las la-pen\"></i\n            ></erd-button>\n          </erd-tooltip>\n          <erd-tooltip :tooltip=\"$t('xtream.tooltip-delete-playlist')\" :enabled=\"showTooltips\">\n            <erd-button\n              variant=\"danger\"\n              class=\"btn-table\"\n              @click=\"deletePlaylist(row.item.id)\"\n              ><i class=\"las la-trash\"></i\n            ></erd-button>\n          </erd-tooltip>\n        </template>\n      </b-table>\n      <b-pagination\n        class=\"w-100 my-3\"\n        size=\"sm\"\n        align=\"center\"\n        :total-rows=\"total\"\n        :per-page=\"perPage\"\n        v-model=\"currentPage\"\n      >\n        <template v-slot:next-text>\n          <i class=\"las la-angle-right\" />\n        </template>\n        <template v-slot:prev-text>\n          <i class=\"las la-angle-left\" />\n        </template>\n        <template v-slot:first-text>\n          <i class=\"las la-angle-double-left\" />\n        </template>\n        <template v-slot:last-text>\n          <i class=\"las la-angle-double-right\" />\n        </template>\n      </b-pagination>\n    </erd-col>\n    <!-- SOURCE -->\n    <erd-col xl=\"12\" sm=\"12\" v-if=\"editor && activeTab === 0\">\n      <label class=\"d-block\" for=\"source-title\">{{ $t(\"xtream.title\") }}</label>\n      <erd-input\n        id=\"source-title\"\n        class=\"mt-1 mb-2 w-100\"\n        v-model=\"playlist.name\"\n      ></erd-input>\n      <div v-if=\"playlist.url !== undefined\">\n        <label class=\"d-block\" for=\"source-url\">{{ $t(\"xtream.url\") }}</label>\n        <erd-input\n          id=\"source-url\"\n          class=\"mt-1 mb-2 w-100\"\n          :placeholder=\"$t('xtream.url-placeholder')\"\n          v-model=\"playlist.url\"\n        ></erd-input>\n      </div>\n      <label class=\"d-block\" for=\"source-host\">{{ $t(\"xtream.host\") }}</label>\n      <erd-input\n        id=\"source-host\"\n        class=\"mt-1 mb-2 w-100\"\n        v-model=\"playlist.source_host\"\n      ></erd-input>\n      <label class=\"d-block\" for=\"source-port\">{{ $t(\"xtream.port\") }}</label>\n      <erd-input\n        id=\"source-port\"\n        class=\"mt-1 mb-2 w-100\"\n        v-model=\"playlist.source_port\"\n      ></erd-input>\n      <label class=\"d-block\" for=\"source-username\">{{\n        $t(\"xtream.username\")\n      }}</label>\n      <erd-input\n        id=\"source-username\"\n        class=\"mt-1 mb-2 w-100\"\n        v-model=\"playlist.source_username\"\n      ></erd-input>\n      <label class=\"d-block\" for=\"source-password\">{{\n        $t(\"xtream.password\")\n      }}</label>\n      <erd-input\n        id=\"source-password\"\n        class=\"mt-1 mb-2 w-100\"\n        v-model=\"playlist.source_password\"\n      ></erd-input>\n      <label class=\"d-block\" for=\"source-expiry\">{{\n        $t(\"xtream.expire\")\n      }}</label>\n      <erd-input\n        id=\"source-expiry\"\n        class=\"mt-1 mb-2 w-100\"\n        :value=\"formatDate(playlist.source_exp_date * 1000)\"\n        disabled\n      ></erd-input>\n      <label class=\"d-block\" for=\"max-connections\">{{\n        $t(\"xtream.max-connections\")\n      }}</label>\n      <erd-input\n        id=\"source-max-connections\"\n        class=\"mt-1 mb-2 w-100\"\n        :value=\"formatMaxConnections(playlist.source_max_connections)\"\n        disabled\n      ></erd-input>\n    </erd-col>\n    <!-- M3U -->\n    <erd-col xl=\"12\" sm=\"12\" v-if=\"editor && activeTab === 1\">\n      <erd-tooltip :tooltip=\"$t('m3u.tooltip-m3u-enabled')\" :enabled=\"showTooltips\">\n        <erd-checkbox\n          class=\"mb-2 w-100\"\n          v-model=\"playlist.enabled\"\n          :true-value=\"1\"\n          :false-value=\"0\"\n          >{{ $t(\"xtream.enabled\") }}</erd-checkbox\n        >\n      </erd-tooltip>\n      <label class=\"d-block\" for=\"api-username\">{{\n        $t(\"xtream.username\")\n      }}</label>\n      <erd-input\n        id=\"api-username\"\n        class=\"mt-1 mb-2 w-100\"\n        v-model=\"playlist.api_username\"\n        :disabled=\"!canUseCustomUserPass\"\n      ></erd-input>\n      <label class=\"d-block\" for=\"api-password\">{{\n        $t(\"xtream.password\")\n      }}</label>\n      <erd-input\n        id=\"api-password\"\n        class=\"mt-1 mb-2 w-100\"\n        v-model=\"playlist.api_password\"\n        :disabled=\"!canUseCustomUserPass\"\n      ></erd-input>\n      <erd-button\n        icon=\"la-random\"\n        variant=\"info\"\n        class=\"mb-3\"\n        v-if=\"!canUseCustomUserPass\"\n        @click=\"randomPassword\"\n        >{{ $t(\"xtream.generate-password\") }}</erd-button\n      >\n      <erd-button\n        icon=\"la-search\"\n        variant=\"info\"\n        class=\"mb-3\"\n        v-if=\"canUseCustomUserPass\"\n        @click=\"checkAvailability\"\n        >{{ $t(\"xtream.check-availability\") }}</erd-button\n      >\n      <label class=\"d-block\" for=\"epg-timeshift\">{{\n        $t(\"xtream.epg-timeshift\")\n      }}</label>\n      <erd-input\n        id=\"epg-timeshift\"\n        class=\"mt-1 mb-2 w-100\"\n        v-model=\"playlist.epg_offset\"\n        type=\"number\"\n      ></erd-input>\n    </erd-col>\n    <!-- SYNC -->\n    <erd-col xl=\"12\" sm=\"12\" v-if=\"editor && activeTab === 2\">\n      <erd-tooltip :tooltip=\"$t('m3u.tooltip-sync-enabled')\" :enabled=\"showTooltips\">\n        <erd-checkbox\n          class=\"mb-2 w-100\"\n          v-model=\"playlist.sync_enabled\"\n          :true-value=\"1\"\n          :false-value=\"0\"\n          >{{ $t(\"xtream.enabled\") }}</erd-checkbox\n        >\n      </erd-tooltip>\n      <label class=\"d-block\" for=\"sync-interval\">{{\n        $t(\"xtream.sync-interval\")\n      }}</label>\n      <erd-select\n        id=\"sync-interval\"\n        ref=\"sync-interval\"\n        key=\"sync-interval\"\n        class=\"mt-1 mb-2 w-100\"\n        v-model=\"playlist.sync_interval\"\n        :items=\"syncIntervals\"\n        :disabled=\"!playlist.sync_enabled\"\n      ></erd-select>\n      <label class=\"d-block\" for=\"sync-tmdb-language\">{{\n        $t(\"xtream.tmdb-language\")\n      }}</label>\n      <erd-select\n        id=\"sync-tmdb-language\"\n        ref=\"sync-tmdb-language\"\n        key=\"sync-tmdb-language\"\n        class=\"mt-1 mb-2 w-100\"\n        v-model=\"playlist.tmdb_language\"\n        :items=\"tmdbLanguages\"\n        :disabled=\"!playlist.sync_enabled || !canUseMoviesSeries\"\n      ></erd-select>\n      <erd-row class=\"m-0 p-0\">\n        <erd-col xl=\"4\" md=\"4\" sm=\"12\" class=\"pl-0\">\n          <erd-context-menu\n            :items=\"contextLive\"\n            depth=\"1\"\n            ref=\"context-live\"\n          ></erd-context-menu>\n          <label class=\"mt-0\">{{ $t(\"dashboard.live-streams\") }}</label>\n          <div\n            class=\"form-control sync-groups\"\n            @contextmenu.prevent=\"openContext('context-live')\"\n          >\n            <erd-checkbox\n              v-for=\"(group, index) in playlistGroups.live\"\n              :key=\"`group-1-${index}-${group.category_id}`\"\n              :value=\"group.category_id\"\n              v-model=\"playlist.sync_live\"\n              >{{ group.category_name }}</erd-checkbox\n            >\n            <div class=\"empty-group\" v-if=\"playlistGroups.live.length === 0\">\n              <i class=\"las la-folder-open la-3x\"></i>\n              <p class=\"mt-1\">{{ $t(\"general.not-available\") }}</p>\n            </div>\n          </div>\n        </erd-col>\n        <erd-col xl=\"4\" md=\"4\" sm=\"12\" class=\"p-0\">\n          <erd-context-menu\n            :items=\"contextMovies\"\n            depth=\"1\"\n            ref=\"context-movies\"\n          ></erd-context-menu>\n          <label class=\"mt-0\">{{ $t(\"dashboard.movies\") }}</label>\n          <div\n            class=\"form-control sync-groups\"\n            @contextmenu.prevent=\"openContext('context-movies')\"\n          >\n            <erd-checkbox\n              v-for=\"(group, index) in playlistGroups.movies\"\n              :key=\"`group-2-${index}-${group.category_id}`\"\n              :value=\"group.category_id\"\n              v-model=\"playlist.sync_movies\"\n              :disabled=\"!canUseMoviesSeries\"\n              >{{ group.category_name }}</erd-checkbox\n            >\n            <div class=\"empty-group\" v-if=\"playlistGroups.movies.length === 0\">\n              <i class=\"las la-folder-open la-3x\"></i>\n              <p class=\"mt-1\">{{ $t(\"general.not-available\") }}</p>\n            </div>\n          </div>\n        </erd-col>\n        <erd-col xl=\"4\" md=\"4\" sm=\"12\" class=\"pr-0\">\n          <erd-context-menu\n            :items=\"contextSeries\"\n            depth=\"1\"\n            ref=\"context-series\"\n          ></erd-context-menu>\n          <label class=\"mt-0\">{{ $t(\"dashboard.series\") }}</label>\n          <div\n            class=\"form-control sync-groups\"\n            @contextmenu.prevent=\"openContext('context-series')\"\n          >\n            <erd-checkbox\n              v-for=\"(group, index) in playlistGroups.series\"\n              :key=\"`group-3-${index}-${group.category_id}`\"\n              :value=\"group.category_id\"\n              v-model=\"playlist.sync_series\"\n              :disabled=\"!canUseMoviesSeries\"\n              >{{ group.category_name }}</erd-checkbox\n            >\n            <div class=\"empty-group\" v-if=\"playlistGroups.series.length === 0\">\n              <i class=\"las la-folder-open la-3x\"></i>\n              <p class=\"mt-1\">{{ $t(\"general.not-available\") }}</p>\n            </div>\n          </div>\n        </erd-col>\n      </erd-row>\n    </erd-col>\n    <!-- SECURITY -->\n    <erd-col xl=\"12\" sm=\"12\" v-if=\"editor && activeTab === 3\">\n      <erd-tooltip :tooltip=\"$t('m3u.tooltip-security-enabled')\" :enabled=\"showTooltips\">\n        <erd-checkbox\n          :true-value=\"1\"\n          :false-value=\"0\"\n          class=\"mb-2\"\n          v-model=\"playlist.ip_protection\"\n          >{{ $t(\"xtream.ip-security\") }}</erd-checkbox\n        >\n      </erd-tooltip>\n      <label class=\"d-block\" for=\"allowed-ips\">{{\n        $t(\"xtream.allow-only-ips\")\n      }}</label>\n      <erd-textarea\n        class=\"w-100 mb-1\"\n        id=\"allowed-ips\"\n        rows=\"3\"\n        v-model=\"allowedIps\"\n        :disabled=\"!playlist.ip_protection\"\n      ></erd-textarea>\n      <erd-button\n        variant=\"info\"\n        icon=\"la-server\"\n        :disabled=\"!playlist.ip_protection\"\n        @click=\"getIPAddress\"\n        >{{ $t(\"xtream.get-ip\") }}</erd-button\n      >\n    </erd-col>\n    <!-- BACK-UP -->\n    <erd-col xl=\"12\" sm=\"12\" v-if=\"editor && activeTab === 4\">\n      <p class=\"mt-0 mb-2\">{{ $t(\"backup.streams\") }}</p>\n      <!-- LIVE STREAMS BACKUP -->\n      <erd-button\n        icon=\"la-file-export\"\n        variant=\"primary\"\n        class=\"backup-button mb-1\"\n        :disabled=\"playlistIsEmpty\"\n        @click=\"backupPlaylist('live')\"\n        >{{ $t(\"backup.back-up-live\") }}</erd-button\n      >\n      <erd-button\n        icon=\"la-file-export\"\n        variant=\"primary\"\n        class=\"backup-button mb-1\"\n        :disabled=\"playlistIsEmpty\"\n        @click=\"backupPlaylist('movies')\"\n        >{{ $t(\"backup.back-up-movies\") }}</erd-button\n      >\n      <erd-button\n        icon=\"la-file-export\"\n        variant=\"primary\"\n        class=\"backup-button mb-1\"\n        :disabled=\"playlistIsEmpty\"\n        @click=\"backupPlaylist('series')\"\n        >{{ $t(\"backup.back-up-series\") }}</erd-button\n      >\n      <!-- PLAYLIST BACKUP -->\n      <p class=\"mt-3 mb-2\">{{ $t(\"backup.playlist\") }}</p>\n      <erd-button\n        icon=\"la-file-export\"\n        variant=\"primary\"\n        class=\"backup-button mb-1\"\n        :disabled=\"playlistIsEmpty\"\n        @click=\"backupPlaylist('playlist')\"\n        >{{ $t(\"backup.back-up-playlist\") }}</erd-button\n      >\n      <erd-button\n        icon=\"la-file-import\"\n        variant=\"info\"\n        class=\"backup-button\"\n        :disabled=\"playlistIsEmpty\"\n        @click=\"$refs['restore-playlist'].click()\"\n        >{{ $t(\"backup.restore-playlist\") }}</erd-button\n      >\n      <input\n        type=\"file\"\n        ref=\"restore-playlist\"\n        style=\"display: none\"\n        accept=\".zip\"\n        @change=\"restorePlaylist\"\n      />\n      <p class=\"mt-3 mb-2\">{{ $t(\"backup.tv-guide\") }}</p>\n      <!-- EPG CODES BACKUP -->\n      <erd-button\n        icon=\"la-file-export\"\n        variant=\"primary\"\n        class=\"backup-button mb-1\"\n        :disabled=\"playlistIsEmpty\"\n        @click=\"backupEPGCodes\"\n        >{{ $t(\"backup.back-up-epg-channel-ids\") }}</erd-button\n      >\n      <erd-button\n        icon=\"la-file-import\"\n        variant=\"info\"\n        class=\"backup-button\"\n        :disabled=\"playlistIsEmpty\"\n        @click=\"$refs['restore-epg-codes'].click()\"\n        >{{ $t(\"backup.restore-epg-channel-ids\") }}</erd-button\n      >\n      <input\n        type=\"file\"\n        ref=\"restore-epg-codes\"\n        style=\"display: none\"\n        accept=\".zip\"\n        @change=\"restoreEPGCodes\"\n      />\n    </erd-col>\n    <!-- EXPORT -->\n    <erd-col xl=\"12\" sm=\"12\" v-if=\"editor && activeTab === 5\">\n      <p class=\"mt-0 mb-2\">{{ $t(\"export.playlist\") }}</p>\n      <erd-button\n        icon=\"la-file-export\"\n        variant=\"primary\"\n        class=\"export-button mb-1\"\n        :disabled=\"playlistIsEmpty\"\n        @click=\"exportM3U\"\n        >{{ $t(\"export.m3u\") }}</erd-button\n      >\n      <erd-button\n        icon=\"la-file-export\"\n        variant=\"primary\"\n        class=\"export-button mb-1\"\n        :disabled=\"playlistIsEmpty\"\n        @click=\"exportSIPTV\"\n        >{{ $t(\"export.siptv\") }}</erd-button\n      >\n      <erd-button\n        icon=\"la-file-export\"\n        variant=\"primary\"\n        class=\"export-button\"\n        :disabled=\"playlistIsEmpty\"\n        @click=\"exportBouquet\"\n        >{{ $t(\"export.bouquet\") }}</erd-button\n      >\n      <p class=\"mt-3 mb-2\">{{ $t(\"export.other\") }}</p>\n      <erd-button\n        icon=\"la-file-csv\"\n        variant=\"info\"\n        class=\"export-button mb-1\"\n        :disabled=\"playlistIsEmpty\"\n        @click=\"exportCSV\"\n        >{{ $t(\"export.csv\") }}</erd-button\n      >\n      <!--<erd-button icon=\"la-file-code\" variant=\"info\" class=\"export-button mb-1\" :disabled=\"playlistIsEmpty\">{{ $t(\"export.html\") }}</erd-button>-->\n      <erd-button\n        icon=\"la-file-code\"\n        variant=\"info\"\n        class=\"export-button\"\n        :disabled=\"playlistIsEmpty\"\n        @click=\"exportJSON\"\n        >{{ $t(\"export.json\") }}</erd-button\n      >\n    </erd-col>\n  </erd-row>\n</template>\n\n<script>\n/* eslint-disable vue/no-side-effects-in-computed-properties */\nimport { EventBus } from \"../../../services/ebus\";\nimport { httpService } from \"../../../services/http\";\nimport { languages } from \"../../../helpers\";\nimport { UserRole, SubscriptionType } from \"../../../constants/config\";\nimport { mapGetters, mapActions } from \"vuex\";\n\nexport default {\n  data() {\n    return {\n      dateOptions: { day: \"2-digit\", month: \"numeric\", year: \"numeric\" },\n      languages,\n      activeTab: 0,\n      playlistGroups: {\n        live: [],\n        movies: [],\n        series: [],\n      },\n      playlistInfo: {\n        modal: false,\n        username: \"\",\n        password: \"\",\n      },\n      playlists: [],\n      playlist: null,\n      editor: false,\n      search: null,\n      isLoading: false,\n      from: 0,\n      to: 0,\n      total: 0,\n      currentPage: 1,\n      fields: [\n        { key: \"created_at\", label: this.$t(\"xtream.created\"), sortable: true },\n        {\n          key: \"last_updated\",\n          label: this.$t(\"xtream.last-updated\"),\n          sortable: true,\n        },\n        { key: \"name\", label: this.$t(\"xtream.name\"), sortable: true },\n        { key: \"groups\", label: this.$t(\"xtream.groups\"), sortable: true },\n        { key: \"streams\", label: this.$t(\"xtream.streams\"), sortable: true },\n        {\n          key: \"sync_interval\",\n          label: this.$t(\"xtream.sync-interval\"),\n          sortable: true,\n        },\n        {\n          key: \"synced_at\",\n          label: this.$t(\"xtream.synced-at\"),\n          sortable: true,\n        },\n        {\n          key: \"source_exp_date\",\n          label: this.$t(\"xtream.expire\"),\n          sortable: true,\n        },\n        {\n          key: \"source_max_connections\",\n          label: this.$t(\"xtream.max-connections\"),\n          sortable: true,\n        },\n        {\n          key: \"actions\",\n          label: this.$t(\"users.actions\"),\n          sortable: false,\n          thClass: \"text-right\",\n          tdClass: \"text-right\",\n        },\n      ],\n      syncIntervals: [\n        { text: this.$t(\"sync-interval.48\"), value: 48 },\n        { text: this.$t(\"sync-interval.24\"), value: 24 },\n        { text: this.$t(\"sync-interval.12\"), value: 12 },\n        { text: this.$t(\"sync-interval.6\"), value: 6 },\n        { text: this.$t(\"sync-interval.1\"), value: 1 },\n      ],\n      outputTypes: [\n        { text: this.$t(\"output.1\"), value: 1 },\n        { text: this.$t(\"output.2\"), value: 2 },\n      ],\n      iptvToolsHost: \"http://tv.iptv-tools.com\",\n      iptvToolsPort: 80,\n    };\n  },\n  computed: {\n    ...mapGetters([\"currentUser\", \"settings\", \"syncTMDB\", \"syncPlaylist\"]),\n    showTooltips () {\n      return this.settings.showTooltips;\n    },\n    epgOffset() {\n      let dt = new Date();\n      return Math.abs(dt.getTimezoneOffset() / 60);\n    },\n    perPage() {\n      return this.settings.perPage;\n    },\n    searchFiltered() {\n      if (this.search === null) {\n        return this.playlists;\n      } else {\n        var re = new RegExp(this.search, \"i\");\n        return this.playlists.filter((account) => {\n          return (\n            String(account.title).match(re) ||\n            String(account.host).match(re) ||\n            String(account.port).match(re) ||\n            String(account.username).match(re) ||\n            String(account.password).match(re) ||\n            this.formatDate(account.synced_at).match(re) ||\n            this.$t(`sync-interval.${account.sync_interval}`).match(re)\n          );\n        });\n      }\n    },\n    paged() {\n      this.total = this.searchFiltered.length;\n      this.from = (this.currentPage - 1) * this.perPage || 0;\n      this.to =\n        this.from + this.perPage > this.total\n          ? this.total\n          : this.from + this.perPage;\n      return this.searchFiltered.slice(this.from, this.to);\n    },\n    allowedIps: {\n      get: function () {\n        return this.playlist.ip_allowed\n          ? this.playlist.ip_allowed.join(\",\")\n          : \"\";\n      },\n      set: function (val) {\n        this.playlist.ip_allowed = val.split(\",\").map((ip) => {\n          return ip.trim();\n        });\n      },\n    },\n    contextLive() {\n      let vm = this;\n      let live = [...vm.playlistGroups.live];\n      return [\n        {\n          text: vm.$t(\"general.select-all\"),\n          onClick: function () {\n            vm.playlist.sync_live = [...live.map((g) => g.category_id)];\n          },\n        },\n        {\n          text: vm.$t(\"general.select-none\"),\n          onClick: function () {\n            vm.playlist.sync_live = [];\n          },\n        },\n      ];\n    },\n    contextMovies() {\n      let vm = this;\n      let movies = [...vm.playlistGroups.movies];\n      return [\n        {\n          text: vm.$t(\"general.select-all\"),\n          onClick: function () {\n            if (vm.canUseMoviesSeries) {\n              vm.playlist.sync_movies = [...movies.map((g) => g.category_id)];\n            }\n          },\n          disabled: !vm.canUseMoviesSeries,\n        },\n        {\n          text: vm.$t(\"general.select-none\"),\n          onClick: function () {\n            vm.playlist.sync_movies = [];\n          },\n          disabled: !vm.canUseMoviesSeries,\n        },\n      ];\n    },\n    contextSeries() {\n      let vm = this;\n      let series = [...vm.playlistGroups.series];\n      return [\n        {\n          text: vm.$t(\"general.select-all\"),\n          onClick: function () {\n            if (vm.canUseMoviesSeries) {\n              vm.playlist.sync_series = [...series.map((g) => g.category_id)];\n            }\n          },\n          disabled: !vm.canUseMoviesSeries,\n        },\n        {\n          text: vm.$t(\"general.select-none\"),\n          onClick: function () {\n            vm.playlist.sync_series = [];\n          },\n          disabled: !vm.canUseMoviesSeries,\n        },\n      ];\n    },\n    tmdbLanguages() {\n      return Object.keys(this.languages).map((language) => {\n        return {\n          value: language,\n          text: `${this.languages[language].name} (${this.languages[language].nativeName})`,\n        };\n      });\n    },\n    canUseCustomUserPass() {\n      return [UserRole.SuperAdmin, UserRole.Admin, UserRole.Moderator].includes(\n        this.currentUser.user.role\n      );\n    },\n    canUseMoviesSeries() {\n      return [\n        SubscriptionType.Professional,\n        SubscriptionType.Family,\n        SubscriptionType.BusinessSmall,\n        SubscriptionType.BusinessProfessional,\n        SubscriptionType.BusinessEnterprise,\n        SubscriptionType.Manager,\n      ].includes(this.currentUser.subscription.subscription_type);\n    },\n    playlistIsEmpty() {\n      return (\n        (this.playlist && this.playlist.groups == 0) ||\n        this.playlist.streams == 0\n      );\n    },\n    canAddPlaylist() {\n      if (this.currentUser.subscription) {\n        let subscription = this.currentUser.subscription;\n        if (subscription.end_date != null && new Date(subscription.end_date).getTime() < new Date().getTime()) {\n          return false;\n        }\n        if (parseInt(subscription.custom_plan) === 1) {\n          return this.playlists.length < subscription.max_playlist;\n        }\n        if (parseInt(subscription.enabled) !== 1) {\n          return false;\n        }\n        switch (subscription.subscription_type) {\n          case 0:\n          case 1:\n            return this.playlists.length < 2;\n          case 2:\n            return this.playlists.length < 5;\n          case 3:\n            return this.playlists.length < 5;\n          case 4:\n            return this.playlists.length < 10;\n          case 5:\n            return this.playlists.length < 25;\n        }\n      }\n      return false;\n    },\n  },\n  methods: {\n    ...mapActions([\"synchronizeTMDB\", \"synchronizePlaylist\"]),\n    openContext(context) {\n      this.$refs[context].open();\n    },\n    loadGroups() {\n      this.isLoading = true;\n      httpService\n        .post(\"playlist/load-groups\", {\n          host: this.playlist.source_host,\n          port: this.playlist.source_port,\n          username: this.playlist.source_username,\n          password: this.playlist.source_password,\n        })\n        .then((res) => {\n          this.isLoading = false;\n          if (res.status === true) {\n            if (Array.isArray(res.data.live) && Array.isArray(res.data.movies) && Array.isArray(res.data.series)) {\n              this.playlistGroups = res.data;\n            }\n          }\n        });\n    },\n    loadPlaylists() {\n      this.isLoading = true;\n      httpService\n        .get(\"playlist\")\n        .then((res) => {\n          this.isLoading = false;\n          if (res.status === true) {\n            this.playlists = res.data;\n          }\n        })\n        .catch(() => {\n          this.isLoading = false;\n          this.$notify(\n            \"error\",\n            this.$t(\"profile.failed\"),\n            this.$t(\"xtream.xtream-load-error\"),\n            \"la-user-shield\",\n            { duration: 5000, permanent: false }\n          );\n        });\n    },\n    addPlaylist() {\n      if (this.canAddPlaylist !== true) {\n        return;\n      }\n      httpService\n        .post(\"playlist/add\")\n        .then((res) => {\n          if (res.status === true && res.data !== false) {\n            this.playlist = {\n              id: res.data,\n              url: \"\",\n              enabled: 1,\n              source_host: \"\",\n              source_port: \"\",\n              source_username: \"\",\n              source_password: \"\",\n              source_exp_date: false,\n              source_max_connections: false,\n              sync_enabled: 1,\n              sync_interval: 48,\n              sync_live: [],\n              sync_movies: [],\n              sync_series: [],\n              ip_protection: 0,\n              ip_allowed: [],\n              api_username: this.currentUser.user.username,\n              api_password: \"\",\n              api_message: \"Welcome to IPTV-Tools.com\",\n              api_output_format: 1,\n              name: \"\",\n              tmdb_language: this.$i18n.locale,\n              epg_offset: this.epgOffset,\n            };\n            this.playlistGroups = {\n              live: [],\n              movies: [],\n              series: [],\n            };\n            this.randomPassword();\n            this.editor = true;\n          }\n        })\n        .catch(() => {\n          this.$notify(\n            \"error\",\n            this.$t(\"profile.failed\"),\n            this.$t(\"xtream.xtream-new-error\"),\n            \"la-user-shield\",\n            { duration: 5000, permanent: false }\n          );\n        });\n    },\n    editPlaylist(playlist) {\n      this.playlist = Object.assign({}, playlist);\n      this.playlistAuth();\n      this.editor = true;\n    },\n    playlistInfoModal(show, playlist) {\n      if (playlist) {\n        this.playlistInfo.username = playlist.api_username;\n        this.playlistInfo.password = playlist.api_password;\n      }\n      this.playlistInfo.modal = show;\n    },\n    cancelEditor() {\n      this.editor = false;\n    },\n    saveEditor() {\n      let playlist = this.playlist;\n      let playlistId = this.playlist.id;\n      delete playlist.id;\n      delete playlist.url;\n      delete playlist.groups;\n      delete playlist.streams;\n\n      playlist.last_updated = new Date();\n      httpService\n        .put(`playlist/${playlistId}`, playlist)\n        .then((res) => {\n          if (res.status === true && res.data === true) {\n            this.$notify(\n              \"primary\",\n              this.$t(\"profile.success\"),\n              this.$t(\"xtream.xtream-save-success\"),\n              \"la-user-shield\",\n              { duration: 5000, permanent: false }\n            );\n            this.editor = false;\n            this.loadPlaylists();\n          }\n        })\n        .catch(() => {\n          this.$notify(\n            \"error\",\n            this.$t(\"profile.failed\"),\n            this.$t(\"xtream.xtream-save-error\"),\n            \"la-user-shield\",\n            { duration: 5000, permanent: false }\n          );\n        });\n    },\n    deletePlaylist(id) {\n      httpService\n        .delete(`playlist/${id}`)\n        .then((res) => {\n          if (res.status === true) {\n            this.$notify(\n              \"primary\",\n              this.$t(\"profile.success\"),\n              this.$t(\"xtream.xtream-delete-success\"),\n              \"la-user-shield\",\n              { duration: 5000, permanent: false }\n            );\n            this.loadPlaylists();\n          }\n        })\n        .catch(() => {\n          this.$notify(\n            \"error\",\n            this.$t(\"profile.failed\"),\n            this.$t(\"xtream.xtream-delete-error\"),\n            \"la-user-shield\",\n            { duration: 5000, permanent: false }\n          );\n        });\n    },\n    searchAccount(search) {\n      if (search.length === 0) {\n        this.search = null;\n      } else {\n        this.search = search;\n      }\n    },\n    printAccounts() {\n      document.getElementById(\"playlists\").print();\n    },\n    formatDate(date) {\n      return date === false\n        ? \"\"\n        : date === null ||\n          date === \"0000-00-00 00:00:00\" ||\n          date === 0 ||\n          date === \"\"\n        ? this.$t(\"xtream.unlimited\")\n        : new Date(date).toLocaleString(\n            this.$t(\"date.locale\"),\n            this.dateOptions\n          );\n    },\n    formatMaxConnections(max) {\n      return max === false\n        ? \"\"\n        : max === null || max <= 0\n        ? this.$t(\"xtream.unlimited\")\n        : max;\n    },\n    doTabChange(tab) {\n      if (tab == 2) {\n        this.loadGroups();\n      }\n      this.activeTab = tab;\n    },\n    randomPassword() {\n      httpService\n        .post(\"playlist/random-password\", {\n          username: this.playlist.api_username,\n        })\n        .then((res) => {\n          if (res.status === true) {\n            this.playlist.api_password = res.data;\n          }\n        })\n        .catch((error) => {\n          console.log(error);\n        });\n    },\n    playlistAuth() {\n      this.isLoading = true;\n      httpService\n        .post(\"playlist/authenticate\", {\n          host: this.playlist.source_host,\n          port: this.playlist.source_port,\n          username: this.playlist.source_username,\n          password: this.playlist.source_password,\n        })\n        .then((res) => {\n          this.isLoading = false;\n          if (res.status === true && res.data.auth) {\n            this.playlist.source_exp_date = res.data.exp_date;\n            this.playlist.source_max_connections = res.data.max_connections;\n          }\n        })\n        .catch(() => {\n          this.isLoading = false;\n        });\n    },\n    getIPAddress() {\n      httpService\n        .get(\"playlist/ip-address\")\n        .then((res) => {\n          if (res.status === true) {\n            this.playlist.ip_allowed.push(res.data);\n          }\n        })\n        .catch((error) => {\n          console.log(error);\n        });\n    },\n    checkAvailability() {\n      httpService\n        .post(\"playlist/user-pass-exists\", {\n          username: this.playlist.api_username,\n          password: this.playlist.api_password,\n        })\n        .then((res) => {\n          if (res.status === true) {\n            if (res.data === true) {\n              this.$notify(\n                \"error\",\n                this.$t(\"xtream.not-available\"),\n                this.$t(\"xtream.user-pass-used\"),\n                \"la-exclamation-triangle\",\n                { duration: 5000, permanent: false }\n              );\n            } else {\n              this.$notify(\n                \"success\",\n                this.$t(\"xtream.available\"),\n                this.$t(\"xtream.user-pass-available\"),\n                \"la-check-circle\",\n                { duration: 5000, permanent: false }\n              );\n            }\n          }\n        })\n        .catch((error) => {\n          console.log(error);\n        });\n    },\n    exportM3U() {\n      this.isLoading = true;\n      httpService\n        .download(`playlist/export/m3u/${this.playlist.id}`)\n        .then((blob) => {\n          var url = window.URL.createObjectURL(blob);\n          var a = document.createElement(\"a\");\n          a.href = url;\n          a.download = \"export.m3u\";\n          document.body.appendChild(a);\n          a.click();\n          a.remove();\n          this.isLoading = false;\n        });\n    },\n    exportSIPTV() {\n      this.isLoading = true;\n      httpService\n        .download(`playlist/export/siptv/${this.playlist.id}`)\n        .then((blob) => {\n          var url = window.URL.createObjectURL(blob);\n          var a = document.createElement(\"a\");\n          a.href = url;\n          a.download = \"export.txt\";\n          document.body.appendChild(a);\n          a.click();\n          a.remove();\n          this.isLoading = false;\n        });\n    },\n    exportBouquet() {\n      this.isLoading = true;\n      httpService\n        .download(`playlist/export/bouquet/${this.playlist.id}`)\n        .then((blob) => {\n          var url = window.URL.createObjectURL(blob);\n          var a = document.createElement(\"a\");\n          a.href = url;\n          a.download = \"export.zip\";\n          document.body.appendChild(a);\n          a.click();\n          a.remove();\n          this.isLoading = false;\n        });\n    },\n    exportCSV() {\n      this.isLoading = true;\n      httpService\n        .download(`playlist/export/csv/${this.playlist.id}`)\n        .then((blob) => {\n          var url = window.URL.createObjectURL(blob);\n          var a = document.createElement(\"a\");\n          a.href = url;\n          a.download = \"export.zip\";\n          document.body.appendChild(a);\n          a.click();\n          a.remove();\n          this.isLoading = false;\n        });\n    },\n    exportJSON() {\n      this.isLoading = true;\n      httpService\n        .download(`playlist/export/json/${this.playlist.id}`)\n        .then((blob) => {\n          var url = window.URL.createObjectURL(blob);\n          var a = document.createElement(\"a\");\n          a.href = url;\n          a.download = \"export.zip\";\n          document.body.appendChild(a);\n          a.click();\n          a.remove();\n          this.isLoading = false;\n        });\n    },\n    backupPlaylist(path) {\n      this.isLoading = true;\n      httpService\n        .download(`playlist/back-up/${path}/${this.playlist.id}`)\n        .then((blob) => {\n          var url = window.URL.createObjectURL(blob);\n          var a = document.createElement(\"a\");\n          a.href = url;\n          a.download = \"backup.zip\";\n          document.body.appendChild(a);\n          a.click();\n          a.remove();\n          this.isLoading = false;\n        });\n    },\n    backupEPGCodes() {\n      this.isLoading = true;\n      httpService\n        .download(`playlist/back-up/epg-codes/${this.playlist.id}`)\n        .then((blob) => {\n          var url = window.URL.createObjectURL(blob);\n          var a = document.createElement(\"a\");\n          a.href = url;\n          a.download = \"backup.zip\";\n          document.body.appendChild(a);\n          a.click();\n          a.remove();\n          this.isLoading = false;\n        });\n    },\n    restoreEPGCodes(e) {\n      this.isLoading = true;\n      if (e && e.target.files.length == 1) {\n        var formData = new FormData();\n        formData.append(\"backup.zip\", e.target.files[0]);\n        httpService\n          .postFile(`playlist/restore/epg-codes/${this.playlist.id}`, formData)\n          .then((res) => {\n            this.isLoading = false;\n            if (res.status === true && res.data === true) {\n              this.$notify(\n                \"primary\",\n                this.$t(\"profile.success\"),\n                this.$t(\"xtream.restore-epgcodes-success\"),\n                \"la-user-shield\",\n                { duration: 5000, permanent: false }\n              );\n            } else {\n              this.$notify(\n                \"error\",\n                this.$t(\"profile.failed\"),\n                this.$t(\"xtream.restore-epgcodes-error\"),\n                \"la-user-shield\",\n                { duration: 5000, permanent: false }\n              );\n            }\n          })\n          .catch(() => {\n            this.isLoading = false;\n            this.$notify(\n              \"error\",\n              this.$t(\"profile.failed\"),\n              this.$t(\"xtream.restore-epgcodes-error\"),\n              \"la-user-shield\",\n              { duration: 5000, permanent: false }\n            );\n          });\n      }\n    },\n    restorePlaylist(e) {\n      this.isLoading = true;\n      if (e && e.target.files.length == 1) {\n        var formData = new FormData();\n        formData.append(\"backup.zip\", e.target.files[0]);\n        httpService\n          .postFile(`playlist/restore/playlist/${this.playlist.id}`, formData)\n          .then((res) => {\n            this.isLoading = false;\n            if (res.status === true && res.data === true) {\n              this.$notify(\n                \"primary\",\n                this.$t(\"profile.success\"),\n                this.$t(\"xtream.restore-playlist-success\"),\n                \"la-user-shield\",\n                { duration: 5000, permanent: false }\n              );\n            } else {\n              this.$notify(\n                \"error\",\n                this.$t(\"profile.failed\"),\n                this.$t(\"xtream.restore-playlist-error\"),\n                \"la-user-shield\",\n                { duration: 5000, permanent: false }\n              );\n            }\n          })\n          .catch(() => {\n            this.isLoading = false;\n            this.$notify(\n              \"error\",\n              this.$t(\"profile.failed\"),\n              this.$t(\"xtream.restore-playlist-error\"),\n              \"la-user-shield\",\n              { duration: 5000, permanent: false }\n            );\n          });\n      }\n    },\n  },\n  beforeMount() {\n    this.loadPlaylists();\n    EventBus.$emit(\"can-add-playlist\", this.canAddPlaylist);\n    EventBus.$on(\"search\", this.searchAccount);\n    EventBus.$on(\"print\", this.printAccounts);\n    EventBus.$on(\"refresh\", this.loadPlaylists);\n    EventBus.$on(\"add\", this.addPlaylist);\n    EventBus.$on(\"cancel\", this.cancelEditor);\n    EventBus.$on(\"save\", this.saveEditor);\n    EventBus.$on(\"tab-change\", this.doTabChange);\n  },\n  beforeDestroy() {\n    EventBus.$off(\"search\", this.searchAccount);\n    EventBus.$off(\"print\", this.printAccounts);\n    EventBus.$off(\"refresh\", this.loadPlaylists);\n    EventBus.$off(\"add\", this.addPlaylist);\n    EventBus.$off(\"cancel\", this.cancelEditor);\n    EventBus.$off(\"save\", this.saveEditor);\n    EventBus.$off(\"tab-change\", this.doTabChange);\n  },\n  watch: {\n    from: function (val) {\n      EventBus.$emit(\"update-from\", val);\n      document.body.scrollTop = 0;\n      document.documentElement.scrollTop = 0;\n    },\n    to: function (val) {\n      EventBus.$emit(\"update-to\", val);\n    },\n    total: function (val) {\n      EventBus.$emit(\"update-total\", val);\n    },\n    editor: function (val) {\n      EventBus.$emit(\"update-editor\", val);\n      if (!val) {\n        this.loadPlaylists();\n      }\n    },\n    canAddPlaylist: function (val) {\n      EventBus.$emit(\"can-add-playlist\", val);\n    },\n    \"playlist.source_host\": function () {\n      if (\n        this.playlist.source_host &&\n        this.playlist.source_host.length &&\n        this.playlist.source_username &&\n        this.playlist.source_username.length &&\n        this.playlist.source_password &&\n        this.playlist.source_password.length &&\n        this.editor\n      ) {\n        this.playlistAuth();\n        this.loadGroups();\n      }\n    },\n    \"playlist.url\": function (url) {\n      if (url !== undefined && url.length) {\n        try {\n          let u = new URL(url);\n          this.playlist.source_host = u.hostname;\n          this.playlist.source_port = u.port;\n          this.playlist.source_username = u.searchParams.get(\"username\");\n          this.playlist.source_password = u.searchParams.get(\"password\");\n          if (!this.playlist.name.length) {\n            this.playlist.name = u.hostname.toUpperCase();\n          }\n        } catch {\n          //\n        }\n      }\n    },\n  },\n};\n</script>\n\n<style lang=\"scss\">\n.modal-groups {\n  max-height: 250px;\n  overflow: hidden;\n\n  .ps {\n    max-height: 250px;\n  }\n}\n\n.sync-groups {\n  .checkbox-text {\n    margin-top: 2px;\n  }\n}\n\n.empty-group {\n  text-align: center;\n  color: $separator-color;\n  padding-top: 1rem;\n\n  i {\n    display: block;\n  }\n  p {\n    padding: 0;\n    display: block;\n  }\n}\n\n.backup-button,\n.export-button {\n  display: block;\n  min-width: 250px;\n}\n</style>\n"]}]}