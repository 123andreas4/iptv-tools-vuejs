{"remainingRequest":"/home/ernst/Desktop/IPTV-Tools/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/ernst/Desktop/IPTV-Tools/src/components/App/NavBar.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/home/ernst/Desktop/IPTV-Tools/src/components/App/NavBar.vue","mtime":1621065903885},{"path":"/home/ernst/Desktop/IPTV-Tools/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/ernst/Desktop/IPTV-Tools/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/ernst/Desktop/IPTV-Tools/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/ernst/Desktop/IPTV-Tools/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/ernst/Desktop/IPTV-Tools/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKbmF2IHsKfQo="},{"version":3,"sources":["NavBar.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyVA;AACA","file":"NavBar.vue","sourceRoot":"src/components/App","sourcesContent":["<template>\n  <nav\n    class=\"navbar d-print-none\"\n    @mouseenter=\"isMenuOver = true\"\n    @mouseleave=\"isMenuOver = false\"\n  >\n    <div class=\"navbar-side\">\n      <a\n        href=\"#\"\n        class=\"menu-button d-none d-md-inline-block\"\n        @click.prevent.stop=\"\n          changeSideMenuStatus({\n            step: menuClickCount + 1,\n            classNames: menuType,\n            selectedMenuHasSubItems,\n          })\n        \"\n      >\n        <i class=\"las la-bars\"></i>\n      </a>\n      <a\n        href=\"#\"\n        class=\"menu-button d-xs-block d-sm-inline-block d-md-none\"\n        @click.prevent.stop=\"changeSideMenuForMobile(menuType)\"\n      >\n        <i class=\"las la-bars\"></i>\n      </a>\n      <div class=\"search\" :class=\"{ 'mobile-view': searchMobile }\">\n        <input\n          type=\"text\"\n          :placeholder=\"$t('navbar.search')\"\n          v-model=\"search\"\n        />\n        <span class=\"search-icon\" @click.stop=\"doSearchMobile\">\n          <i class=\"las la-search\"></i>\n        </span>\n      </div>\n    </div>\n    <a href=\"/\" class=\"navbar-logo active\">\n      <span class=\"logo d-none d-xs-block\"></span>\n      <span class=\"logo-mobile d-block d-xs-none\"></span>\n    </a>\n    <div class=\"navbar-side right\">\n      <div class=\"account d-inline-block mr-3\" @click.stop=\"openUser\">\n        <p class=\"d-none d-lg-inline-block\" :class=\"{ active: userOpen }\">\n          {{ user.user.username }}\n        </p>\n        <i class=\"ml-1 icon las la-user\" :class=\"{ active: userOpen }\"></i>\n        <transition name=\"fade\">\n          <ul class=\"dropdown-menu account\" v-if=\"userOpen\" role=\"menu\">\n            <li\n              v-for=\"(item, index) in filteredUserMenu\"\n              :key=\"`account-user-menu-${index}`\"\n              @click.stop=\"closeUser\"\n            >\n              <router-link class=\"dropdown-item\" :to=\"item.to\"\n                ><i class=\"las\" :class=\"item.icon\"></i\n                >{{ item.text }}</router-link\n              >\n            </li>\n            <div class=\"hr px-4\"></div>\n            <li\n              v-for=\"(item, index) in filteredContactMenu\"\n              :key=\"`account-contact-menu-${index}`\"\n              @click.stop=\"closeUser\"\n            >\n              <router-link class=\"dropdown-item\" :to=\"item.to\"\n                ><i class=\"las\" :class=\"item.icon\"></i\n                >{{ item.text }}</router-link\n              >\n            </li>\n            <div class=\"hr px-4\"></div>\n            <li @click.stop=\"closeUser\">\n              <a class=\"dropdown-item\" href=\"#\" @click.prevent=\"logout\"\n                ><i class=\"las la-sign-out-alt\"></i\n                >{{ $t(\"navbar.log-out\") }}</a\n              >\n            </li>\n          </ul>\n        </transition>\n      </div>\n      <div class=\"print d-none d-md-inline-block mr-3\" @click=\"printPage\">\n        <i class=\"icon las la-print\"></i>\n      </div>\n      <div class=\"alerts d-inline-block\" @click.stop=\"openAlerts\">\n        <span class=\"count\" v-if=\"alerts.length > 0\">{{ alerts.length }}</span>\n        <i class=\"icon lar la-bell\" :class=\"{ active: alertsOpen }\"></i>\n        <transition name=\"fade\">\n          <ul class=\"dropdown-menu alerts\" v-if=\"alertsOpen\" role=\"menu\">\n            <perfect-scrollbar\n              class=\"scroll\"\n              :settings=\"{ suppressScrollX: true, wheelPropagation: true }\"\n            >\n              <div class=\"no-alerts\" v-if=\"alerts.length === 0\">\n                {{ $t(\"navbar.no-alerts\") }}\n              </div>\n              <div\n                class=\"alert\"\n                v-for=\"(alert, index) in alerts\"\n                :key=\"`alert-${index}`\"\n                :class=\"{ last: index === alerts.length - 1 }\"\n                @click.stop=\"closeAndDelete(index)\"\n              >\n                <div class=\"alert-icon\">\n                  <i class=\"las\" :class=\"alert.icon\"></i>\n                </div>\n                <router-link :to=\"alert.to\">\n                  <div>{{ alert.text }}</div>\n                  <p class=\"alert-date\">\n                    {{ formatDate(alert.date) }}\n                  </p>\n                </router-link>\n              </div>\n            </perfect-scrollbar>\n          </ul>\n        </transition>\n      </div>\n      <div\n        class=\"fullscreen d-none d-sm-inline-block ml-3\"\n        @click=\"toggleFullScreen\"\n      >\n        <i\n          class=\"icon\"\n          :class=\"{\n            'las la-expand-arrows-alt': !fullScreen,\n            'las la-compress-arrows-alt': fullScreen,\n          }\"\n        ></i>\n      </div>\n    </div>\n  </nav>\n</template>\n\n<script>\nimport { mapGetters, mapMutations, mapActions } from \"vuex\";\nimport { EventBus } from \"../../services/ebus\";\nimport { UserRole } from \"../../constants/config\";\n\nexport default {\n  data() {\n    return {\n      searchBounce: null,\n      search: \"\",\n      menuUp: false,\n      searchMobile: false,\n      isMenuOver: false,\n      fullScreen: false,\n      alertsOpen: false,\n      userOpen: false,\n      userMenu: [\n        {\n          text: this.$t(\"navbar.profile\"),\n          to: \"/app/user/profile\",\n          icon: \"la-user-cog\",\n        },\n        {\n          text: this.$t(\"navbar.subscription\"),\n          to: \"/app/user/subscription\",\n          icon: \"la-user-tag\",\n          roles: [UserRole.User, UserRole.Guest, UserRole.External],\n        },\n        {\n          text: this.$t(\"navbar.invoices\"),\n          to: \"/app/user/invoices\",\n          icon: \"la-receipt\",\n          roles: [UserRole.User, UserRole.Guest, UserRole.External],\n        },\n      ],\n      contactMenu: [\n        {\n          text: this.$t(\"navbar.faq\"),\n          to: \"/app/user/faq\",\n          icon: \"la-question-circle\",\n        },\n        {\n          text: this.$t(\"navbar.tickets\"),\n          to: \"/app/user/tickets\",\n          icon: \"la-headset\",\n          roles: [UserRole.User, UserRole.Guest, UserRole.External],\n        },\n      ],\n    };\n  },\n  computed: {\n    ...mapGetters({\n      alerts: \"alerts\",\n      user: \"currentUser\",\n      menuType: \"getMenuType\",\n      menuClickCount: \"getMenuClickCount\",\n      selectedMenuHasSubItems: \"getSelectedMenuHasSubItems\",\n      getMenuType: \"getMenuType\",\n    }),\n    filteredUserMenu() {\n      return this.userMenu\n        ? this.userMenu.filter(\n            (x) =>\n              !x.roles || (x.roles && x.roles.includes(this.user.user.role))\n          )\n        : [];\n    },\n    filteredContactMenu() {\n      return this.contactMenu\n        ? this.contactMenu.filter(\n            (x) =>\n              !x.roles || (x.roles && x.roles.includes(this.user.user.role))\n          )\n        : [];\n    },\n  },\n  methods: {\n    ...mapMutations([\"changeSideMenuStatus\", \"changeSideMenuForMobile\"]),\n    ...mapActions([\"logout\", \"deleteAlert\"]),\n    addEvents() {\n      document.addEventListener(\"click\", this.handleDocumentClick);\n      document.addEventListener(\"touchstart\", this.handleDocumentClick);\n    },\n    removeEvents() {\n      document.removeEventListener(\"click\", this.handleDocumentClick);\n      document.removeEventListener(\"touchstart\", this.handleDocumentClick);\n    },\n    handleDocumentClick() {\n      if (!this.isMenuOver) {\n        this.searchMobile = false;\n      }\n      if (this.alertsOpen) {\n        this.alertsOpen = false;\n        this.removeEvents();\n      }\n      if (this.userOpen) {\n        this.userOpen = false;\n        this.removeEvents();\n      }\n    },\n    doSearchMobile() {\n      this.searchMobile = true;\n      this.addEvents();\n    },\n    openAlerts() {\n      this.userOpen = false;\n      this.alertsOpen = true;\n      this.addEvents();\n    },\n    closeAlerts() {\n      this.alertsOpen = false;\n      this.removeEvents();\n    },\n    closeAndDelete(index) {\n      this.deleteAlert(index);\n      this.closeAlerts();\n    },\n    openUser() {\n      this.alertsOpen = false;\n      this.userOpen = true;\n      this.addEvents();\n    },\n    closeUser() {\n      this.userOpen = false;\n      this.removeEvents();\n    },\n    toggleFullScreen() {\n      const isInFullScreen = this.isInFullScreen();\n\n      var docElm = document.documentElement;\n      if (!isInFullScreen) {\n        if (docElm.requestFullscreen) {\n          docElm.requestFullscreen();\n        } else if (docElm.mozRequestFullScreen) {\n          docElm.mozRequestFullScreen();\n        } else if (docElm.webkitRequestFullScreen) {\n          docElm.webkitRequestFullScreen();\n        } else if (docElm.msRequestFullscreen) {\n          docElm.msRequestFullscreen();\n        }\n      } else {\n        if (document.exitFullscreen) {\n          document.exitFullscreen();\n        } else if (document.webkitExitFullscreen) {\n          document.webkitExitFullscreen();\n        } else if (document.mozCancelFullScreen) {\n          document.mozCancelFullScreen();\n        } else if (document.msExitFullscreen) {\n          document.msExitFullscreen();\n        }\n      }\n      this.fullScreen = !isInFullScreen;\n    },\n    isInFullScreen() {\n      return (\n        (document.fullscreenElement && document.fullscreenElement !== null) ||\n        (document.webkitFullscreenElement &&\n          document.webkitFullscreenElement !== null) ||\n        (document.mozFullScreenElement &&\n          document.mozFullScreenElement !== null) ||\n        (document.msFullscreenElement && document.msFullscreenElement !== null)\n      );\n    },\n    fullScreenWatcher() {\n      if (document.fullscreenElement) {\n        if (this.fullScreen !== true) {\n          this.fullScreen = false;\n        }\n      } else {\n        if (this.fullScreen) {\n          this.fullScreen = false;\n        }\n      }\n    },\n    printPage() {\n      EventBus.$emit(\"print\");\n    },\n    debouncedSearch(val) {\n      EventBus.$emit(\"search\", val);\n    },\n    formatDate(date) {\n      return new Date(date).toLocaleString(\n        this.$t(\"date.locale\"),\n        this.dateOptions\n      );\n    },\n  },\n  watch: {\n    searchMobile: function (val) {\n      if (!val) {\n        this.removeEvents();\n      }\n    },\n    search: function (val) {\n      let vm = this;\n      clearTimeout(this.searchBounce);\n      this.searchBounce = setTimeout(function () {\n        vm.debouncedSearch(val);\n      }, 500);\n    },\n  },\n  created() {\n    document.addEventListener(\"fullscreenchange\", this.fullScreenWatcher);\n  },\n  beforeDestroy() {\n    this.removeEvents();\n    document.removeEventListener(\"fullscreenchange\", this.fullScreenWatcher);\n  },\n};\n</script>\n\n<style>\nnav {\n}\n</style>\n"]}]}