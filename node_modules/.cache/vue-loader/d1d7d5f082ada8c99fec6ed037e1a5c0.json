{"remainingRequest":"/home/ernst/Desktop/IPTV-Tools/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/ernst/Desktop/IPTV-Tools/src/components/Form/ERDTagInput.vue?vue&type=style&index=0&lang=scss&","dependencies":[{"path":"/home/ernst/Desktop/IPTV-Tools/src/components/Form/ERDTagInput.vue","mtime":1619864404286},{"path":"/home/ernst/Desktop/IPTV-Tools/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/ernst/Desktop/IPTV-Tools/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/ernst/Desktop/IPTV-Tools/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/ernst/Desktop/IPTV-Tools/node_modules/sass-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/ernst/Desktop/IPTV-Tools/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/ernst/Desktop/IPTV-Tools/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLmVyZC10YWdzLWlucHV0IHsKICBvdmVyZmxvdzogaGlkZGVuOwogIHBhZGRpbmc6IDAuNHJlbSAwLjc1cmVtICFpbXBvcnRhbnQ7Cn0KCi5lcmQtdGFncy1pbnB1dC10YWcgewogIGRpc3BsYXk6IGlubGluZS1ibG9jazsKICBtYXJnaW4tcmlnaHQ6IDVweDsKfQoKLmVyZC10YWdzLWlucHV0LXJlbW92ZSB7CiAgY3Vyc29yOiBwb2ludGVyOwogIGZvbnQtd2VpZ2h0OiBib2xkOwp9CgouZXJkLXRhZ3MtaW5wdXQtdGFnIGE6OmJlZm9yZSB7CiAgY29udGVudDogIiDDlyI7Cn0KCi5lcmQtdGFncy1pbnB1dC1pbnB1dCB7CiAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7CiAgYm9yZGVyOiAwOwogIGZvbnQtc2l6ZTogMC44cmVtOwogIG1hcmdpbi10b3A6IDFweDsKICBvdXRsaW5lOiBub25lOwogIHdpZHRoOiA4MHB4Owp9Cg=="},{"version":3,"sources":["ERDTagInput.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuLA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"ERDTagInput.vue","sourceRoot":"src/components/Form","sourcesContent":["<template>\n  <div\n    @click=\"focusNewTag()\"\n    :class=\"{\n      'read-only': readOnly,\n      'erd-tags-input--focused': isInputActive,\n    }\"\n    class=\"form-control erd-tags-input\"\n  >\n    <span\n      v-for=\"(tag, index) in innerTags\"\n      :key=\"index\"\n      class=\"erd-tags-input-tag\"\n    >\n      <span>{{ tag }}</span>\n      <a\n        v-if=\"!readOnly\"\n        @click.prevent.stop=\"remove(index)\"\n        class=\"erd-tags-input-remove\"\n      ></a>\n    </span>\n    <input\n      v-if=\"!readOnly && !isLimit\"\n      ref=\"inputtag\"\n      :placeholder=\"placeholder\"\n      type=\"text\"\n      v-model=\"newTag\"\n      @keydown.delete.stop=\"removeLastTag\"\n      @keydown.enter=\"addNew\"\n      @blur=\"handleInputBlur\"\n      @focus=\"handleInputFocus\"\n      class=\"erd-tags-input-input\"\n    />\n  </div>\n</template>\n\n<script>\n/* eslint-disable */\nconst validators = {\n    email: new RegExp(\n        /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n    ),\n    url: new RegExp(\n        /^(https?|ftp|rmtp|mms):\\/\\/(([A-Z0-9][A-Z0-9_-]*)(\\.[A-Z0-9][A-Z0-9_-]*)+)(:(\\d+))?\\/?/i\n    ),\n    text: new RegExp(/^[a-zA-Z]+$/),\n    digits: new RegExp(/^[\\d() \\.\\:\\-\\+#]+$/),\n    isodate: new RegExp(\n        /^\\d{4}[\\/\\-](0?[1-9]|1[012])[\\/\\-](0?[1-9]|[12][0-9]|3[01])$/\n    )\n};\n/* eslint-enable */\nexport default {\n  props: {\n    value: {\n      type: Array,\n      default: () => [],\n    },\n    placeholder: {\n      type: String,\n      default: \"\",\n    },\n    readOnly: {\n      type: Boolean,\n      default: false,\n    },\n    validate: {\n      // eslint-disable-next-line vue/require-prop-type-constructor\n      type: String | Function | Object,\n      default: \"\",\n    },\n    addTagOnKeys: {\n      type: Array,\n      default: function () {\n        return [\n          13, // Return\n          188, // Comma ','\n          9, // Tab\n        ];\n      },\n    },\n    addTagOnBlur: {\n      type: Boolean,\n      default: false,\n    },\n    limit: {\n      type: Number,\n      default: -1,\n    },\n    allowDuplicates: {\n      type: Boolean,\n      default: false,\n    },\n  },\n  data() {\n    return {\n      newTag: \"\",\n      innerTags: [...this.value],\n      isInputActive: false,\n    };\n  },\n  computed: {\n    isLimit: function () {\n      return this.limit > 0 && Number(this.limit) === this.innerTags.length;\n    },\n  },\n  methods: {\n    focusNewTag() {\n      if (this.readOnly || !this.$el.querySelector(\".erd-tags-input-input\")) {\n        return;\n      }\n      this.$el.querySelector(\".erd-tags-input-input\").focus();\n    },\n    handleInputFocus() {\n      this.isInputActive = true;\n    },\n    handleInputBlur(e) {\n      this.isInputActive = false;\n      this.addNew(e);\n    },\n    addNew(e) {\n      const keyShouldAddTag = e\n        ? this.addTagOnKeys.indexOf(e.keyCode) !== -1\n        : true;\n      const typeIsNotBlur = e && e.type !== \"blur\";\n      if (\n        (!keyShouldAddTag && (typeIsNotBlur || !this.addTagOnBlur)) ||\n        this.isLimit\n      ) {\n        return;\n      }\n      if (\n        this.newTag &&\n        (this.allowDuplicates || this.innerTags.indexOf(this.newTag) === -1) &&\n        this.validateIfNeeded(this.newTag)\n      ) {\n        this.innerTags.push(this.newTag);\n        this.newTag = \"\";\n        this.tagChange();\n        e && e.preventDefault();\n      }\n    },\n    validateIfNeeded(tagValue) {\n      if (this.validate === \"\" || this.validate === undefined) {\n        return true;\n      }\n      if (typeof this.validate === \"function\") {\n        return this.validate(tagValue);\n      }\n      if (\n        typeof this.validate === \"string\" &&\n        Object.keys(validators).indexOf(this.validate) > -1\n      ) {\n        return validators[this.validate].test(tagValue);\n      }\n      if (\n        typeof this.validate === \"object\" &&\n        this.validate.test !== undefined\n      ) {\n        return this.validate.test(tagValue);\n      }\n      return true;\n    },\n    remove(index) {\n      this.innerTags.splice(index, 1);\n      this.tagChange();\n    },\n    removeLastTag() {\n      if (this.newTag) {\n        return;\n      }\n      this.innerTags.pop();\n      this.tagChange();\n    },\n    tagChange() {\n      this.$emit(\"update:tags\", this.innerTags);\n      this.$emit(\"input\", this.innerTags);\n    },\n  },\n};\n</script>\n\n<style lang=\"scss\">\n.erd-tags-input {\n  overflow: hidden;\n  padding: 0.4rem 0.75rem !important;\n}\n\n.erd-tags-input-tag {\n  display: inline-block;\n  margin-right: 5px;\n}\n\n.erd-tags-input-remove {\n  cursor: pointer;\n  font-weight: bold;\n}\n\n.erd-tags-input-tag a::before {\n  content: \" Ã—\";\n}\n\n.erd-tags-input-input {\n  background: transparent;\n  border: 0;\n  font-size: 0.8rem;\n  margin-top: 1px;\n  outline: none;\n  width: 80px;\n}\n</style>\n"]}]}