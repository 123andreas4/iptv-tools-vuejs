{"remainingRequest":"/media/ernst/63bce43c-5e51-4bf1-a611-3afdf32ac6f6/VueJS/IPTV-Tools/node_modules/vue-loader/lib/index.js??vue-loader-options!/media/ernst/63bce43c-5e51-4bf1-a611-3afdf32ac6f6/VueJS/IPTV-Tools/src/views/app/series/search.vue?vue&type=script&lang=js&","dependencies":[{"path":"/media/ernst/63bce43c-5e51-4bf1-a611-3afdf32ac6f6/VueJS/IPTV-Tools/src/views/app/series/search.vue","mtime":1624645016661},{"path":"/media/ernst/63bce43c-5e51-4bf1-a611-3afdf32ac6f6/VueJS/IPTV-Tools/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/media/ernst/63bce43c-5e51-4bf1-a611-3afdf32ac6f6/VueJS/IPTV-Tools/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/media/ernst/63bce43c-5e51-4bf1-a611-3afdf32ac6f6/VueJS/IPTV-Tools/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/media/ernst/63bce43c-5e51-4bf1-a611-3afdf32ac6f6/VueJS/IPTV-Tools/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/media/ernst/63bce43c-5e51-4bf1-a611-3afdf32ac6f6/VueJS/IPTV-Tools/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCi8qIGVzbGludC1kaXNhYmxlIHZ1ZS9uby1zaWRlLWVmZmVjdHMtaW4tY29tcHV0ZWQtcHJvcGVydGllcyAqLwppbXBvcnQgeyBFdmVudEJ1cyB9IGZyb20gIi4uLy4uLy4uL3NlcnZpY2VzL2VidXMiOwppbXBvcnQgeyBodHRwU2VydmljZSB9IGZyb20gIi4uLy4uLy4uL3NlcnZpY2VzL2h0dHAiOwppbXBvcnQgeyBtYXBHZXR0ZXJzLCBtYXBBY3Rpb25zIH0gZnJvbSAidnVleCI7CgpleHBvcnQgZGVmYXVsdCB7CiAgZGF0YSgpIHsKICAgIHJldHVybiB7CiAgICAgIHZpZXdlclNlcmllczogbnVsbCwKICAgICAgdmlld2VyQ3JlZGl0czogW10sCiAgICAgIHZpZXdlcktleXdvcmRzOiBbXSwKICAgICAgdmlld2VyU2ltaWxhcjogW10sCiAgICAgIHZpZXdlclZpZGVvczogW10sCiAgICAgIHZpZXdlckVwaXNvZGVzOiBbXSwKICAgICAgdmlld2VyU2Vhc29uczogW10sCiAgICAgIHZpZXdlckdyb3VwOiAiIiwKICAgICAgdmlld2VyUGxheWxpc3Q6ICIiLAogICAgICB2aWV3ZXI6IGZhbHNlLAogICAgICBzZWFyY2g6IG51bGwsCiAgICAgIGlzTG9hZGluZzogZmFsc2UsCiAgICAgIGxvYWRpbmdUZXh0OiAiIiwKICAgICAgc2VyaWVzOiBbXSwKICAgICAgZnJvbTogMCwKICAgICAgdG86IDAsCiAgICAgIHRvdGFsOiAwLAogICAgICBjdXJyZW50UGFnZTogMCwKICAgICAgeGRQcm86IHsKICAgICAgICBtb2RhbDogZmFsc2UsCiAgICAgICAgeGRwcm9faWQ6IDAsCiAgICAgICAgZG93bmxvYWRfZm9sZGVyOiAiIiwKICAgICAgICBkb3dubG9hZHM6IFtdLAogICAgICB9LAogICAgICBzZXJpZVNlYXJjaDogIiIsCiAgICAgIGJvdW5jZTogbnVsbCwKICAgIH07CiAgfSwKICBjb21wdXRlZDogewogICAgLi4ubWFwR2V0dGVycyhbInRtZGJHZW5yZXMiLCAidG1kYkZpbHRlcmVkR2VucmVzIiwgInNldHRpbmdzIiwgImN1cnJlbnRVc2VyIiwgIm1vdmllU2VyaWVQbGF5bGlzdCIsICJ4ZFByb0luc3RhbmNlcyJdKSwKICAgIGNhbkRvd25sb2FkKCkgewogICAgICByZXR1cm4gdGhpcy54ZFByb0luc3RhbmNlcyAmJiB0aGlzLnhkUHJvSW5zdGFuY2VzLmxlbmd0aCA+IDA7CiAgICB9LAogICAgdG1kYlNlcmllcygpIHsKICAgICAgcmV0dXJuIHRoaXMuc2VyaWVzLmZpbHRlcigoc2VyaWVzKSA9PiB7CiAgICAgICAgcmV0dXJuIHNlcmllcy50bWRiX2lkOwogICAgICB9KTsKICAgIH0sCiAgICBmaWx0ZXJlZFNlcmllcygpIHsKICAgICAgaWYgKHRoaXMuc2VhcmNoID09PSBudWxsKSB7CiAgICAgICAgcmV0dXJuIHRoaXMudG1kYlNlcmllczsKICAgICAgfSBlbHNlIHsKICAgICAgICB2YXIgcmUgPSBuZXcgUmVnRXhwKHRoaXMuc2VhcmNoLCAiaSIpOwogICAgICAgIHJldHVybiB0aGlzLnRtZGJTZXJpZXMuZmlsdGVyKChzZXJpZXMpID0+IHsKICAgICAgICAgIHJldHVybiAoCiAgICAgICAgICAgIFN0cmluZyhzZXJpZXMudG1kYi5uYW1lKS5tYXRjaChyZSkgfHwKICAgICAgICAgICAgU3RyaW5nKHNlcmllcy50bWRiLm9yaWdpbmFsX25hbWUpLm1hdGNoKHJlKSB8fAogICAgICAgICAgICBTdHJpbmcoc2VyaWVzLnRtZGJfaWQpLm1hdGNoKHJlKSB8fAogICAgICAgICAgICBTdHJpbmcoc2VyaWVzLnRtZGIub3ZlcnZpZXcpLm1hdGNoKHJlKSB8fAogICAgICAgICAgICB0aGlzLmZvcm1hdERhdGUoc2VyaWVzLnRtZGIucmVsZWFzZV9kYXRlKS5tYXRjaChyZSkKICAgICAgICAgICk7CiAgICAgICAgfSk7CiAgICAgIH0KICAgIH0sCiAgICBmaWx0ZXJlZENhc3QoKSB7CiAgICAgIHJldHVybiB0aGlzLnZpZXdlckNyZWRpdHMKICAgICAgICAuZmlsdGVyKChjYXN0KSA9PiB7CiAgICAgICAgICByZXR1cm4gY2FzdC5wcm9maWxlX3BhdGggJiYgY2FzdC5wcm9maWxlX3BhdGgubGVuZ3RoOwogICAgICAgIH0pCiAgICAgICAgLnNsaWNlKDAsIDgpOwogICAgfSwKICAgIGZpbHRlcmVkU2ltaWxhcigpIHsKICAgICAgcmV0dXJuIHRoaXMudmlld2VyU2ltaWxhci5zbGljZSgwLCA2KTsKICAgIH0sCiAgICBmaWx0ZXJlZFZpZGVvcygpIHsKICAgICAgcmV0dXJuIHRoaXMudmlld2VyVmlkZW9zLnNsaWNlKDAsIDIpOwogICAgfSwKICAgIHNlYXNvbnNJblNlcmllcygpIHsKICAgICAgbGV0IHNlYXNvbnMgPSAwOwogICAgICB0aGlzLnZpZXdlckVwaXNvZGVzLm1hcChlID0+IHsKICAgICAgICBpZiAoZS5zZXJpZV9zZWFzb24gPiBzZWFzb25zKSB7CiAgICAgICAgICBzZWFzb25zID0gZS5zZXJpZV9zZWFzb247CiAgICAgICAgfQogICAgICB9KQogICAgICByZXR1cm4gc2Vhc29uczsKICAgIH0sCiAgICBwZXJQYWdlKCkgewogICAgICByZXR1cm4gdGhpcy5zZXR0aW5ncy5wZXJQYWdlOwogICAgfSwKICAgIHBhZ2VkU2VyaWVzKCkgewogICAgICB0aGlzLnRvdGFsID0gdGhpcy5maWx0ZXJlZFNlcmllcy5sZW5ndGg7CiAgICAgIHRoaXMuZnJvbSA9ICh0aGlzLmN1cnJlbnRQYWdlIC0gMSkgKiB0aGlzLnBlclBhZ2UgfHwgMDsKICAgICAgdGhpcy50byA9CiAgICAgICAgdGhpcy5mcm9tICsgdGhpcy5wZXJQYWdlID4gdGhpcy50b3RhbAogICAgICAgICAgPyB0aGlzLnRvdGFsCiAgICAgICAgICA6IHRoaXMuZnJvbSArIHRoaXMucGVyUGFnZTsKICAgICAgcmV0dXJuIHRoaXMuZmlsdGVyZWRTZXJpZXMuc2xpY2UodGhpcy5mcm9tLCB0aGlzLnRvKTsKICAgIH0sCiAgICB4ZFByb0luc3RhbmNlSXRlbXMoKSB7CiAgICAgIHJldHVybiB0aGlzLnhkUHJvSW5zdGFuY2VzLm1hcChpbnN0YW5jZSA9PiB7CiAgICAgICAgcmV0dXJuIHsKICAgICAgICAgIHRleHQ6IGluc3RhbmNlLm5hbWUsCiAgICAgICAgICB2YWx1ZTogaW5zdGFuY2UuaWQsCiAgICAgICAgfQogICAgICB9KQogICAgfQogIH0sCiAgbWV0aG9kczogewogICAgLi4ubWFwQWN0aW9ucyhbInVwZGF0ZVRNREJHZW5yZXMiLCAiYWRkeGRQcm9Eb3dubG9hZCJdKSwKICAgIGNsb3NlVmlld2VyKCkgewogICAgICB0aGlzLnZpZXdlciA9IGZhbHNlOwogICAgfSwKICAgIHZpZXdEZXRhaWxzKHNlcmllcykgewogICAgICBkb2N1bWVudC5ib2R5LnNjcm9sbFRvcCA9IDA7CiAgICAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxUb3AgPSAwOwogICAgICB0aGlzLnZpZXdlckNyZWRpdHMgPSBbXTsKICAgICAgdGhpcy52aWV3ZXJLZXl3b3JkcyA9IFtdOwogICAgICB0aGlzLnZpZXdlclNpbWlsYXIgPSBbXTsKICAgICAgdGhpcy52aWV3ZXJWaWRlb3MgPSBbXTsKICAgICAgdGhpcy52aWV3ZXJFcGlzb2RlcyA9IFtdOwogICAgICB0aGlzLnZpZXdlclNlcmllcyA9IHNlcmllczsKICAgICAgdGhpcy52aWV3ZXJHcm91cCA9ICIiOwogICAgICB0aGlzLnZpZXdlclBsYXlsaXN0ID0gIiI7CiAgICAgIHRoaXMubG9hZFNlcmllc0RldGFpbHMoKTsKICAgICAgdGhpcy52aWV3ZXIgPSB0cnVlOwogICAgfSwKICAgIGFsbFByb2dyZXNzKHByb21zLCBwcm9ncmVzc19jYikgewogICAgICBsZXQgZCA9IDA7CiAgICAgIHByb2dyZXNzX2NiKDApOwogICAgICBmb3IgKGNvbnN0IHAgb2YgcHJvbXMpIHsKICAgICAgICBwLnRoZW4oKCk9PiB7ICAgIAogICAgICAgICAgZCArKzsKICAgICAgICAgIHByb2dyZXNzX2NiKCAoZCAqIDEwMCkgLyBwcm9tcy5sZW5ndGggKTsKICAgICAgICB9KTsKICAgICAgfQogICAgICByZXR1cm4gUHJvbWlzZS5hbGwocHJvbXMpOwogICAgfSwKICAgIGxvYWRTZXJpZXMoc2VhcmNoKSB7CiAgICAgIGlmICghdGhpcy5tb3ZpZVNlcmllUGxheWxpc3QpIHsKICAgICAgICByZXR1cm47CiAgICAgIH0KICAgICAgIGlmIChzZWFyY2ggPT0gbnVsbCB8fCAhc2VhcmNoLmxlbmd0aCkgewogICAgICAgIHRoaXMuc2VyaWVzID0gW107CiAgICAgICAgcmV0dXJuOwogICAgICB9CiAgICAgIHRoaXMuaXNMb2FkaW5nID0gdHJ1ZTsKICAgICAgdGhpcy5pc0xvYWRpbmcgPSB0cnVlOwogICAgICBodHRwU2VydmljZS5nZXQoYHNlcmllL3NlYXJjaC8ke3RoaXMubW92aWVTZXJpZVBsYXlsaXN0fS8ke2VuY29kZVVSSShzZWFyY2gpfWApCiAgICAgIC50aGVuKHJlcyA9PiB7CiAgICAgICAgaWYgKHJlcy5zdGF0dXMgPT09IHRydWUpIHsKICAgICAgICAgIGxldCBzZXJpZXMgPSBbLi4ucmVzLmRhdGFdOwogICAgICAgICAgc2VyaWVzLnNvcnQoKGEsIGIpID0+IHsKICAgICAgICAgICAgcmV0dXJuICgKICAgICAgICAgICAgICBuZXcgRGF0ZShiLnRtZGIuZmlyc3RfYWlyX2RhdGUpIC0gbmV3IERhdGUoYS50bWRiLmZpcnN0X2Fpcl9kYXRlKQogICAgICAgICAgICApOwogICAgICAgICAgfSk7CiAgICAgICAgICB0aGlzLnNlcmllcyA9IHNlcmllczsKICAgICAgICB9CiAgICAgICAgdGhpcy5pc0xvYWRpbmcgPSBmYWxzZTsKICAgICAgfSk7CiAgICB9LAogICAgbG9hZFNlcmllc0RldGFpbHMoKSB7CiAgICAgIHRoaXMuaXNMb2FkaW5nID0gdHJ1ZTsKICAgICAgdGhpcy5sb2FkaW5nVGV4dCA9ICIiOwogICAgICBodHRwU2VydmljZQogICAgICAgIC5nZXQoYHNlcmllL2RldGFpbHMvJHt0aGlzLm1vdmllU2VyaWVQbGF5bGlzdH0vJHt0aGlzLnZpZXdlclNlcmllcy50bWRiX2lkfWApCiAgICAgICAgLnRoZW4oKHJlcykgPT4gewogICAgICAgICAgdGhpcy5pc0xvYWRpbmcgPSBmYWxzZTsKICAgICAgICAgIGlmIChyZXMuc3RhdHVzID09PSB0cnVlKSB7CiAgICAgICAgICAgIHRoaXMudmlld2VyQ3JlZGl0cyA9IHJlcy5kYXRhLmNyZWRpdHMuY2FzdDsKICAgICAgICAgICAgdGhpcy52aWV3ZXJLZXl3b3JkcyA9IHJlcy5kYXRhLmtleXdvcmRzOwogICAgICAgICAgICB0aGlzLnZpZXdlclNpbWlsYXIgPSByZXMuZGF0YS5zaW1pbGFyOwogICAgICAgICAgICB0aGlzLnZpZXdlclZpZGVvcyA9IHJlcy5kYXRhLnZpZGVvczsKICAgICAgICAgICAgdGhpcy52aWV3ZXJHcm91cCA9IHJlcy5kYXRhLmdyb3VwOwogICAgICAgICAgICB0aGlzLnZpZXdlclBsYXlsaXN0ID0gcmVzLmRhdGEucGxheWxpc3Q7CiAgICAgICAgICAgIHRoaXMudmlld2VyRXBpc29kZXMgPSByZXMuZGF0YS5lcGlzb2RlczsKICAgICAgICAgIH0KICAgICAgICB9KQogICAgICAgIC5jYXRjaCgoKSA9PiB7CiAgICAgICAgICB0aGlzLmlzTG9hZGluZyA9IGZhbHNlOwogICAgICAgIH0pOwogICAgfSwKICAgIHBhZ2VQcmludCgpIHsKICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoInNlcmllcyIpLnByaW50KCk7CiAgICB9LAogICAgc2VhcmNoU2VyaWVzKHNlYXJjaCkgewogICAgICBpZiAoc2VhcmNoLmxlbmd0aCA9PT0gMCkgewogICAgICAgIHRoaXMuc2VhcmNoID0gbnVsbDsKICAgICAgfSBlbHNlIHsKICAgICAgICB0aGlzLnNlYXJjaCA9IHNlYXJjaDsKICAgICAgfQogICAgfSwKICAgIGZvcm1hdERhdGUoZGF0ZSkgewogICAgICByZXR1cm4gbmV3IERhdGUoZGF0ZSkudG9Mb2NhbGVEYXRlU3RyaW5nKHRoaXMuJHQoImRhdGUubG9jYWxlIiksIHsKICAgICAgICB5ZWFyOiAibnVtZXJpYyIsCiAgICAgICAgbW9udGg6ICJsb25nIiwKICAgICAgICBkYXk6ICJudW1lcmljIiwKICAgICAgfSk7CiAgICB9LAogICAgZm9ybWF0U2Vjb25kcyhzZWMpIHsKICAgICAgdmFyIGQgPSBOdW1iZXIoc2VjKTsKICAgICAgdmFyIGggPSBNYXRoLmZsb29yKGQgLyAzNjAwKTsKICAgICAgdmFyIG0gPSBNYXRoLmZsb29yKChkICUgMzYwMCkgLyA2MCk7CiAgICAgIHZhciBzID0gTWF0aC5mbG9vcigoZCAlIDM2MDApICUgNjApOwoKICAgICAgdmFyIGhvdXIgPSB0aGlzLiR0KCJnZW5lcmFsLmhvdXIiKTsKICAgICAgdmFyIGhvdXJzID0gdGhpcy4kdCgiZ2VuZXJhbC5ob3VycyIpOwogICAgICB2YXIgbWludXRlID0gdGhpcy4kdCgiZ2VuZXJhbC5taW51dGUiKTsKICAgICAgdmFyIG1pbnV0ZXMgPSB0aGlzLiR0KCJnZW5lcmFsLm1pbnV0ZXMiKTsKICAgICAgdmFyIHNlY29uZCA9IHRoaXMuJHQoImdlbmVyYWwuc2Vjb25kIik7CiAgICAgIHZhciBzZWNvbmRzID0gdGhpcy4kdCgiZ2VuZXJhbC5zZWNvbmRzIik7CgogICAgICB2YXIgaERpc3BsYXkgPSBoID4gMCA/IGggKyAoaCA9PSAxID8gYCAke2hvdXJ9IGAgOiBgICR7aG91cnN9IGApIDogIiI7CiAgICAgIHZhciBtRGlzcGxheSA9IG0gPiAwID8gbSArIChtID09IDEgPyBgICR7bWludXRlfSBgIDogYCAke21pbnV0ZXN9IGApIDogIiI7CiAgICAgIHZhciBzRGlzcGxheSA9IHMgPiAwID8gcyArIChzID09IDEgPyBgICR7c2Vjb25kfSBgIDogYCAke3NlY29uZHN9IGApIDogIiI7CiAgICAgIHJldHVybiBoRGlzcGxheSArIG1EaXNwbGF5ICsgc0Rpc3BsYXk7CiAgICB9LAogICAgZG93bmxvYWRFcGlzb2RlKHVybCkgewogICAgICB2YXIgbGluayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImEiKTsKICAgICAgbGluay5ocmVmID0gdXJsOwogICAgICBsaW5rLnRhcmdldCA9ICJfYmxhbmsiOwogICAgICBsaW5rLmNsaWNrKCk7CiAgICB9LAogICAgZXBpc29kZXNJblNlYXNvbihzZWFzb24pIHsKICAgICAgcmV0dXJuIHRoaXMudmlld2VyRXBpc29kZXMuZmlsdGVyKChlcGlzb2RlKSA9PiB7CiAgICAgICAgcmV0dXJuIGVwaXNvZGUuc2VyaWVfc2Vhc29uID09PSBzZWFzb247CiAgICAgIH0pOwogICAgfSwKICAgIGVwaXNvZGVVUkwoZXBpc29kZSkgewogICAgICByZXR1cm4gZXBpc29kZS5zb3VyY2Vfc3RyZWFtX3VybCAmJiBlcGlzb2RlLnNvdXJjZV9zdHJlYW1fdXJsLmxlbmd0aCA/IGVwaXNvZGUuc291cmNlX3N0cmVhbV91cmwgOiBlcGlzb2RlLnh0cmVhbV91cmw7CiAgICB9LAogICAgZXBpc29kZVZpZGVvVHlwZShlcGlzb2RlKSB7CiAgICAgIGlmIChlcGlzb2RlLnNvdXJjZV9jb250YWluZXJfZXh0ZW5zaW9uLnRvTG93ZXJDYXNlKCkgPT0gIm1rdiIpIHsKICAgICAgICByZXR1cm4gInZpZGVvL3dlYm0iOwogICAgICB9IGVsc2UgewogICAgICAgIHJldHVybiAidmlkZW8vbXA0IjsKICAgICAgfQogICAgfSwKICAgIGZvcm1hdERvd25sb2FkRm9sZGVyKGZvbGRlcikgewogICAgICByZXR1cm4gdGhpcy54ZFByby5kb3dubG9hZF9mb2xkZXIuc2xpY2UoLTEpID09ICIvIiA/IGAke3RoaXMueGRQcm8uZG93bmxvYWRfZm9sZGVyfSR7Zm9sZGVyfWAgOiBgJHt0aGlzLnhkUHJvLmRvd25sb2FkX2ZvbGRlcn0vJHtmb2xkZXJ9YDsKICAgIH0sCiAgICBkb3dubG9hZE1vZGFsKHNob3csIHNhdmUgPSBmYWxzZSkgewogICAgICBpZiAoc2hvdykgewogICAgICAgIHRoaXMueGRQcm8uZG93bmxvYWRzLmxlbmd0aCA9IDA7CiAgICAgIH0KICAgICAgaWYgKHNhdmUpIHsKICAgICAgICBsZXQgZG93bmxvYWRzID0gW107CiAgICAgICAgdGhpcy54ZFByby5kb3dubG9hZHMubWFwKGluZGV4ID0+IHsKICAgICAgICAgIGNvbnN0IGVwaXNvZGUgPSB0aGlzLnZpZXdlckVwaXNvZGVzW2luZGV4XTsKICAgICAgICAgIGNvbnN0IHllYXIgPSBuZXcgRGF0ZSh0aGlzLnZpZXdlclNlcmllcy50bWRiLmZpcnN0X2Fpcl9kYXRlKS5nZXRGdWxsWWVhcigpOwogICAgICAgICAgbGV0IGRvd25sb2FkID0gewogICAgICAgICAgICB1c2VyX2lkOiB0aGlzLmN1cnJlbnRVc2VyLnVzZXIuaWQsCiAgICAgICAgICAgIHhkcHJvX2lkOiB0aGlzLnhkUHJvLnhkcHJvX2lkLAogICAgICAgICAgICBmaWxlbmFtZTogYCR7dGhpcy52aWV3ZXJTZXJpZXMudG1kYi5vcmlnaW5hbF9uYW1lfSAoJHt5ZWFyfSkgUyR7U3RyaW5nKGVwaXNvZGUuc2VyaWVfc2Vhc29uKS5wYWRTdGFydCgyLCAiMCIpfUUke1N0cmluZyhlcGlzb2RlLnNlcmllX2VwaXNvZGUpLnBhZFN0YXJ0KDIsICIwIil9LiR7ZXBpc29kZS5zb3VyY2VfY29udGFpbmVyX2V4dGVuc2lvbn1gLAogICAgICAgICAgICBmaWxlX2V4dGVuc2lvbjogZXBpc29kZS5zb3VyY2VfY29udGFpbmVyX2V4dGVuc2lvbiwKICAgICAgICAgICAgdHlwZTogMiwKICAgICAgICAgICAgZW5hYmxlZDogMCwKICAgICAgICAgICAgZG93bmxvYWRfZm9sZGVyOiB0aGlzLmZvcm1hdERvd25sb2FkRm9sZGVyKGAke3RoaXMudmlld2VyU2VyaWVzLnRtZGIub3JpZ2luYWxfbmFtZX0gKCR7eWVhcn0pL1NlYXNvbiAke2VwaXNvZGUuc2VyaWVfc2Vhc29ufS9gKQogICAgICAgICAgfTsKICAgICAgICAgIGlmIChlcGlzb2RlLnNvdXJjZV9zdHJlYW1fdXJsICYmIGVwaXNvZGUuc291cmNlX3N0cmVhbV91cmwubGVuZ3RoKSB7CiAgICAgICAgICAgIGRvd25sb2FkLmRvd25sb2FkX3VybCA9IGVwaXNvZGUuc291cmNlX3N0cmVhbV91cmw7CiAgICAgICAgICAgIGRvd25sb2FkLmRvd25sb2FkX2hvc3QgPSAiIjsKICAgICAgICAgICAgZG93bmxvYWQuZG93bmxvYWRfcG9ydCA9ICIiOwogICAgICAgICAgICBkb3dubG9hZC5kb3dubG9hZF91c2VybmFtZSA9ICIiOwogICAgICAgICAgICBkb3dubG9hZC5kb3dubG9hZF9wYXNzd29yZCA9ICIiOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgZG93bmxvYWQuZG93bmxvYWRfdXJsID0gZXBpc29kZS54dHJlYW1fdXJsOwogICAgICAgICAgICBsZXQgdSA9IG5ldyBVUkwoZXBpc29kZS54dHJlYW1fdXJsKTsKICAgICAgICAgICAgZG93bmxvYWQuZG93bmxvYWRfaG9zdCA9IHUuaG9zdG5hbWU7CiAgICAgICAgICAgIGRvd25sb2FkLmRvd25sb2FkX3BvcnQgPSB1LnBvcnQ7CiAgICAgICAgICAgIGxldCBwID0gdS5wYXRobmFtZS5zcGxpdCgiLyIpOwogICAgICAgICAgICBkb3dubG9hZC5kb3dubG9hZF91c2VybmFtZSA9IHBbMl07CiAgICAgICAgICAgIGRvd25sb2FkLmRvd25sb2FkX3Bhc3N3b3JkID0gcFszXTsKICAgICAgICAgIH0KICAgICAgICAgIGRvd25sb2Fkcy5wdXNoKGRvd25sb2FkKTsKICAgICAgICB9KTsKICAgICAgICB0aGlzLmFkZHhkUHJvRG93bmxvYWQoZG93bmxvYWRzKQogICAgICAgICAgLnRoZW4ocmVzID0+IHsKICAgICAgICAgICAgaWYgKHJlcy5zdGF0dXMgPT09IHRydWUpIHsKICAgICAgICAgICAgICB0aGlzLiRub3RpZnkoCiAgICAgICAgICAgICAgICAicHJpbWFyeSIsCiAgICAgICAgICAgICAgICB0aGlzLiR0KCJwcm9maWxlLnN1Y2Nlc3MiKSwKICAgICAgICAgICAgICAgIHRoaXMuJHQoInhkLXByby5kb3dubG9hZC1zYXZlLXN1Y2Nlc3MiKSwKICAgICAgICAgICAgICAgICJsYS11c2VyLXNoaWVsZCIsCiAgICAgICAgICAgICAgICB7IGR1cmF0aW9uOiA1MDAwLCBwZXJtYW5lbnQ6IGZhbHNlIH0KICAgICAgICAgICAgICApOwogICAgICAgICAgICB9CiAgICAgICAgICB9KQogICAgICAgICAgLmNhdGNoKCgpID0+IHsKICAgICAgICAgICAgdGhpcy4kbm90aWZ5KAogICAgICAgICAgICAgICJlcnJvciIsCiAgICAgICAgICAgICAgdGhpcy4kdCgicHJvZmlsZS5mYWlsZWQiKSwKICAgICAgICAgICAgICB0aGlzLiR0KCJ4ZC1wcm8uZG93bmxvYWQtc2F2ZS1lcnJvciIpLAogICAgICAgICAgICAgICJsYS11c2VyLXNoaWVsZCIsCiAgICAgICAgICAgICAgeyBkdXJhdGlvbjogNTAwMCwgcGVybWFuZW50OiBmYWxzZSB9CiAgICAgICAgICAgICk7CiAgICAgICAgICB9KTsKICAgICAgfQogICAgICB0aGlzLnhkUHJvLm1vZGFsID0gc2hvdzsKICAgIH0sCiAgICB0b2dnbGVEb3dubG9hZHNTZWxlY3Rpb24oaXRlbSkgewogICAgICBsZXQgaWR4ID0gdGhpcy54ZFByby5kb3dubG9hZHMuaW5kZXhPZihpdGVtKTsKICAgICAgaWYgKGlkeCAhPT0gLTEpIHsKICAgICAgICB0aGlzLnhkUHJvLmRvd25sb2Fkcy5zcGxpY2UoaWR4LCAxKTsKICAgICAgfSBlbHNlIHsKICAgICAgICB0aGlzLnhkUHJvLmRvd25sb2Fkcy5wdXNoKGl0ZW0pOwogICAgICB9CiAgICB9LAogICAgc2VsZWN0RG93bmxvYWRzUmFuZ2VTZWxlY3Rpb24oaW5kZXgpIHsKICAgICAgY29uc3QgbGFzdEluZGV4ID0KICAgICAgICB0aGlzLnhkUHJvLmRvd25sb2Fkc1t0aGlzLnhkUHJvLmRvd25sb2Fkcy5sZW5ndGggLSAxXTsKICAgICAgY29uc3QgZGlyID0gaW5kZXggPiBsYXN0SW5kZXggPyAxIDogLTE7CiAgICAgIGZvciAobGV0IGkgPSBsYXN0SW5kZXg7IGkgIT0gaW5kZXggKyBkaXI7IGkgKz0gZGlyKSB7CiAgICAgICAgaWYgKCF0aGlzLnhkUHJvLmRvd25sb2Fkcy5pbmNsdWRlcyhpKSkgewogICAgICAgICAgdGhpcy54ZFByby5kb3dubG9hZHMucHVzaChpKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0sCiAgICBzZWxlY3REb3dubG9hZHNTZWxlY3Rpb24oaXRlbSkgewogICAgICB0aGlzLnhkUHJvLmRvd25sb2Fkcy5sZW5ndGggPSAwOwogICAgICB0aGlzLnhkUHJvLmRvd25sb2Fkcy5wdXNoKGl0ZW0pOwogICAgfSwKICB9LAogIGJlZm9yZU1vdW50KCkgewogICAgRXZlbnRCdXMuJG9uKCJwcmludCIsIHRoaXMucGFnZVByaW50KTsKICAgIEV2ZW50QnVzLiRvbigic2VhcmNoIiwgdGhpcy5zZWFyY2hTZXJpZXMpOwogICAgRXZlbnRCdXMuJG9uKCJjbG9zZS12aWV3ZXIiLCB0aGlzLmNsb3NlVmlld2VyKTsKICB9LAogIGJlZm9yZURlc3Ryb3koKSB7CiAgICBFdmVudEJ1cy4kb2ZmKCJwcmludCIsIHRoaXMucGFnZVByaW50KTsKICAgIEV2ZW50QnVzLiRvZmYoInNlYXJjaCIsIHRoaXMuc2VhcmNoU2VyaWVzKTsKICAgIEV2ZW50QnVzLiRvZmYoImNsb3NlLXZpZXdlciIsIHRoaXMuY2xvc2VWaWV3ZXIpOwogIH0sCiAgd2F0Y2g6IHsKICAgIHZpZXdlcjogZnVuY3Rpb24gKHZhbCkgewogICAgICBFdmVudEJ1cy4kZW1pdCgidXBkYXRlLXZpZXdlciIsIHZhbCk7CiAgICB9LAogICAgZnJvbTogZnVuY3Rpb24gKHZhbCkgewogICAgICBFdmVudEJ1cy4kZW1pdCgidXBkYXRlLWZyb20iLCB2YWwpOwogICAgICBkb2N1bWVudC5ib2R5LnNjcm9sbFRvcCA9IDA7CiAgICAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxUb3AgPSAwOwogICAgfSwKICAgIHRvOiBmdW5jdGlvbiAodmFsKSB7CiAgICAgIEV2ZW50QnVzLiRlbWl0KCJ1cGRhdGUtdG8iLCB2YWwpOwogICAgfSwKICAgIHRvdGFsOiBmdW5jdGlvbiAodmFsKSB7CiAgICAgIEV2ZW50QnVzLiRlbWl0KCJ1cGRhdGUtdG90YWwiLCB2YWwpOwogICAgfSwKICAgIHNlcmllU2VhcmNoOiBmdW5jdGlvbiAodmFsKSB7CiAgICAgIGxldCB2bSA9IHRoaXM7CiAgICAgIGNsZWFyVGltZW91dCh0aGlzLmJvdW5jZSk7CiAgICAgIHRoaXMuYm91bmNlID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7CiAgICAgICAgdm0ubG9hZFNlcmllcyh2YWwpOwogICAgICB9LCA1MDApOwogICAgfSwKICAgICJ4ZFByby54ZHByb19pZCI6IGZ1bmN0aW9uICh2YWwpIHsKICAgICAgbGV0IGluc3RhbmNlID0gdGhpcy54ZFByb0luc3RhbmNlcy5maW5kKGluc3RhbmNlID0+IHsKICAgICAgICByZXR1cm4gaW5zdGFuY2UuaWQgPT0gdmFsOwogICAgICB9KTsKICAgICAgaWYgKGluc3RhbmNlKSB7CiAgICAgICAgdGhpcy54ZFByby5kb3dubG9hZF9mb2xkZXIgPSBpbnN0YW5jZS5kb3dubG9hZF9mb2xkZXI7CiAgICAgIH0KICAgIH0sCiAgfSwKfTsK"},null]}