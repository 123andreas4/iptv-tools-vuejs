{"remainingRequest":"/media/ernst/63bce43c-5e51-4bf1-a611-3afdf32ac6f6/VueJS/IPTV-Tools/node_modules/vue-loader/lib/index.js??vue-loader-options!/media/ernst/63bce43c-5e51-4bf1-a611-3afdf32ac6f6/VueJS/IPTV-Tools/src/components/Form/ERDSelect.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/media/ernst/63bce43c-5e51-4bf1-a611-3afdf32ac6f6/VueJS/IPTV-Tools/src/components/Form/ERDSelect.vue","mtime":1626368550762},{"path":"/media/ernst/63bce43c-5e51-4bf1-a611-3afdf32ac6f6/VueJS/IPTV-Tools/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/media/ernst/63bce43c-5e51-4bf1-a611-3afdf32ac6f6/VueJS/IPTV-Tools/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/media/ernst/63bce43c-5e51-4bf1-a611-3afdf32ac6f6/VueJS/IPTV-Tools/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/media/ernst/63bce43c-5e51-4bf1-a611-3afdf32ac6f6/VueJS/IPTV-Tools/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/media/ernst/63bce43c-5e51-4bf1-a611-3afdf32ac6f6/VueJS/IPTV-Tools/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKDQoubmctc2VsZWN0e30NCg=="},{"version":3,"sources":["ERDSelect.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiPA","file":"ERDSelect.vue","sourceRoot":"src/components/Form","sourcesContent":["<template>\r\n  <div\r\n   :tabindex=\"tabindex\" @blur=\"isOpen = false\"\r\n    class=\"erd-select\"\r\n    :class=\"{ 'select-open': isOpen }\"\r\n    @mouseenter=\"isOver = true\"\r\n    @mouseleave=\"isOver = false\"\r\n  >\r\n    <button\r\n      type=\"button\"\r\n      class=\"erd-select-opener\"\r\n      @click.stop=\"toggleDropdown\"\r\n      @keydown.up.alt.stop.prevent=\"toggleDropdown()\"\r\n      @keydown.up.exact.stop.prevent=\"selectPrevious()\"\r\n      @keydown.down.alt.stop.prevent=\"toggleDropdown()\"\r\n      @keydown.down.exact.stop.prevent=\"selectNext()\"\r\n      @keydown.home.stop.prevent=\"selectFirst()\"\r\n      @keydown.end.stop.prevent=\"selectLast()\"\r\n      :disabled=\"disabled || items.length === 0\"\r\n    >\r\n      <span\r\n        class=\"erd-select-opener-txt\"\r\n        :class=\"{ 'erd-select-is-placeholder': isPlaceholder }\"\r\n        >{{ currentText }}</span\r\n      >\r\n      <i class=\"las erd-select-opener-ico\" :class=\"openerIcon\"></i>\r\n    </button>\r\n    <transition name=\"fade\">\r\n      <div class=\"erd-select-dropdown\" v-show=\"isOpen\">\r\n        <perfect-scrollbar\r\n          class=\"scroll\"\r\n          :settings=\"{ suppressScrollX: true, wheelPropagation: true }\"\r\n          watch-options\r\n        >\r\n          <button\r\n            class=\"erd-select-option\"\r\n            v-for=\"(item, index) in filteredItems\"\r\n            :class=\"{ 'erd-select-option--cur': index === selectedIndex }\"\r\n            :key=\"`select-item-${index}`\"\r\n            :disabled=\"item.disabled\"\r\n            @click=\"selectItem(index)\"\r\n          >\r\n            {{ item.text }}\r\n          </button>\r\n        </perfect-scrollbar>\r\n      </div>\r\n    </transition>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n/* eslint-disable */\r\nexport default {\r\n  model: {\r\n    prop: 'selected',\r\n    event: 'blur'\r\n  },\r\n  props: {\r\n    selected: {\r\n      type: [String, Number, Boolean],\r\n      default: undefined\r\n    },\r\n    items: {\r\n      type: Array,\r\n      required: true\r\n    },\r\n    disabled: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    placeholder: {\r\n      type: String,\r\n      default: ''\r\n    },\r\n    openerIcon: {\r\n      type: String,\r\n      default: 'la-angle-down'\r\n    },\r\n    tabindex: {\r\n      type: Number,\r\n      required: false,\r\n      default: 0,\r\n    },\r\n  },\r\n  data () {\r\n    return {\r\n      selectedIndex: -1,\r\n      isOpen: false,\r\n      isOver: false\r\n    }\r\n  },\r\n  computed: {\r\n    currentOption () {\r\n      return this.items[this.selectedIndex]\r\n    },\r\n    currentOptionValue () {\r\n      return this.currentOption.value;\r\n    },\r\n    isPlaceholder () {\r\n      return !this.currentOption;\r\n    },\r\n    currentText () {\r\n      return this.isPlaceholder ? this.placeholder : this.currentOption.text;\r\n    },\r\n    filteredItems () {\r\n      return this.items.filter(item => {\r\n        return item.text && String(item.text).length\r\n      })\r\n    }\r\n  },\r\n  methods: {\r\n    toggleDropdown () {\r\n      if (this.isOpen) {\r\n        this.hideDropdown()\r\n      } else {\r\n        this.showDropdown()\r\n      }\r\n    },\r\n    hideDropdown () {\r\n      this.isOpen = false;\r\n      this.unlistenKeys();\r\n      this.removeEvents();\r\n    },\r\n    showDropdown () {\r\n      this.isOpen = true;\r\n      this.listenKeys();\r\n      this.addEvents();\r\n    },\r\n    selectItem (index) {\r\n      this.$emit('blur', this.items[index].value);\r\n      this.selectedIndex = index;\r\n      this.hideDropdown();\r\n    },\r\n    addEvents() {\r\n      document.addEventListener(\"click\", this.handleDocumentClick);\r\n      document.addEventListener(\"touchstart\", this.handleDocumentClick);\r\n    },\r\n    removeEvents() {\r\n      document.removeEventListener(\"click\", this.handleDocumentClick);\r\n      document.removeEventListener(\"touchstart\", this.handleDocumentClick);\r\n    },\r\n    handleDocumentClick(e) {\r\n      if (!this.isMenuOver) {\r\n        this.toggleDropdown();\r\n      }\r\n    },\r\n    listenKeys () {\r\n      document.addEventListener('keydown', this.listenKeyDown)\r\n    },\r\n    unlistenKeys () {\r\n      document.removeEventListener('keydown', this.listenKeyDown)\r\n    },\r\n    listenKeyDown (event) {\r\n      switch (event.key) {\r\n        case 'Esc':\r\n        case 'Escape':\r\n        case 'Tab':\r\n        case 'Enter':\r\n          event.preventDefault()\r\n          event.stopPropagation()\r\n          return this.hideDropdown()\r\n\r\n        case 'Up':\r\n        case 'ArrowUp':\r\n          event.preventDefault()\r\n          event.stopPropagation()\r\n          if (event.altKey)\r\n            return this.toggleDropdown()\r\n          return this.selectPrev()\r\n\r\n        case 'Down':\r\n        case 'ArrowDown':\r\n          event.preventDefault()\r\n          event.stopPropagation()\r\n          if (event.altKey)\r\n            return this.toggleDropdown()\r\n          return this.selectNext()\r\n\r\n        case 'Home':\r\n          event.preventDefault()\r\n          event.stopPropagation()\r\n          return this.selectFirst()\r\n\r\n        case 'End':\r\n          event.preventDefault()\r\n          event.stopPropagation()\r\n          return this.selectLast()\r\n\r\n        default: break\r\n      }\r\n    },\r\n    selectByIndex (index) {\r\n      this.selectedIndex = index;\r\n    },\r\n    selectByValue (value = '') {\r\n      let index = this.filteredItems.findIndex(item => {\r\n        return item.value == value;\r\n      })\r\n      this.selectByIndex(index);\r\n    },\r\n    selectNext (offset = 1, startIndex = this.selectedIndex) {\r\n      const nextIndex  = startIndex + offset\r\n      const nextOption = this.filteredItems[nextIndex];\r\n      if (!nextOption) {\r\n        return\r\n      }\r\n      if (nextOption.disabled) {\r\n        return this.selectNext(offset, nextIndex);\r\n      }\r\n      this.selectByIndex(nextIndex);\r\n    },\r\n    selectPrevious () {\r\n      if (this.selectedIndex < 0) {\r\n        return this.selectLast();\r\n      }\r\n      this.selectNext(-1);\r\n    },\r\n    selectFirst () {\r\n      this.selectNext(1, -1)\r\n    },\r\n    selectLast () {\r\n      this.selectNext(-1, this.filteredItems.length)\r\n    },\r\n  },\r\n  beforeUpdate () {\r\n    this.selectedIndex = this.items.findIndex(item => {\r\n      return item.value == this.selected;\r\n    });\r\n  },\r\n  beforeMount () {\r\n    this.selectedIndex = this.items.findIndex(item => {\r\n      return item.value == this.selected;\r\n    });\r\n  },\r\n  beforeDestroy () {\r\n    this.unlistenKeys();\r\n  }\r\n};\r\n</script>\r\n\r\n<style>\r\n.ng-select{}\r\n</style>"]}]}