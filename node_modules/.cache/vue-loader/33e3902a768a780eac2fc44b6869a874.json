{"remainingRequest":"/media/ernst/63bce43c-5e51-4bf1-a611-3afdf32ac6f6/VueJS/IPTV-Tools/node_modules/vue-loader/lib/index.js??vue-loader-options!/media/ernst/63bce43c-5e51-4bf1-a611-3afdf32ac6f6/VueJS/IPTV-Tools/src/views/app/xtream/series.vue?vue&type=script&lang=js&","dependencies":[{"path":"/media/ernst/63bce43c-5e51-4bf1-a611-3afdf32ac6f6/VueJS/IPTV-Tools/src/views/app/xtream/series.vue","mtime":1622727013850},{"path":"/media/ernst/63bce43c-5e51-4bf1-a611-3afdf32ac6f6/VueJS/IPTV-Tools/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/media/ernst/63bce43c-5e51-4bf1-a611-3afdf32ac6f6/VueJS/IPTV-Tools/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/media/ernst/63bce43c-5e51-4bf1-a611-3afdf32ac6f6/VueJS/IPTV-Tools/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/media/ernst/63bce43c-5e51-4bf1-a611-3afdf32ac6f6/VueJS/IPTV-Tools/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/media/ernst/63bce43c-5e51-4bf1-a611-3afdf32ac6f6/VueJS/IPTV-Tools/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCi8qIGVzbGludC1kaXNhYmxlIHZ1ZS9uby1zaWRlLWVmZmVjdHMtaW4tY29tcHV0ZWQtcHJvcGVydGllcyAqLwppbXBvcnQgeyBFdmVudEJ1cyB9IGZyb20gIi4uLy4uLy4uL3NlcnZpY2VzL2VidXMiOwppbXBvcnQgeyBodHRwU2VydmljZSB9IGZyb20gIi4uLy4uLy4uL3NlcnZpY2VzL2h0dHAiOwppbXBvcnQgeyBtYXBHZXR0ZXJzIH0gZnJvbSAidnVleCI7CgpleHBvcnQgZGVmYXVsdCB7CiAgZGF0YSgpIHsKICAgIHJldHVybiB7CiAgICAgIGFjdGl2ZVRhYjogMCwKICAgICAgcGxheWxpc3RzOiBbXSwKICAgICAgZ3JvdXBzOiBbXSwKICAgICAgc3RyZWFtczogW10sCiAgICAgIHN0cmVhbTogbnVsbCwKICAgICAgZWRpdG9yOiBmYWxzZSwKICAgICAgc2VhcmNoOiBudWxsLAogICAgICBpc0xvYWRpbmc6IGZhbHNlLAogICAgICBmcm9tOiAwLAogICAgICB0bzogMCwKICAgICAgdG90YWw6IDAsCiAgICAgIGN1cnJlbnRQYWdlOiAxLAogICAgICBmaWVsZHM6IFsKICAgICAgICB7CiAgICAgICAgICBrZXk6ICJwbGF5bGlzdCIsCiAgICAgICAgICBsYWJlbDogdGhpcy4kdCgieHRyZWFtLnBsYXlsaXN0IiksCiAgICAgICAgICBzb3J0YWJsZTogdHJ1ZSwKICAgICAgICB9LAogICAgICAgIHsga2V5OiAiZ3JvdXAiLCBsYWJlbDogdGhpcy4kdCgieHRyZWFtLmdyb3VwIiksIHNvcnRhYmxlOiB0cnVlIH0sCiAgICAgICAgewogICAgICAgICAga2V5OiAic2VyaWVfbmFtZSIsCiAgICAgICAgICBsYWJlbDogdGhpcy4kdCgieHRyZWFtLm5hbWUiKSwKICAgICAgICAgIHNvcnRhYmxlOiB0cnVlLAogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAga2V5OiAic2VyaWVfc2Vhc29uIiwKICAgICAgICAgIGxhYmVsOiB0aGlzLiR0KCJ4dHJlYW0uc2Vhc29uIiksCiAgICAgICAgICBzb3J0YWJsZTogdHJ1ZSwKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgIGtleTogInNlcmllX2VwaXNvZGUiLAogICAgICAgICAgbGFiZWw6IHRoaXMuJHQoInh0cmVhbS5lcGlzb2RlIiksCiAgICAgICAgICBzb3J0YWJsZTogdHJ1ZSwKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgIGtleTogInN0cmVhbV90dmdfbG9nbyIsCiAgICAgICAgICBsYWJlbDogdGhpcy4kdCgieHRyZWFtLnN0cmVhbS1pY29uIiksCiAgICAgICAgICBzb3J0YWJsZTogdHJ1ZSwKICAgICAgICB9LAogICAgICAgIHsga2V5OiAidG1kYl9pZCIsIGxhYmVsOiB0aGlzLiR0KCJ4dHJlYW0udG1kYi1pZCIpLCBzb3J0YWJsZTogdHJ1ZSB9LAogICAgICAgIHsKICAgICAgICAgIGtleTogInN0cmVhbV9pc19oaWRkZW4iLAogICAgICAgICAgbGFiZWw6IHRoaXMuJHQoInh0cmVhbS5oaWRkZW4iKSwKICAgICAgICAgIHNvcnRhYmxlOiB0cnVlLAogICAgICAgIH0sCiAgICAgICAgeyBrZXk6ICJzdHJlYW1fb3JkZXIiLCBsYWJlbDogdGhpcy4kdCgieHRyZWFtLm9yZGVyIiksIHNvcnRhYmxlOiB0cnVlIH0sCiAgICAgICAgewogICAgICAgICAga2V5OiAiYWN0aW9ucyIsCiAgICAgICAgICBsYWJlbDogdGhpcy4kdCgidXNlcnMuYWN0aW9ucyIpLAogICAgICAgICAgc29ydGFibGU6IGZhbHNlLAogICAgICAgICAgdGhDbGFzczogInRleHQtcmlnaHQiLAogICAgICAgICAgdGRDbGFzczogInRleHQtcmlnaHQiLAogICAgICAgIH0sCiAgICAgIF0sCiAgICB9OwogIH0sCiAgY29tcHV0ZWQ6IHsKICAgIC4uLm1hcEdldHRlcnMoWyJjdXJyZW50VXNlciIsICJzZXR0aW5ncyJdKSwKICAgIHBlclBhZ2UoKSB7CiAgICAgIHJldHVybiB0aGlzLnNldHRpbmdzLnBlclBhZ2U7CiAgICB9LAogICAgc2VhcmNoRmlsdGVyZWQoKSB7CiAgICAgIGlmICh0aGlzLnNlYXJjaCA9PT0gbnVsbCkgewogICAgICAgIHJldHVybiB0aGlzLnN0cmVhbXM7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdmFyIHJlID0gbmV3IFJlZ0V4cCh0aGlzLnNlYXJjaCwgImkiKTsKICAgICAgICByZXR1cm4gdGhpcy5zdHJlYW1zLmZpbHRlcigoc3RyZWFtKSA9PiB7CiAgICAgICAgICByZXR1cm4gKAogICAgICAgICAgICBTdHJpbmcoc3RyZWFtLnN0cmVhbV90dmdfbmFtZSkubWF0Y2gocmUpIHx8CiAgICAgICAgICAgIFN0cmluZyhzdHJlYW0uc3RyZWFtX3R2Z19sb2dvKS5tYXRjaChyZSkgfHwKICAgICAgICAgICAgU3RyaW5nKHN0cmVhbS5zZXJpZV9uYW1lKS5tYXRjaChyZSkgfHwKICAgICAgICAgICAgU3RyaW5nKHN0cmVhbS5zZXJpZV9zZWFzb24pLm1hdGNoKHJlKSB8fAogICAgICAgICAgICBTdHJpbmcoc3RyZWFtLnNlcmllX2VwaXNvZGUpLm1hdGNoKHJlKSB8fAogICAgICAgICAgICBTdHJpbmcoc3RyZWFtLnRtZGJfaWQpLm1hdGNoKHJlKSB8fAogICAgICAgICAgICBTdHJpbmcoc3RyZWFtLnBsYXlsaXN0KS5tYXRjaChyZSkgfHwKICAgICAgICAgICAgU3RyaW5nKHN0cmVhbS5ncm91cCkubWF0Y2gocmUpCiAgICAgICAgICApOwogICAgICAgIH0pOwogICAgICB9CiAgICB9LAogICAgcGFnZWQoKSB7CiAgICAgIHRoaXMudG90YWwgPSB0aGlzLnNlYXJjaEZpbHRlcmVkLmxlbmd0aDsKICAgICAgdGhpcy5mcm9tID0gKHRoaXMuY3VycmVudFBhZ2UgLSAxKSAqIHRoaXMucGVyUGFnZTsKICAgICAgdGhpcy50byA9CiAgICAgICAgdGhpcy5mcm9tICsgdGhpcy5wZXJQYWdlID4gdGhpcy50b3RhbAogICAgICAgICAgPyB0aGlzLnRvdGFsCiAgICAgICAgICA6IHRoaXMuZnJvbSArIHRoaXMucGVyUGFnZTsKICAgICAgcmV0dXJuIHRoaXMuc2VhcmNoRmlsdGVyZWQuc2xpY2UodGhpcy5mcm9tLCB0aGlzLnRvKTsKICAgIH0sCiAgfSwKICBtZXRob2RzOiB7CiAgICBsb2FkU3RyZWFtcygpIHsKICAgICAgbGV0IGFtb3VudCA9IDEwMDsKICAgICAgbGV0IHN0cmVhbXMgPSBbXTsKICAgICAgdGhpcy5pc0xvYWRpbmcgPSB0cnVlOwogICAgICBQcm9taXNlLmFsbChbCiAgICAgICAgaHR0cFNlcnZpY2UuZ2V0KCJzZXJpZXMvdG90YWwiKSwKICAgICAgICBodHRwU2VydmljZS5nZXQoImdyb3VwL3NpbXBsZSIpLAogICAgICAgIGh0dHBTZXJ2aWNlLmdldCgicGxheWxpc3Qvc2ltcGxlIiksCiAgICAgIF0pCiAgICAgICAgLnRoZW4oKHJlcykgPT4gewogICAgICAgICAgaWYgKHJlc1swXS5zdGF0dXMgPT09IHRydWUpIHsKICAgICAgICAgICAgbGV0IHJlcXVlc3RzID0gW107CiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmVzWzBdLmRhdGEgLyBhbW91bnQ7IGkrKykgewogICAgICAgICAgICAgIHJlcXVlc3RzLnB1c2goaHR0cFNlcnZpY2UuZ2V0KGBzZXJpZXMvJHtpICogYW1vdW50fS8ke2Ftb3VudH1gKSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgUHJvbWlzZS5hbGwocmVxdWVzdHMpLnRoZW4oKHJlc3VsdHMpID0+IHsKICAgICAgICAgICAgICB0aGlzLmlzTG9hZGluZyA9IGZhbHNlOwogICAgICAgICAgICAgIHJlc3VsdHMubWFwKChyZXMpID0+IHsKICAgICAgICAgICAgICAgIGlmIChyZXMuc3RhdHVzID09PSB0cnVlKSB7CiAgICAgICAgICAgICAgICAgIHN0cmVhbXMgPSBbLi4uc3RyZWFtcywgLi4ucmVzLmRhdGFdOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgIHRoaXMuc3RyZWFtcyA9IHN0cmVhbXM7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgfQogICAgICAgICAgaWYgKHJlc1sxXS5zdGF0dXMgPT09IHRydWUpIHsKICAgICAgICAgICAgdGhpcy5ncm91cHMgPSByZXNbMV0uZGF0YQogICAgICAgICAgICAgIC5maWx0ZXIoKGdyb3VwKSA9PiB7CiAgICAgICAgICAgICAgICByZXR1cm4gZ3JvdXAuZ3JvdXBfdHlwZSA9PSAzOwogICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgLm1hcCgoZ3JvdXApID0+IHsKICAgICAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICAgIHRleHQ6IGdyb3VwLmdyb3VwX25hbWUsCiAgICAgICAgICAgICAgICAgIHZhbHVlOiBncm91cC5pZCwKICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICB9CiAgICAgICAgICBpZiAocmVzWzJdLnN0YXR1cyA9PT0gdHJ1ZSkgewogICAgICAgICAgICB0aGlzLnBsYXlsaXN0cyA9IHJlc1syXS5kYXRhLm1hcCgocGxheWxpc3QpID0+IHsKICAgICAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICAgICAgdGV4dDogcGxheWxpc3QubmFtZSwKICAgICAgICAgICAgICAgIHZhbHVlOiBwbGF5bGlzdC5pZCwKICAgICAgICAgICAgICB9OwogICAgICAgICAgICB9KTsKICAgICAgICAgIH0KICAgICAgICB9KQogICAgICAgIC5jYXRjaCgoKSA9PiB7CiAgICAgICAgICB0aGlzLmlzTG9hZGluZyA9IGZhbHNlOwogICAgICAgICAgdGhpcy4kbm90aWZ5KAogICAgICAgICAgICAiZXJyb3IiLAogICAgICAgICAgICB0aGlzLiR0KCJwcm9maWxlLmZhaWxlZCIpLAogICAgICAgICAgICB0aGlzLiR0KCJ4dHJlYW0uc2VyaWVzLWxvYWQtZXJyb3IiKSwKICAgICAgICAgICAgImxhLXVzZXItc2hpZWxkIiwKICAgICAgICAgICAgeyBkdXJhdGlvbjogNTAwMCwgcGVybWFuZW50OiBmYWxzZSB9CiAgICAgICAgICApOwogICAgICAgIH0pOwogICAgfSwKICAgIGFkZFN0cmVhbSgpIHsKICAgICAgaHR0cFNlcnZpY2UKICAgICAgICAucG9zdCgic2VyaWVzL2FkZCIpCiAgICAgICAgLnRoZW4oKHJlcykgPT4gewogICAgICAgICAgdGhpcy5pc0xvYWRpbmcgPSBmYWxzZTsKICAgICAgICAgIGlmIChyZXMuc3RhdHVzID09PSB0cnVlICYmIHJlcy5kYXRhKSB7CiAgICAgICAgICAgIHRoaXMuc3RyZWFtID0gewogICAgICAgICAgICAgIGlkOiByZXMuZGF0YSwKICAgICAgICAgICAgICBwbGF5bGlzdF9pZDogMCwKICAgICAgICAgICAgICBncm91cF9pZDogMCwKICAgICAgICAgICAgICBzdHJlYW1fdHZnX25hbWU6ICIiLAogICAgICAgICAgICAgIHN0cmVhbV90dmdfaWQ6ICIiLAogICAgICAgICAgICAgIHN0cmVhbV90dmdfbG9nbzogIiIsCiAgICAgICAgICAgICAgc3RyZWFtX29yZGVyOiAwLAogICAgICAgICAgICAgIHN0cmVhbV9pc19oaWRkZW46IDAsCiAgICAgICAgICAgICAgc2VyaWVfbmFtZTogIiIsCiAgICAgICAgICAgICAgc2VyaWVfc2Vhc29uOiAwLAogICAgICAgICAgICAgIHNlcmllX2VwaXNvZGU6IDAsCiAgICAgICAgICAgICAgc2VyaWVfdHJhaWxlcjogIiIsCiAgICAgICAgICAgICAgdG1kYl9pZDogIiIsCiAgICAgICAgICAgICAgdG1kYl9lcGlzb2RlX2lkOiAiIiwKICAgICAgICAgICAgfTsKICAgICAgICAgICAgdGhpcy5lZGl0b3IgPSB0cnVlOwogICAgICAgICAgfQogICAgICAgIH0pCiAgICAgICAgLmNhdGNoKCgpID0+IHsKICAgICAgICAgIHRoaXMuaXNMb2FkaW5nID0gZmFsc2U7CiAgICAgICAgICB0aGlzLiRub3RpZnkoCiAgICAgICAgICAgICJlcnJvciIsCiAgICAgICAgICAgIHRoaXMuJHQoInByb2ZpbGUuZmFpbGVkIiksCiAgICAgICAgICAgIHRoaXMuJHQoInh0cmVhbS5zZXJpZXMtbG9hZC1lcnJvciIpLAogICAgICAgICAgICAibGEtdXNlci1zaGllbGQiLAogICAgICAgICAgICB7IGR1cmF0aW9uOiA1MDAwLCBwZXJtYW5lbnQ6IGZhbHNlIH0KICAgICAgICAgICk7CiAgICAgICAgfSk7CiAgICB9LAogICAgZWRpdFN0cmVhbShzdHJlYW0pIHsKICAgICAgdGhpcy5zdHJlYW0gPSBPYmplY3QuYXNzaWduKHt9LCBzdHJlYW0pOwogICAgICB0aGlzLmVkaXRvciA9IHRydWU7CiAgICB9LAogICAgY2FuY2VsRWRpdG9yKCkgewogICAgICB0aGlzLmVkaXRvciA9IGZhbHNlOwogICAgfSwKICAgIHNhdmVFZGl0b3IoKSB7CiAgICAgIGxldCBzdHJlYW0gPSBPYmplY3QuYXNzaWduKHt9LCB0aGlzLnN0cmVhbSk7CiAgICAgIGRlbGV0ZSBzdHJlYW0uaWQ7CiAgICAgIGRlbGV0ZSBzdHJlYW0ucGxheWxpc3Q7CiAgICAgIGRlbGV0ZSBzdHJlYW0uZ3JvdXA7CgogICAgICBodHRwU2VydmljZQogICAgICAgIC5wdXQoYHNlcmllcy8ke3RoaXMuc3RyZWFtLmlkfWAsIHN0cmVhbSkKICAgICAgICAudGhlbigocmVzKSA9PiB7CiAgICAgICAgICBpZiAocmVzLnN0YXR1cyA9PT0gdHJ1ZSkgewogICAgICAgICAgICB0aGlzLiRub3RpZnkoCiAgICAgICAgICAgICAgInByaW1hcnkiLAogICAgICAgICAgICAgIHRoaXMuJHQoInByb2ZpbGUuc3VjY2VzcyIpLAogICAgICAgICAgICAgIHRoaXMuJHQoInh0cmVhbS5zZXJpZXMtc2F2ZS1zdWNjZXNzIiksCiAgICAgICAgICAgICAgImxhLXVzZXItc2hpZWxkIiwKICAgICAgICAgICAgICB7IGR1cmF0aW9uOiA1MDAwLCBwZXJtYW5lbnQ6IGZhbHNlIH0KICAgICAgICAgICAgKTsKICAgICAgICAgICAgdGhpcy5lZGl0b3IgPSBmYWxzZTsKICAgICAgICAgICAgdGhpcy5sb2FkU3RyZWFtcygpOwogICAgICAgICAgfQogICAgICAgIH0pCiAgICAgICAgLmNhdGNoKCgpID0+IHsKICAgICAgICAgIHRoaXMuJG5vdGlmeSgKICAgICAgICAgICAgImVycm9yIiwKICAgICAgICAgICAgdGhpcy4kdCgicHJvZmlsZS5mYWlsZWQiKSwKICAgICAgICAgICAgdGhpcy4kdCgieHRyZWFtLnNlcmllcy1zYXZlLWVycm9yIiksCiAgICAgICAgICAgICJsYS11c2VyLXNoaWVsZCIsCiAgICAgICAgICAgIHsgZHVyYXRpb246IDUwMDAsIHBlcm1hbmVudDogZmFsc2UgfQogICAgICAgICAgKTsKICAgICAgICB9KTsKICAgIH0sCiAgICBkZWxldGVTdHJlYW0oaWQpIHsKICAgICAgaHR0cFNlcnZpY2UKICAgICAgICAuZGVsZXRlKGBzZXJpZXMvJHtpZH1gKQogICAgICAgIC50aGVuKChyZXMpID0+IHsKICAgICAgICAgIGlmIChyZXMuc3RhdHVzID09PSB0cnVlKSB7CiAgICAgICAgICAgIHRoaXMuJG5vdGlmeSgKICAgICAgICAgICAgICAicHJpbWFyeSIsCiAgICAgICAgICAgICAgdGhpcy4kdCgicHJvZmlsZS5zdWNjZXNzIiksCiAgICAgICAgICAgICAgdGhpcy4kdCgieHRyZWFtLnNlcmllcy1kZWxldGUtc3VjY2VzcyIpLAogICAgICAgICAgICAgICJsYS11c2VyLXNoaWVsZCIsCiAgICAgICAgICAgICAgeyBkdXJhdGlvbjogNTAwMCwgcGVybWFuZW50OiBmYWxzZSB9CiAgICAgICAgICAgICk7CiAgICAgICAgICAgIHRoaXMubG9hZFN0cmVhbXMoKTsKICAgICAgICAgIH0KICAgICAgICB9KQogICAgICAgIC5jYXRjaCgoKSA9PiB7CiAgICAgICAgICB0aGlzLiRub3RpZnkoCiAgICAgICAgICAgICJlcnJvciIsCiAgICAgICAgICAgIHRoaXMuJHQoInByb2ZpbGUuZmFpbGVkIiksCiAgICAgICAgICAgIHRoaXMuJHQoInh0cmVhbS5zZXJpZXMtZGVsZXRlLWVycm9yIiksCiAgICAgICAgICAgICJsYS11c2VyLXNoaWVsZCIsCiAgICAgICAgICAgIHsgZHVyYXRpb246IDUwMDAsIHBlcm1hbmVudDogZmFsc2UgfQogICAgICAgICAgKTsKICAgICAgICB9KTsKICAgIH0sCiAgICBzZWFyY2hTdHJlYW0oc2VhcmNoKSB7CiAgICAgIGlmIChzZWFyY2gubGVuZ3RoID09PSAwKSB7CiAgICAgICAgdGhpcy5zZWFyY2ggPSBudWxsOwogICAgICB9IGVsc2UgewogICAgICAgIHRoaXMuc2VhcmNoID0gc2VhcmNoOwogICAgICB9CiAgICB9LAogICAgcHJpbnRTdHJlYW1zKCkgewogICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgic3RyZWFtcyIpLnByaW50KCk7CiAgICB9LAogICAgZm9ybWF0RGF0ZShkYXRlKSB7CiAgICAgIHJldHVybiBuZXcgRGF0ZShkYXRlKS50b0xvY2FsZVN0cmluZygKICAgICAgICB0aGlzLiR0KCJkYXRlLmxvY2FsZSIpLAogICAgICAgIHRoaXMuZGF0ZU9wdGlvbnMKICAgICAgKTsKICAgIH0sCiAgICBkb1RhYkNoYW5nZSh0YWIpIHsKICAgICAgdGhpcy5hY3RpdmVUYWIgPSB0YWI7CiAgICB9LAogIH0sCiAgYmVmb3JlTW91bnQoKSB7CiAgICB0aGlzLmxvYWRTdHJlYW1zKCk7CiAgICBFdmVudEJ1cy4kb24oInNlYXJjaCIsIHRoaXMuc2VhcmNoU3RyZWFtKTsKICAgIEV2ZW50QnVzLiRvbigicHJpbnQiLCB0aGlzLnByaW50U3RyZWFtcyk7CiAgICBFdmVudEJ1cy4kb24oInJlZnJlc2giLCB0aGlzLmxvYWRTdHJlYW1zKTsKICAgIEV2ZW50QnVzLiRvbigiYWRkIiwgdGhpcy5hZGRTdHJlYW0pOwogICAgRXZlbnRCdXMuJG9uKCJjYW5jZWwiLCB0aGlzLmNhbmNlbEVkaXRvcik7CiAgICBFdmVudEJ1cy4kb24oInNhdmUiLCB0aGlzLnNhdmVFZGl0b3IpOwogICAgRXZlbnRCdXMuJG9uKCJ0YWItY2hhbmdlIiwgdGhpcy5kb1RhYkNoYW5nZSk7CiAgfSwKICBiZWZvcmVEZXN0cm95KCkgewogICAgRXZlbnRCdXMuJG9mZigic2VhcmNoIiwgdGhpcy5zZWFyY2hTdHJlYW0pOwogICAgRXZlbnRCdXMuJG9mZigicHJpbnQiLCB0aGlzLnByaW50U3RyZWFtcyk7CiAgICBFdmVudEJ1cy4kb2ZmKCJyZWZyZXNoIiwgdGhpcy5sb2FkU3RyZWFtcyk7CiAgICBFdmVudEJ1cy4kb2ZmKCJhZGQiLCB0aGlzLmFkZFN0cmVhbSk7CiAgICBFdmVudEJ1cy4kb2ZmKCJjYW5jZWwiLCB0aGlzLmNhbmNlbEVkaXRvcik7CiAgICBFdmVudEJ1cy4kb2ZmKCJzYXZlIiwgdGhpcy5zYXZlRWRpdG9yKTsKICAgIEV2ZW50QnVzLiRvZmYoInRhYi1jaGFuZ2UiLCB0aGlzLmRvVGFiQ2hhbmdlKTsKICB9LAogIHdhdGNoOiB7CiAgICBmcm9tOiBmdW5jdGlvbiAodmFsKSB7CiAgICAgIEV2ZW50QnVzLiRlbWl0KCJ1cGRhdGUtZnJvbSIsIHZhbCk7CiAgICAgIGRvY3VtZW50LmJvZHkuc2Nyb2xsVG9wID0gMDsKICAgICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcCA9IDA7CiAgICB9LAogICAgdG86IGZ1bmN0aW9uICh2YWwpIHsKICAgICAgRXZlbnRCdXMuJGVtaXQoInVwZGF0ZS10byIsIHZhbCk7CiAgICB9LAogICAgdG90YWw6IGZ1bmN0aW9uICh2YWwpIHsKICAgICAgRXZlbnRCdXMuJGVtaXQoInVwZGF0ZS10b3RhbCIsIHZhbCk7CiAgICB9LAogICAgZWRpdG9yOiBmdW5jdGlvbiAodmFsKSB7CiAgICAgIEV2ZW50QnVzLiRlbWl0KCJ1cGRhdGUtZWRpdG9yIiwgdmFsKTsKICAgIH0sCiAgfSwKfTsK"},null]}