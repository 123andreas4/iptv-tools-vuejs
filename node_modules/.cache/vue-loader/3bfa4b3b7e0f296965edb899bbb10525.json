{"remainingRequest":"/home/ernst/Desktop/IPTV-Tools/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/ernst/Desktop/IPTV-Tools/src/views/app/user/profile.vue?vue&type=template&id=a15471a6&scoped=true&","dependencies":[{"path":"/home/ernst/Desktop/IPTV-Tools/src/views/app/user/profile.vue","mtime":1622302108077},{"path":"/home/ernst/Desktop/IPTV-Tools/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/ernst/Desktop/IPTV-Tools/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/ernst/Desktop/IPTV-Tools/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/ernst/Desktop/IPTV-Tools/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}