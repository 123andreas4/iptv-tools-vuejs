{"remainingRequest":"/media/ernst/63bce43c-5e51-4bf1-a611-3afdf32ac6f6/VueJS/IPTV-Tools/node_modules/babel-loader/lib/index.js!/media/ernst/63bce43c-5e51-4bf1-a611-3afdf32ac6f6/VueJS/IPTV-Tools/node_modules/eslint-loader/index.js??ref--13-0!/media/ernst/63bce43c-5e51-4bf1-a611-3afdf32ac6f6/VueJS/IPTV-Tools/src/store/modules/xdpro.js","dependencies":[{"path":"/media/ernst/63bce43c-5e51-4bf1-a611-3afdf32ac6f6/VueJS/IPTV-Tools/src/store/modules/xdpro.js","mtime":1624631684209},{"path":"/media/ernst/63bce43c-5e51-4bf1-a611-3afdf32ac6f6/VueJS/IPTV-Tools/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/media/ernst/63bce43c-5e51-4bf1-a611-3afdf32ac6f6/VueJS/IPTV-Tools/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/media/ernst/63bce43c-5e51-4bf1-a611-3afdf32ac6f6/VueJS/IPTV-Tools/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:LyogZXNsaW50LWRpc2FibGUgKi8KaW1wb3J0IHsgaHR0cFNlcnZpY2UgfSBmcm9tICIuLi8uLi9zZXJ2aWNlcy9odHRwIjsKdmFyIHN0YXRlID0gewogIHhkUHJvSW5zdGFuY2VzOiBbXQp9Owp2YXIgZ2V0dGVycyA9IHsKICB4ZFByb0luc3RhbmNlczogZnVuY3Rpb24geGRQcm9JbnN0YW5jZXMoc3RhdGUpIHsKICAgIHJldHVybiBzdGF0ZS54ZFByb0luc3RhbmNlczsKICB9Cn07CnZhciBtdXRhdGlvbnMgPSB7CiAgc2V0eGRQcm9JbnN0YW5jZXM6IGZ1bmN0aW9uIHNldHhkUHJvSW5zdGFuY2VzKHN0YXRlLCBwYXlsb2FkKSB7CiAgICBzdGF0ZS54ZFByb0luc3RhbmNlcyA9IHBheWxvYWQ7CiAgfQp9Owp2YXIgYWN0aW9ucyA9IHsKICBsb2FkeGRQcm9JbnN0YW5jZXM6IGZ1bmN0aW9uIGxvYWR4ZFByb0luc3RhbmNlcyhfcmVmKSB7CiAgICB2YXIgY29tbWl0ID0gX3JlZi5jb21taXQ7CiAgICBodHRwU2VydmljZS5nZXQoInhkLXByby9pbnN0YW5jZXMiKS50aGVuKGZ1bmN0aW9uIChyZXMpIHsKICAgICAgaWYgKHJlcy5kYXRhICYmIHJlcy5kYXRhICE9PSBudWxsKSB7CiAgICAgICAgY29tbWl0KCJzZXR4ZFByb0luc3RhbmNlcyIsIHJlcy5kYXRhKTsKICAgICAgfSBlbHNlIHsKICAgICAgICBjb21taXQoInNldHhkUHJvSW5zdGFuY2VzIiwgW10pOwogICAgICB9CiAgICB9KS5jYXRjaChmdW5jdGlvbiAoKSB7CiAgICAgIGNvbW1pdCgic2V0eGRQcm9JbnN0YW5jZXMiLCBbXSk7CiAgICB9KTsKICB9LAogIGFkZHhkUHJvRG93bmxvYWQ6IGZ1bmN0aW9uIGFkZHhkUHJvRG93bmxvYWQoX3JlZjIsIHBheWxvYWQpIHsKICAgIHZhciBjb21taXQgPSBfcmVmMi5jb21taXQ7CgogICAgaWYgKEFycmF5LmlzQXJyYXkocGF5bG9hZCkpIHsKICAgICAgcmV0dXJuIGh0dHBTZXJ2aWNlLnBvc3QoInhkLXByby9kb3dubG9hZCIsIHBheWxvYWQpOwogICAgfSBlbHNlIHsKICAgICAgcmV0dXJuIGh0dHBTZXJ2aWNlLnBvc3QoInhkLXByby9kb3dubG9hZCIsIFtwYXlsb2FkXSk7CiAgICB9CiAgfQp9OwpleHBvcnQgZGVmYXVsdCB7CiAgc3RhdGU6IHN0YXRlLAogIGdldHRlcnM6IGdldHRlcnMsCiAgbXV0YXRpb25zOiBtdXRhdGlvbnMsCiAgYWN0aW9uczogYWN0aW9ucwp9Ow=="},{"version":3,"sources":["/media/ernst/63bce43c-5e51-4bf1-a611-3afdf32ac6f6/VueJS/IPTV-Tools/src/store/modules/xdpro.js"],"names":["httpService","state","xdProInstances","getters","mutations","setxdProInstances","payload","actions","loadxdProInstances","commit","get","then","res","data","catch","addxdProDownload","Array","isArray","post"],"mappings":"AAAA;AACA,SAASA,WAAT,QAA4B,qBAA5B;AAEA,IAAMC,KAAK,GAAG;AACZC,EAAAA,cAAc,EAAE;AADJ,CAAd;AAIA,IAAMC,OAAO,GAAG;AACdD,EAAAA,cADc,0BACCD,KADD,EACQ;AACpB,WAAOA,KAAK,CAACC,cAAb;AACD;AAHa,CAAhB;AAMA,IAAME,SAAS,GAAG;AAChBC,EAAAA,iBADgB,6BACEJ,KADF,EACSK,OADT,EACkB;AAChCL,IAAAA,KAAK,CAACC,cAAN,GAAuBI,OAAvB;AACD;AAHe,CAAlB;AAMA,IAAMC,OAAO,GAAG;AACdC,EAAAA,kBADc,oCACiB;AAAA,QAAVC,MAAU,QAAVA,MAAU;AAC7BT,IAAAA,WAAW,CACVU,GADD,CACK,kBADL,EAECC,IAFD,CAEM,UAACC,GAAD,EAAS;AACb,UAAIA,GAAG,CAACC,IAAJ,IAAYD,GAAG,CAACC,IAAJ,KAAa,IAA7B,EAAmC;AACjCJ,QAAAA,MAAM,CAAC,mBAAD,EAAsBG,GAAG,CAACC,IAA1B,CAAN;AACD,OAFD,MAEO;AACLJ,QAAAA,MAAM,CAAC,mBAAD,EAAsB,EAAtB,CAAN;AACD;AACF,KARD,EASCK,KATD,CASO,YAAM;AACXL,MAAAA,MAAM,CAAC,mBAAD,EAAsB,EAAtB,CAAN;AACD,KAXD;AAYD,GAda;AAedM,EAAAA,gBAfc,mCAeeT,OAff,EAewB;AAAA,QAAnBG,MAAmB,SAAnBA,MAAmB;;AACpC,QAAIO,KAAK,CAACC,OAAN,CAAcX,OAAd,CAAJ,EAA4B;AAC1B,aAAON,WAAW,CAACkB,IAAZ,CAAiB,iBAAjB,EAAoCZ,OAApC,CAAP;AACD,KAFD,MAEO;AACL,aAAON,WAAW,CAACkB,IAAZ,CAAiB,iBAAjB,EAAoC,CAACZ,OAAD,CAApC,CAAP;AACD;AACF;AArBa,CAAhB;AAwBA,eAAe;AACbL,EAAAA,KAAK,EAALA,KADa;AAEbE,EAAAA,OAAO,EAAPA,OAFa;AAGbC,EAAAA,SAAS,EAATA,SAHa;AAIbG,EAAAA,OAAO,EAAPA;AAJa,CAAf","sourcesContent":["/* eslint-disable */\nimport { httpService } from \"../../services/http\";\n\nconst state = {\n  xdProInstances: [],\n};\n\nconst getters = {\n  xdProInstances(state) {\n    return state.xdProInstances;\n  },\n};\n\nconst mutations = {\n  setxdProInstances(state, payload) {\n    state.xdProInstances = payload;\n  },\n};\n\nconst actions = {\n  loadxdProInstances({ commit }) {\n    httpService\n    .get(\"xd-pro/instances\")\n    .then((res) => {\n      if (res.data && res.data !== null) {\n        commit(\"setxdProInstances\", res.data);\n      } else {\n        commit(\"setxdProInstances\", []);\n      }\n    })\n    .catch(() => {\n      commit(\"setxdProInstances\", []);\n    });\n  },\n  addxdProDownload({ commit }, payload) {\n    if (Array.isArray(payload)) {\n      return httpService.post(\"xd-pro/download\", payload);\n    } else {\n      return httpService.post(\"xd-pro/download\", [payload]);\n    }\n  }\n};\n\nexport default {\n  state,\n  getters,\n  mutations,\n  actions,\n};\n"]}]}