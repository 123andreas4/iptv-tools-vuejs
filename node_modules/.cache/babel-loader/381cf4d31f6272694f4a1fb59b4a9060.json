{"remainingRequest":"/media/ernst/63bce43c-5e51-4bf1-a611-3afdf32ac6f6/VueJS/IPTV-Tools/node_modules/thread-loader/dist/cjs.js!/media/ernst/63bce43c-5e51-4bf1-a611-3afdf32ac6f6/VueJS/IPTV-Tools/node_modules/babel-loader/lib/index.js!/media/ernst/63bce43c-5e51-4bf1-a611-3afdf32ac6f6/VueJS/IPTV-Tools/node_modules/bootstrap-vue/esm/mixins/form-text.js","dependencies":[{"path":"/media/ernst/63bce43c-5e51-4bf1-a611-3afdf32ac6f6/VueJS/IPTV-Tools/node_modules/bootstrap-vue/esm/mixins/form-text.js","mtime":499162500000},{"path":"/media/ernst/63bce43c-5e51-4bf1-a611-3afdf32ac6f6/VueJS/IPTV-Tools/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/media/ernst/63bce43c-5e51-4bf1-a611-3afdf32ac6f6/VueJS/IPTV-Tools/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/media/ernst/63bce43c-5e51-4bf1-a611-3afdf32ac6f6/VueJS/IPTV-Tools/node_modules/babel-loader/lib/index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmtleXMuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5zeW1ib2wuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5maWx0ZXIuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvd2ViLmRvbS1jb2xsZWN0aW9ucy5mb3ItZWFjaC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3JzLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnRyaW0uanMiOwoKZnVuY3Rpb24gb3duS2V5cyhvYmplY3QsIGVudW1lcmFibGVPbmx5KSB7CiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpOwoKICBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgewogICAgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7CiAgICBpZiAoZW51bWVyYWJsZU9ubHkpIHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7CiAgICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlOwogICAgfSk7CiAgICBrZXlzLnB1c2guYXBwbHkoa2V5cywgc3ltYm9scyk7CiAgfQoKICByZXR1cm4ga2V5czsKfQoKZnVuY3Rpb24gX29iamVjdFNwcmVhZCh0YXJnZXQpIHsKICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgewogICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307CgogICAgaWYgKGkgJSAyKSB7CiAgICAgIG93bktleXMoT2JqZWN0KHNvdXJjZSksIHRydWUpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgewogICAgICAgIF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pOwogICAgICB9KTsKICAgIH0gZWxzZSBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMpIHsKICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKTsKICAgIH0gZWxzZSB7CiAgICAgIG93bktleXMoT2JqZWN0KHNvdXJjZSkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgewogICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpOwogICAgICB9KTsKICAgIH0KICB9CgogIHJldHVybiB0YXJnZXQ7Cn0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsKICBpZiAoa2V5IGluIG9iaikgewogICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7CiAgICAgIHZhbHVlOiB2YWx1ZSwKICAgICAgZW51bWVyYWJsZTogdHJ1ZSwKICAgICAgY29uZmlndXJhYmxlOiB0cnVlLAogICAgICB3cml0YWJsZTogdHJ1ZQogICAgfSk7CiAgfSBlbHNlIHsKICAgIG9ialtrZXldID0gdmFsdWU7CiAgfQoKICByZXR1cm4gb2JqOwp9CgppbXBvcnQgeyBWdWUgfSBmcm9tICcuLi92dWUnOwppbXBvcnQgeyBFVkVOVF9OQU1FX0JMVVIsIEVWRU5UX05BTUVfQ0hBTkdFLCBFVkVOVF9OQU1FX0lOUFVULCBFVkVOVF9OQU1FX1VQREFURSwgSE9PS19FVkVOVF9OQU1FX0JFRk9SRV9ERVNUUk9ZIH0gZnJvbSAnLi4vY29uc3RhbnRzL2V2ZW50cyc7CmltcG9ydCB7IFBST1BfVFlQRV9CT09MRUFOLCBQUk9QX1RZUEVfQk9PTEVBTl9TVFJJTkcsIFBST1BfVFlQRV9GVU5DVElPTiwgUFJPUF9UWVBFX05VTUJFUl9TVFJJTkcsIFBST1BfVFlQRV9TVFJJTkcgfSBmcm9tICcuLi9jb25zdGFudHMvcHJvcHMnOwppbXBvcnQgeyBhdHRlbXB0Qmx1ciwgYXR0ZW1wdEZvY3VzIH0gZnJvbSAnLi4vdXRpbHMvZG9tJzsKaW1wb3J0IHsgc3RvcEV2ZW50IH0gZnJvbSAnLi4vdXRpbHMvZXZlbnRzJzsKaW1wb3J0IHsgbWF0aE1heCB9IGZyb20gJy4uL3V0aWxzL21hdGgnOwppbXBvcnQgeyBtYWtlTW9kZWxNaXhpbiB9IGZyb20gJy4uL3V0aWxzL21vZGVsJzsKaW1wb3J0IHsgdG9JbnRlZ2VyLCB0b0Zsb2F0IH0gZnJvbSAnLi4vdXRpbHMvbnVtYmVyJzsKaW1wb3J0IHsgc29ydEtleXMgfSBmcm9tICcuLi91dGlscy9vYmplY3QnOwppbXBvcnQgeyBoYXNQcm9wRnVuY3Rpb24sIG1ha2VQcm9wLCBtYWtlUHJvcHNDb25maWd1cmFibGUgfSBmcm9tICcuLi91dGlscy9wcm9wcyc7CmltcG9ydCB7IHRvU3RyaW5nIH0gZnJvbSAnLi4vdXRpbHMvc3RyaW5nJzsgLy8gLS0tIENvbnN0YW50cyAtLS0KCnZhciBfbWFrZU1vZGVsTWl4aW4gPSBtYWtlTW9kZWxNaXhpbigndmFsdWUnLCB7CiAgdHlwZTogUFJPUF9UWVBFX05VTUJFUl9TVFJJTkcsCiAgZGVmYXVsdFZhbHVlOiAnJywKICBldmVudDogRVZFTlRfTkFNRV9VUERBVEUKfSksCiAgICBtb2RlbE1peGluID0gX21ha2VNb2RlbE1peGluLm1peGluLAogICAgbW9kZWxQcm9wcyA9IF9tYWtlTW9kZWxNaXhpbi5wcm9wcywKICAgIE1PREVMX1BST1BfTkFNRSA9IF9tYWtlTW9kZWxNaXhpbi5wcm9wLAogICAgTU9ERUxfRVZFTlRfTkFNRSA9IF9tYWtlTW9kZWxNaXhpbi5ldmVudDsKCmV4cG9ydCB7IE1PREVMX1BST1BfTkFNRSwgTU9ERUxfRVZFTlRfTkFNRSB9OyAvLyAtLS0gUHJvcHMgLS0tCgpleHBvcnQgdmFyIHByb3BzID0gbWFrZVByb3BzQ29uZmlndXJhYmxlKHNvcnRLZXlzKF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgbW9kZWxQcm9wcyksIHt9LCB7CiAgYXJpYUludmFsaWQ6IG1ha2VQcm9wKFBST1BfVFlQRV9CT09MRUFOX1NUUklORywgZmFsc2UpLAogIGF1dG9jb21wbGV0ZTogbWFrZVByb3AoUFJPUF9UWVBFX1NUUklORyksCiAgLy8gRGVib3VuY2UgdGltZW91dCAoaW4gbXMpLiBOb3QgYXBwbGljYWJsZSB3aXRoIGBsYXp5YCBwcm9wCiAgZGVib3VuY2U6IG1ha2VQcm9wKFBST1BfVFlQRV9OVU1CRVJfU1RSSU5HLCAwKSwKICBmb3JtYXR0ZXI6IG1ha2VQcm9wKFBST1BfVFlQRV9GVU5DVElPTiksCiAgLy8gT25seSB1cGRhdGUgdGhlIGB2LW1vZGVsYCBvbiBibHVyL2NoYW5nZSBldmVudHMKICBsYXp5OiBtYWtlUHJvcChQUk9QX1RZUEVfQk9PTEVBTiwgZmFsc2UpLAogIGxhenlGb3JtYXR0ZXI6IG1ha2VQcm9wKFBST1BfVFlQRV9CT09MRUFOLCBmYWxzZSksCiAgbnVtYmVyOiBtYWtlUHJvcChQUk9QX1RZUEVfQk9PTEVBTiwgZmFsc2UpLAogIHBsYWNlaG9sZGVyOiBtYWtlUHJvcChQUk9QX1RZUEVfU1RSSU5HKSwKICBwbGFpbnRleHQ6IG1ha2VQcm9wKFBST1BfVFlQRV9CT09MRUFOLCBmYWxzZSksCiAgcmVhZG9ubHk6IG1ha2VQcm9wKFBST1BfVFlQRV9CT09MRUFOLCBmYWxzZSksCiAgdHJpbTogbWFrZVByb3AoUFJPUF9UWVBFX0JPT0xFQU4sIGZhbHNlKQp9KSksICdmb3JtVGV4dENvbnRyb2xzJyk7IC8vIC0tLSBNaXhpbiAtLS0KLy8gQHZ1ZS9jb21wb25lbnQKCmV4cG9ydCB2YXIgZm9ybVRleHRNaXhpbiA9IFZ1ZS5leHRlbmQoewogIG1peGluczogW21vZGVsTWl4aW5dLAogIHByb3BzOiBwcm9wcywKICBkYXRhOiBmdW5jdGlvbiBkYXRhKCkgewogICAgdmFyIHZhbHVlID0gdGhpc1tNT0RFTF9QUk9QX05BTUVdOwogICAgcmV0dXJuIHsKICAgICAgbG9jYWxWYWx1ZTogdG9TdHJpbmcodmFsdWUpLAogICAgICB2TW9kZWxWYWx1ZTogdGhpcy5tb2RpZnlWYWx1ZSh2YWx1ZSkKICAgIH07CiAgfSwKICBjb21wdXRlZDogewogICAgY29tcHV0ZWRDbGFzczogZnVuY3Rpb24gY29tcHV0ZWRDbGFzcygpIHsKICAgICAgdmFyIHBsYWludGV4dCA9IHRoaXMucGxhaW50ZXh0LAogICAgICAgICAgdHlwZSA9IHRoaXMudHlwZTsKICAgICAgdmFyIGlzUmFuZ2UgPSB0eXBlID09PSAncmFuZ2UnOwogICAgICB2YXIgaXNDb2xvciA9IHR5cGUgPT09ICdjb2xvcic7CiAgICAgIHJldHVybiBbewogICAgICAgIC8vIFJhbmdlIGlucHV0IG5lZWRzIGNsYXNzIGBjdXN0b20tcmFuZ2VgCiAgICAgICAgJ2N1c3RvbS1yYW5nZSc6IGlzUmFuZ2UsCiAgICAgICAgLy8gYHBsYWludGV4dGAgbm90IHN1cHBvcnRlZCBieSBgdHlwZT0icmFuZ2UiYCBvciBgdHlwZT0iY29sb3IiYAogICAgICAgICdmb3JtLWNvbnRyb2wtcGxhaW50ZXh0JzogcGxhaW50ZXh0ICYmICFpc1JhbmdlICYmICFpc0NvbG9yLAogICAgICAgIC8vIGBmb3JtLWNvbnRyb2xgIG5vdCB1c2VkIGJ5IGB0eXBlPSJyYW5nZSJgIG9yIGBwbGFpbnRleHRgCiAgICAgICAgLy8gQWx3YXlzIHVzZWQgYnkgYHR5cGU9ImNvbG9yImAKICAgICAgICAnZm9ybS1jb250cm9sJzogaXNDb2xvciB8fCAhcGxhaW50ZXh0ICYmICFpc1JhbmdlCiAgICAgIH0sIHRoaXMuc2l6ZUZvcm1DbGFzcywgdGhpcy5zdGF0ZUNsYXNzXTsKICAgIH0sCiAgICBjb21wdXRlZERlYm91bmNlOiBmdW5jdGlvbiBjb21wdXRlZERlYm91bmNlKCkgewogICAgICAvLyBFbnN1cmUgd2UgaGF2ZSBhIHBvc2l0aXZlIG51bWJlciBlcXVhbCB0byBvciBncmVhdGVyIHRoYW4gMAogICAgICByZXR1cm4gbWF0aE1heCh0b0ludGVnZXIodGhpcy5kZWJvdW5jZSwgMCksIDApOwogICAgfSwKICAgIGhhc0Zvcm1hdHRlcjogZnVuY3Rpb24gaGFzRm9ybWF0dGVyKCkgewogICAgICByZXR1cm4gaGFzUHJvcEZ1bmN0aW9uKHRoaXMuZm9ybWF0dGVyKTsKICAgIH0KICB9LAogIHdhdGNoOiBfZGVmaW5lUHJvcGVydHkoe30sIE1PREVMX1BST1BfTkFNRSwgZnVuY3Rpb24gKG5ld1ZhbHVlKSB7CiAgICB2YXIgc3RyaW5naWZ5VmFsdWUgPSB0b1N0cmluZyhuZXdWYWx1ZSk7CiAgICB2YXIgbW9kaWZpZWRWYWx1ZSA9IHRoaXMubW9kaWZ5VmFsdWUobmV3VmFsdWUpOwoKICAgIGlmIChzdHJpbmdpZnlWYWx1ZSAhPT0gdGhpcy5sb2NhbFZhbHVlIHx8IG1vZGlmaWVkVmFsdWUgIT09IHRoaXMudk1vZGVsVmFsdWUpIHsKICAgICAgLy8gQ2xlYXIgYW55IHBlbmRpbmcgZGVib3VuY2UgdGltZW91dCwgYXMgd2UgYXJlIG92ZXJ3cml0aW5nIHRoZSB1c2VyIGlucHV0CiAgICAgIHRoaXMuY2xlYXJEZWJvdW5jZSgpOyAvLyBVcGRhdGUgdGhlIGxvY2FsIHZhbHVlcwoKICAgICAgdGhpcy5sb2NhbFZhbHVlID0gc3RyaW5naWZ5VmFsdWU7CiAgICAgIHRoaXMudk1vZGVsVmFsdWUgPSBtb2RpZmllZFZhbHVlOwogICAgfQogIH0pLAogIGNyZWF0ZWQ6IGZ1bmN0aW9uIGNyZWF0ZWQoKSB7CiAgICAvLyBDcmVhdGUgcHJpdmF0ZSBub24tcmVhY3RpdmUgcHJvcHMKICAgIHRoaXMuJF9pbnB1dERlYm91bmNlVGltZXIgPSBudWxsOwogIH0sCiAgbW91bnRlZDogZnVuY3Rpb24gbW91bnRlZCgpIHsKICAgIC8vIFNldCB1cCBkZXN0cm95IGhhbmRsZXIKICAgIHRoaXMuJG9uKEhPT0tfRVZFTlRfTkFNRV9CRUZPUkVfREVTVFJPWSwgdGhpcy5jbGVhckRlYm91bmNlKTsKICB9LAogIGJlZm9yZURlc3Ryb3k6IGZ1bmN0aW9uIGJlZm9yZURlc3Ryb3koKSB7CiAgICB0aGlzLmNsZWFyRGVib3VuY2UoKTsKICB9LAogIG1ldGhvZHM6IHsKICAgIGNsZWFyRGVib3VuY2U6IGZ1bmN0aW9uIGNsZWFyRGVib3VuY2UoKSB7CiAgICAgIGNsZWFyVGltZW91dCh0aGlzLiRfaW5wdXREZWJvdW5jZVRpbWVyKTsKICAgICAgdGhpcy4kX2lucHV0RGVib3VuY2VUaW1lciA9IG51bGw7CiAgICB9LAogICAgZm9ybWF0VmFsdWU6IGZ1bmN0aW9uIGZvcm1hdFZhbHVlKHZhbHVlLCBldmVudCkgewogICAgICB2YXIgZm9yY2UgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IGZhbHNlOwogICAgICB2YWx1ZSA9IHRvU3RyaW5nKHZhbHVlKTsKCiAgICAgIGlmICh0aGlzLmhhc0Zvcm1hdHRlciAmJiAoIXRoaXMubGF6eUZvcm1hdHRlciB8fCBmb3JjZSkpIHsKICAgICAgICB2YWx1ZSA9IHRoaXMuZm9ybWF0dGVyKHZhbHVlLCBldmVudCk7CiAgICAgIH0KCiAgICAgIHJldHVybiB2YWx1ZTsKICAgIH0sCiAgICBtb2RpZnlWYWx1ZTogZnVuY3Rpb24gbW9kaWZ5VmFsdWUodmFsdWUpIHsKICAgICAgdmFsdWUgPSB0b1N0cmluZyh2YWx1ZSk7IC8vIEVtdWxhdGUgYC50cmltYCBtb2RpZmllciBiZWhhdmlvdXIKCiAgICAgIGlmICh0aGlzLnRyaW0pIHsKICAgICAgICB2YWx1ZSA9IHZhbHVlLnRyaW0oKTsKICAgICAgfSAvLyBFbXVsYXRlIGAubnVtYmVyYCBtb2RpZmllciBiZWhhdmlvdXIKCgogICAgICBpZiAodGhpcy5udW1iZXIpIHsKICAgICAgICB2YWx1ZSA9IHRvRmxvYXQodmFsdWUsIHZhbHVlKTsKICAgICAgfQoKICAgICAgcmV0dXJuIHZhbHVlOwogICAgfSwKICAgIHVwZGF0ZVZhbHVlOiBmdW5jdGlvbiB1cGRhdGVWYWx1ZSh2YWx1ZSkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgdmFyIGZvcmNlID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBmYWxzZTsKICAgICAgdmFyIGxhenkgPSB0aGlzLmxhenk7CgogICAgICBpZiAobGF6eSAmJiAhZm9yY2UpIHsKICAgICAgICByZXR1cm47CiAgICAgIH0gLy8gTWFrZSBzdXJlIHRvIGFsd2F5cyBjbGVhciB0aGUgZGVib3VuY2Ugd2hlbiBgdXBkYXRlVmFsdWUoKWAKICAgICAgLy8gaXMgY2FsbGVkLCBldmVuIHdoZW4gdGhlIHYtbW9kZWwgaGFzbid0IGNoYW5nZWQKCgogICAgICB0aGlzLmNsZWFyRGVib3VuY2UoKTsgLy8gRGVmaW5lIHRoZSBzaGFyZWQgdXBkYXRlIGxvZ2ljIGluIGEgbWV0aG9kIHRvIGJlIGFibGUgdG8gdXNlCiAgICAgIC8vIGl0IGZvciBpbW1lZGlhdGUgYW5kIGRlYm91bmNlZCB2YWx1ZSBjaGFuZ2VzCgogICAgICB2YXIgZG9VcGRhdGUgPSBmdW5jdGlvbiBkb1VwZGF0ZSgpIHsKICAgICAgICB2YWx1ZSA9IF90aGlzLm1vZGlmeVZhbHVlKHZhbHVlKTsKCiAgICAgICAgaWYgKHZhbHVlICE9PSBfdGhpcy52TW9kZWxWYWx1ZSkgewogICAgICAgICAgX3RoaXMudk1vZGVsVmFsdWUgPSB2YWx1ZTsKCiAgICAgICAgICBfdGhpcy4kZW1pdChNT0RFTF9FVkVOVF9OQU1FLCB2YWx1ZSk7CiAgICAgICAgfSBlbHNlIGlmIChfdGhpcy5oYXNGb3JtYXR0ZXIpIHsKICAgICAgICAgIC8vIFdoZW4gdGhlIGB2TW9kZWxWYWx1ZWAgaGFzbid0IGNoYW5nZWQgYnV0IHRoZSBhY3R1YWwgaW5wdXQgdmFsdWUKICAgICAgICAgIC8vIGlzIG91dCBvZiBzeW5jLCBtYWtlIHN1cmUgdG8gY2hhbmdlIGl0IHRvIHRoZSBnaXZlbiBvbmUKICAgICAgICAgIC8vIFVzdWFsbHkgY2F1c2VkIGJ5IGJyb3dzZXIgYXV0b2NvbXBsZXRlIGFuZCBob3cgaXQgdHJpZ2dlcnMgdGhlCiAgICAgICAgICAvLyBjaGFuZ2Ugb3IgaW5wdXQgZXZlbnQsIG9yIGRlcGVuZGluZyBvbiB0aGUgZm9ybWF0dGVyIGZ1bmN0aW9uCiAgICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vYm9vdHN0cmFwLXZ1ZS9ib290c3RyYXAtdnVlL2lzc3Vlcy8yNjU3CiAgICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vYm9vdHN0cmFwLXZ1ZS9ib290c3RyYXAtdnVlL2lzc3Vlcy8zNDk4CgogICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQ6IGhhcmQgdG8gdGVzdCAqLwogICAgICAgICAgdmFyICRpbnB1dCA9IF90aGlzLiRyZWZzLmlucHV0OwogICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmOiBoYXJkIHRvIHRlc3Qgb3V0IG9mIHN5bmMgdmFsdWUgKi8KCiAgICAgICAgICBpZiAoJGlucHV0ICYmIHZhbHVlICE9PSAkaW5wdXQudmFsdWUpIHsKICAgICAgICAgICAgJGlucHV0LnZhbHVlID0gdmFsdWU7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9OyAvLyBPbmx5IGRlYm91bmNlIHRoZSB2YWx1ZSB1cGRhdGUgd2hlbiBhIHZhbHVlIGdyZWF0ZXIgdGhhbiBgMGAKICAgICAgLy8gaXMgc2V0IGFuZCB3ZSBhcmUgbm90IGluIGxhenkgbW9kZSBvciB0aGlzIGlzIGEgZm9yY2VkIHVwZGF0ZQoKCiAgICAgIHZhciBkZWJvdW5jZSA9IHRoaXMuY29tcHV0ZWREZWJvdW5jZTsKCiAgICAgIGlmIChkZWJvdW5jZSA+IDAgJiYgIWxhenkgJiYgIWZvcmNlKSB7CiAgICAgICAgdGhpcy4kX2lucHV0RGVib3VuY2VUaW1lciA9IHNldFRpbWVvdXQoZG9VcGRhdGUsIGRlYm91bmNlKTsKICAgICAgfSBlbHNlIHsKICAgICAgICAvLyBJbW1lZGlhdGVseSB1cGRhdGUgdGhlIHYtbW9kZWwKICAgICAgICBkb1VwZGF0ZSgpOwogICAgICB9CiAgICB9LAogICAgb25JbnB1dDogZnVuY3Rpb24gb25JbnB1dChldmVudCkgewogICAgICAvLyBgZXZlbnQudGFyZ2V0LmNvbXBvc2luZ2AgaXMgc2V0IGJ5IFZ1ZQogICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vdnVlanMvdnVlL2Jsb2IvZGV2L3NyYy9wbGF0Zm9ybXMvd2ViL3J1bnRpbWUvZGlyZWN0aXZlcy9tb2RlbC5qcwogICAgICAvLyBUT0RPOiBJcyB0aGlzIG5lZWRlZCBub3cgd2l0aCB0aGUgbGF0ZXN0IFZ1ZT8KCiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZjogaGFyZCB0byB0ZXN0IGNvbXBvc2l0aW9uIGV2ZW50cyAqLwogICAgICBpZiAoZXZlbnQudGFyZ2V0LmNvbXBvc2luZykgewogICAgICAgIHJldHVybjsKICAgICAgfQoKICAgICAgdmFyIHZhbHVlID0gZXZlbnQudGFyZ2V0LnZhbHVlOwogICAgICB2YXIgZm9ybWF0dGVkVmFsdWUgPSB0aGlzLmZvcm1hdFZhbHVlKHZhbHVlLCBldmVudCk7IC8vIEV4aXQgd2hlbiB0aGUgYGZvcm1hdHRlcmAgZnVuY3Rpb24gc3RyaWN0bHkgcmV0dXJuZWQgYGZhbHNlYAogICAgICAvLyBvciBwcmV2ZW50ZWQgdGhlIGlucHV0IGV2ZW50CgogICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqLwoKICAgICAgaWYgKGZvcm1hdHRlZFZhbHVlID09PSBmYWxzZSB8fCBldmVudC5kZWZhdWx0UHJldmVudGVkKSB7CiAgICAgICAgc3RvcEV2ZW50KGV2ZW50LCB7CiAgICAgICAgICBwcm9wYWdhdGlvbjogZmFsc2UKICAgICAgICB9KTsKICAgICAgICByZXR1cm47CiAgICAgIH0KCiAgICAgIHRoaXMubG9jYWxWYWx1ZSA9IGZvcm1hdHRlZFZhbHVlOwogICAgICB0aGlzLnVwZGF0ZVZhbHVlKGZvcm1hdHRlZFZhbHVlKTsKICAgICAgdGhpcy4kZW1pdChFVkVOVF9OQU1FX0lOUFVULCBmb3JtYXR0ZWRWYWx1ZSk7CiAgICB9LAogICAgb25DaGFuZ2U6IGZ1bmN0aW9uIG9uQ2hhbmdlKGV2ZW50KSB7CiAgICAgIHZhciB2YWx1ZSA9IGV2ZW50LnRhcmdldC52YWx1ZTsKICAgICAgdmFyIGZvcm1hdHRlZFZhbHVlID0gdGhpcy5mb3JtYXRWYWx1ZSh2YWx1ZSwgZXZlbnQpOyAvLyBFeGl0IHdoZW4gdGhlIGBmb3JtYXR0ZXJgIGZ1bmN0aW9uIHN0cmljdGx5IHJldHVybmVkIGBmYWxzZWAKICAgICAgLy8gb3IgcHJldmVudGVkIHRoZSBpbnB1dCBldmVudAoKICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi8KCiAgICAgIGlmIChmb3JtYXR0ZWRWYWx1ZSA9PT0gZmFsc2UgfHwgZXZlbnQuZGVmYXVsdFByZXZlbnRlZCkgewogICAgICAgIHN0b3BFdmVudChldmVudCwgewogICAgICAgICAgcHJvcGFnYXRpb246IGZhbHNlCiAgICAgICAgfSk7CiAgICAgICAgcmV0dXJuOwogICAgICB9CgogICAgICB0aGlzLmxvY2FsVmFsdWUgPSBmb3JtYXR0ZWRWYWx1ZTsKICAgICAgdGhpcy51cGRhdGVWYWx1ZShmb3JtYXR0ZWRWYWx1ZSwgdHJ1ZSk7CiAgICAgIHRoaXMuJGVtaXQoRVZFTlRfTkFNRV9DSEFOR0UsIGZvcm1hdHRlZFZhbHVlKTsKICAgIH0sCiAgICBvbkJsdXI6IGZ1bmN0aW9uIG9uQmx1cihldmVudCkgewogICAgICAvLyBBcHBseSB0aGUgYGxvY2FsVmFsdWVgIG9uIGJsdXIgdG8gcHJldmVudCBjdXJzb3IganVtcHMKICAgICAgLy8gb24gbW9iaWxlIGJyb3dzZXJzIChlLmcuIGNhdXNlZCBieSBhdXRvY29tcGxldGUpCiAgICAgIHZhciB2YWx1ZSA9IGV2ZW50LnRhcmdldC52YWx1ZTsKICAgICAgdmFyIGZvcm1hdHRlZFZhbHVlID0gdGhpcy5mb3JtYXRWYWx1ZSh2YWx1ZSwgZXZlbnQsIHRydWUpOwoKICAgICAgaWYgKGZvcm1hdHRlZFZhbHVlICE9PSBmYWxzZSkgewogICAgICAgIC8vIFdlIG5lZWQgdG8gdXNlIHRoZSBtb2RpZmllZCB2YWx1ZSBoZXJlIHRvIGFwcGx5IHRoZQogICAgICAgIC8vIGAudHJpbWAgYW5kIGAubnVtYmVyYCBtb2RpZmllcnMgcHJvcGVybHkKICAgICAgICB0aGlzLmxvY2FsVmFsdWUgPSB0b1N0cmluZyh0aGlzLm1vZGlmeVZhbHVlKGZvcm1hdHRlZFZhbHVlKSk7IC8vIFdlIHBhc3MgdGhlIGZvcm1hdHRlZCB2YWx1ZSBoZXJlIHNpbmNlIHRoZSBgdXBkYXRlVmFsdWVgIG1ldGhvZAogICAgICAgIC8vIGhhbmRsZXMgdGhlIG1vZGlmaWVycyBpdHNlbGYKCiAgICAgICAgdGhpcy51cGRhdGVWYWx1ZShmb3JtYXR0ZWRWYWx1ZSwgdHJ1ZSk7CiAgICAgIH0gLy8gRW1pdCBuYXRpdmUgYmx1ciBldmVudAoKCiAgICAgIHRoaXMuJGVtaXQoRVZFTlRfTkFNRV9CTFVSLCBldmVudCk7CiAgICB9LAogICAgZm9jdXM6IGZ1bmN0aW9uIGZvY3VzKCkgewogICAgICAvLyBGb3IgZXh0ZXJuYWwgaGFuZGxlciB0aGF0IG1heSB3YW50IGEgZm9jdXMgbWV0aG9kCiAgICAgIGlmICghdGhpcy5kaXNhYmxlZCkgewogICAgICAgIGF0dGVtcHRGb2N1cyh0aGlzLiRlbCk7CiAgICAgIH0KICAgIH0sCiAgICBibHVyOiBmdW5jdGlvbiBibHVyKCkgewogICAgICAvLyBGb3IgZXh0ZXJuYWwgaGFuZGxlciB0aGF0IG1heSB3YW50IGEgYmx1ciBtZXRob2QKICAgICAgaWYgKCF0aGlzLmRpc2FibGVkKSB7CiAgICAgICAgYXR0ZW1wdEJsdXIodGhpcy4kZWwpOwogICAgICB9CiAgICB9CiAgfQp9KTs="},null]}