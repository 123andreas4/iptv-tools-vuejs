{"remainingRequest":"/media/ernst/63bce43c-5e51-4bf1-a611-3afdf32ac6f6/VueJS/IPTV-Tools/node_modules/thread-loader/dist/cjs.js!/media/ernst/63bce43c-5e51-4bf1-a611-3afdf32ac6f6/VueJS/IPTV-Tools/node_modules/babel-loader/lib/index.js!/media/ernst/63bce43c-5e51-4bf1-a611-3afdf32ac6f6/VueJS/IPTV-Tools/node_modules/bootstrap-vue/esm/components/nav/nav-item-dropdown.js","dependencies":[{"path":"/media/ernst/63bce43c-5e51-4bf1-a611-3afdf32ac6f6/VueJS/IPTV-Tools/node_modules/bootstrap-vue/esm/components/nav/nav-item-dropdown.js","mtime":499162500000},{"path":"/media/ernst/63bce43c-5e51-4bf1-a611-3afdf32ac6f6/VueJS/IPTV-Tools/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/media/ernst/63bce43c-5e51-4bf1-a611-3afdf32ac6f6/VueJS/IPTV-Tools/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/media/ernst/63bce43c-5e51-4bf1-a611-3afdf32ac6f6/VueJS/IPTV-Tools/node_modules/babel-loader/lib/index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}