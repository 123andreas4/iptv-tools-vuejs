{"remainingRequest":"/media/ernst/63bce43c-5e51-4bf1-a611-3afdf32ac6f6/VueJS/IPTV-Tools/node_modules/babel-loader/lib/index.js!/media/ernst/63bce43c-5e51-4bf1-a611-3afdf32ac6f6/VueJS/IPTV-Tools/node_modules/eslint-loader/index.js??ref--13-0!/media/ernst/63bce43c-5e51-4bf1-a611-3afdf32ac6f6/VueJS/IPTV-Tools/src/store/modules/sync.js","dependencies":[{"path":"/media/ernst/63bce43c-5e51-4bf1-a611-3afdf32ac6f6/VueJS/IPTV-Tools/src/store/modules/sync.js","mtime":1625072775142},{"path":"/media/ernst/63bce43c-5e51-4bf1-a611-3afdf32ac6f6/VueJS/IPTV-Tools/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/media/ernst/63bce43c-5e51-4bf1-a611-3afdf32ac6f6/VueJS/IPTV-Tools/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/media/ernst/63bce43c-5e51-4bf1-a611-3afdf32ac6f6/VueJS/IPTV-Tools/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmlsdGVyLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuaW5jbHVkZXMuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5jb25jYXQuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5tYXAuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5mdW5jdGlvbi5uYW1lLmpzIjsKaW1wb3J0IHsgaHR0cFNlcnZpY2UgfSBmcm9tICIuLi8uLi9zZXJ2aWNlcy9odHRwIjsKdmFyIHN0YXRlID0gewogIHRtZGJHZW5yZXM6IFtdLAogIGFwcFhtbHR2U3luYzogZmFsc2UsCiAgc3luY1RNREI6IGZhbHNlLAogIHN5bmNQbGF5bGlzdDogZmFsc2UsCiAgbW92aWVTZXJpZVBsYXlsaXN0czogW10sCiAgbW92aWVTZXJpZVBsYXlsaXN0OiBudWxsCn07CnZhciBnZXR0ZXJzID0gewogIHRtZGJHZW5yZXM6IGZ1bmN0aW9uIHRtZGJHZW5yZXMoc3RhdGUpIHsKICAgIHJldHVybiBzdGF0ZS50bWRiR2VucmVzOwogIH0sCiAgdG1kYkZpbHRlcmVkR2VucmVzOiBmdW5jdGlvbiB0bWRiRmlsdGVyZWRHZW5yZXMoc3RhdGUpIHsKICAgIHJldHVybiBzdGF0ZS50bWRiR2VucmVzLmZpbHRlcihmdW5jdGlvbiAoZ2VucmUpIHsKICAgICAgcmV0dXJuIFsxMiwgMTQsIDE2LCAxOCwgMjcsIDI4LCAzNSwgMzYsIDM3LCA1MywgOTksIDg3OCwgMTA3NDksIDEwNzYyLCAxMDc1OSwgODAsIDEwNzUxLCA5NjQ4LCAxMDc2MywgMTA3NjUsIDEwNzY3LCAxMDc2OCwgMTA3NTIsIDEwNDAyXS5pbmNsdWRlcyhnZW5yZS5pZCk7CiAgICB9KTsKICB9LAogIHN5bmNUTURCOiBmdW5jdGlvbiBzeW5jVE1EQihzdGF0ZSkgewogICAgcmV0dXJuIHN0YXRlLnN5bmNUTURCOwogIH0sCiAgc3luY1BsYXlsaXN0OiBmdW5jdGlvbiBzeW5jUGxheWxpc3Qoc3RhdGUpIHsKICAgIHJldHVybiBzdGF0ZS5zeW5jUGxheWxpc3Q7CiAgfSwKICBhcHBYbWx0dlN5bmM6IGZ1bmN0aW9uIGFwcFhtbHR2U3luYyhzdGF0ZSkgewogICAgcmV0dXJuIHN0YXRlLmFwcFhtbHR2U3luYzsKICB9LAogIG1vdmllU2VyaWVQbGF5bGlzdHM6IGZ1bmN0aW9uIG1vdmllU2VyaWVQbGF5bGlzdHMoc3RhdGUpIHsKICAgIHJldHVybiBzdGF0ZS5tb3ZpZVNlcmllUGxheWxpc3RzOwogIH0sCiAgbW92aWVTZXJpZVBsYXlsaXN0OiBmdW5jdGlvbiBtb3ZpZVNlcmllUGxheWxpc3Qoc3RhdGUpIHsKICAgIHJldHVybiBzdGF0ZS5tb3ZpZVNlcmllUGxheWxpc3Q7CiAgfQp9Owp2YXIgbXV0YXRpb25zID0gewogIHNldFRNREJHZW5yZXM6IGZ1bmN0aW9uIHNldFRNREJHZW5yZXMoc3RhdGUsIHBheWxvYWQpIHsKICAgIHN0YXRlLnRtZGJHZW5yZXMgPSBwYXlsb2FkOwogIH0sCiAgc2V0U3luY1RNREI6IGZ1bmN0aW9uIHNldFN5bmNUTURCKHN0YXRlLCBwYXlsb2FkKSB7CiAgICBzdGF0ZS5zeW5jVE1EQiA9IHBheWxvYWQ7CiAgfSwKICBzZXRTeW5jUGxheWxpc3Q6IGZ1bmN0aW9uIHNldFN5bmNQbGF5bGlzdChzdGF0ZSwgcGF5bG9hZCkgewogICAgc3RhdGUuc3luY1BsYXlsaXN0ID0gcGF5bG9hZDsKICB9LAogIHNldEFwcFhtbHR2U3luYzogZnVuY3Rpb24gc2V0QXBwWG1sdHZTeW5jKHN0YXRlLCBwYXlsb2FkKSB7CiAgICBzdGF0ZS5hcHBYbWx0dlN5bmMgPSBwYXlsb2FkOwogIH0sCiAgc2V0TW92aWVTZXJpZVBsYXlsaXN0czogZnVuY3Rpb24gc2V0TW92aWVTZXJpZVBsYXlsaXN0cyhzdGF0ZSwgcGF5bG9hZCkgewogICAgc3RhdGUubW92aWVTZXJpZVBsYXlsaXN0cyA9IHBheWxvYWQ7CiAgfSwKICBzZXRNb3ZpZVNlcmllUGxheWxpc3Q6IGZ1bmN0aW9uIHNldE1vdmllU2VyaWVQbGF5bGlzdChzdGF0ZSwgcGF5bG9hZCkgewogICAgc3RhdGUubW92aWVTZXJpZVBsYXlsaXN0ID0gcGF5bG9hZDsKICB9Cn07CnZhciBhY3Rpb25zID0gewogIHVwZGF0ZVRNREJHZW5yZXM6IGZ1bmN0aW9uIHVwZGF0ZVRNREJHZW5yZXMoX3JlZiwgcGF5bG9hZCkgewogICAgdmFyIGNvbW1pdCA9IF9yZWYuY29tbWl0OwogICAgaHR0cFNlcnZpY2UuZ2V0KCJ0bWRiL2dlbnJlcy8iLmNvbmNhdChwYXlsb2FkLnNvdXJjZSwgIi8iKS5jb25jYXQocGF5bG9hZC5sYW5ndWFnZSkpLnRoZW4oZnVuY3Rpb24gKHJlcykgewogICAgICBpZiAocmVzLmRhdGEgJiYgcmVzLmRhdGEgIT09IG51bGwgJiYgcmVzLmRhdGEubGVuZ3RoKSB7CiAgICAgICAgY29tbWl0KCJzZXRUTURCR2VucmVzIiwgcmVzLmRhdGEpOwogICAgICB9CiAgICB9KTsKICB9LAogIGdldFN5bmNUTURCOiBmdW5jdGlvbiBnZXRTeW5jVE1EQihfcmVmMikgewogICAgdmFyIGNvbW1pdCA9IF9yZWYyLmNvbW1pdDsKICAgIGh0dHBTZXJ2aWNlLmdldCgicGxheWxpc3Qvc3luY2hyb25pemUtdG1kYiIpLnRoZW4oZnVuY3Rpb24gKHJlcykgewogICAgICBjb21taXQoInNldFN5bmNUTURCIiwgcmVzLmRhdGEpOwogICAgfSk7CiAgfSwKICBnZXRTeW5jUGxheWxpc3Q6IGZ1bmN0aW9uIGdldFN5bmNQbGF5bGlzdChfcmVmMykgewogICAgdmFyIGNvbW1pdCA9IF9yZWYzLmNvbW1pdDsKICAgIGh0dHBTZXJ2aWNlLmdldCgicGxheWxpc3Qvc3luY2hyb25pemUiKS50aGVuKGZ1bmN0aW9uIChyZXMpIHsKICAgICAgY29tbWl0KCJzZXRTeW5jUGxheWxpc3QiLCByZXMuZGF0YSk7CiAgICB9KTsKICB9LAogIGdldEFwcFhtbHR2U3luYzogZnVuY3Rpb24gZ2V0QXBwWG1sdHZTeW5jKF9yZWY0KSB7CiAgICB2YXIgY29tbWl0ID0gX3JlZjQuY29tbWl0OwogICAgaHR0cFNlcnZpY2UuZ2V0KCJhZG1pbmlzdHJhdGlvbi94bWx0di1zeW5jIikudGhlbihmdW5jdGlvbiAocmVzKSB7CiAgICAgIGNvbW1pdCgic2V0QXBwWG1sdHZTeW5jIiwgcmVzLmRhdGEpOwogICAgfSk7CiAgfSwKICBzeW5jaHJvbml6ZVRNREI6IGZ1bmN0aW9uIHN5bmNocm9uaXplVE1EQihfcmVmNSwgcGF5bG9hZCkgewogICAgdmFyIGNvbW1pdCA9IF9yZWY1LmNvbW1pdDsKICAgIGh0dHBTZXJ2aWNlLnBvc3QoInBsYXlsaXN0L3N5bmNocm9uaXplLXRtZGIiLCB7CiAgICAgIGlkOiBwYXlsb2FkCiAgICB9KS50aGVuKGZ1bmN0aW9uIChyZXMpIHsKICAgICAgY29tbWl0KCJzZXRTeW5jVE1EQiIsIHJlcy5kYXRhKTsKICAgIH0pOwogIH0sCiAgc3luY2hyb25pemVQbGF5bGlzdDogZnVuY3Rpb24gc3luY2hyb25pemVQbGF5bGlzdChfcmVmNiwgcGF5bG9hZCkgewogICAgdmFyIGNvbW1pdCA9IF9yZWY2LmNvbW1pdDsKICAgIGh0dHBTZXJ2aWNlLnBvc3QoInBsYXlsaXN0L3N5bmNocm9uaXplIiwgewogICAgICBpZDogcGF5bG9hZAogICAgfSkudGhlbihmdW5jdGlvbiAocmVzKSB7CiAgICAgIGNvbW1pdCgic2V0U3luY1BsYXlsaXN0IiwgcmVzLmRhdGEpOwogICAgfSk7CiAgfSwKICBzeW5jWG1sdHY6IGZ1bmN0aW9uIHN5bmNYbWx0dihfcmVmNywgcGF5bG9hZCkgewogICAgdmFyIGNvbW1pdCA9IF9yZWY3LmNvbW1pdDsKICAgIGh0dHBTZXJ2aWNlLnBvc3QoImFkbWluaXN0cmF0aW9uL3htbHR2L3N5bmMiLCB7CiAgICAgIGlkOiBwYXlsb2FkCiAgICB9KS50aGVuKGZ1bmN0aW9uIChyZXMpIHsKICAgICAgY29tbWl0KCJzZXRBcHBYbWx0dlN5bmMiLCByZXMuZGF0YSk7CiAgICB9KTsKICB9LAogIGxvYWRNb3ZpZVNlcmllUGxheWxpc3RzOiBmdW5jdGlvbiBsb2FkTW92aWVTZXJpZVBsYXlsaXN0cyhfcmVmOCwgcGF5bG9hZCkgewogICAgdmFyIGNvbW1pdCA9IF9yZWY4LmNvbW1pdDsKICAgIGh0dHBTZXJ2aWNlLmdldCgicGxheWxpc3Qvc2ltcGxlIikudGhlbihmdW5jdGlvbiAocmVzKSB7CiAgICAgIGNvbW1pdCgic2V0TW92aWVTZXJpZVBsYXlsaXN0cyIsIHJlcy5kYXRhLm1hcChmdW5jdGlvbiAocGxheWxpc3QpIHsKICAgICAgICByZXR1cm4gewogICAgICAgICAgdGV4dDogcGxheWxpc3QubmFtZSwKICAgICAgICAgIHZhbHVlOiBwbGF5bGlzdC5pZAogICAgICAgIH07CiAgICAgIH0pKTsKCiAgICAgIGlmIChwYXlsb2FkICYmIHBheWxvYWQgPT09IHRydWUgJiYgcmVzLmRhdGEubGVuZ3RoICYmIHJlcy5kYXRhLmxlbmd0aCA+IDApIHsKICAgICAgICBjb21taXQoInNldE1vdmllU2VyaWVQbGF5bGlzdCIsIHJlcy5kYXRhWzBdLmlkKTsKICAgICAgfQogICAgfSk7CiAgfQp9OwpleHBvcnQgZGVmYXVsdCB7CiAgc3RhdGU6IHN0YXRlLAogIGdldHRlcnM6IGdldHRlcnMsCiAgbXV0YXRpb25zOiBtdXRhdGlvbnMsCiAgYWN0aW9uczogYWN0aW9ucwp9Ow=="},{"version":3,"sources":["/media/ernst/63bce43c-5e51-4bf1-a611-3afdf32ac6f6/VueJS/IPTV-Tools/src/store/modules/sync.js"],"names":["httpService","state","tmdbGenres","appXmltvSync","syncTMDB","syncPlaylist","movieSeriePlaylists","movieSeriePlaylist","getters","tmdbFilteredGenres","filter","genre","includes","id","mutations","setTMDBGenres","payload","setSyncTMDB","setSyncPlaylist","setAppXmltvSync","setMovieSeriePlaylists","setMovieSeriePlaylist","actions","updateTMDBGenres","commit","get","source","language","then","res","data","length","getSyncTMDB","getSyncPlaylist","getAppXmltvSync","synchronizeTMDB","post","synchronizePlaylist","syncXmltv","loadMovieSeriePlaylists","map","playlist","text","name","value"],"mappings":";;;;;AAAA,SAASA,WAAT,QAA4B,qBAA5B;AAEA,IAAMC,KAAK,GAAG;AACZC,EAAAA,UAAU,EAAE,EADA;AAEZC,EAAAA,YAAY,EAAE,KAFF;AAGZC,EAAAA,QAAQ,EAAE,KAHE;AAIZC,EAAAA,YAAY,EAAE,KAJF;AAKZC,EAAAA,mBAAmB,EAAE,EALT;AAMZC,EAAAA,kBAAkB,EAAE;AANR,CAAd;AASA,IAAMC,OAAO,GAAG;AACdN,EAAAA,UADc,sBACHD,KADG,EACI;AAChB,WAAOA,KAAK,CAACC,UAAb;AACD,GAHa;AAIdO,EAAAA,kBAJc,8BAIKR,KAJL,EAIY;AACxB,WAAOA,KAAK,CAACC,UAAN,CAAiBQ,MAAjB,CAAwB,UAACC,KAAD,EAAW;AACxC,aAAO,CACL,EADK,EACD,EADC,EACG,EADH,EACO,EADP,EACW,EADX,EACe,EADf,EACmB,EADnB,EACuB,EADvB,EAC2B,EAD3B,EAC+B,EAD/B,EACmC,EADnC,EACuC,GADvC,EAC4C,KAD5C,EACmD,KADnD,EAC0D,KAD1D,EAEL,EAFK,EAED,KAFC,EAEM,IAFN,EAEY,KAFZ,EAEmB,KAFnB,EAE0B,KAF1B,EAEiC,KAFjC,EAEwC,KAFxC,EAE+C,KAF/C,EAGLC,QAHK,CAGID,KAAK,CAACE,EAHV,CAAP;AAID,KALM,CAAP;AAMD,GAXa;AAYdT,EAAAA,QAZc,oBAYLH,KAZK,EAYE;AACd,WAAOA,KAAK,CAACG,QAAb;AACD,GAda;AAedC,EAAAA,YAfc,wBAeDJ,KAfC,EAeM;AAClB,WAAOA,KAAK,CAACI,YAAb;AACD,GAjBa;AAkBdF,EAAAA,YAlBc,wBAkBDF,KAlBC,EAkBM;AAClB,WAAOA,KAAK,CAACE,YAAb;AACD,GApBa;AAqBdG,EAAAA,mBArBc,+BAqBML,KArBN,EAqBa;AACzB,WAAOA,KAAK,CAACK,mBAAb;AACD,GAvBa;AAwBdC,EAAAA,kBAxBc,8BAwBKN,KAxBL,EAwBY;AACxB,WAAOA,KAAK,CAACM,kBAAb;AACD;AA1Ba,CAAhB;AA6BA,IAAMO,SAAS,GAAG;AAChBC,EAAAA,aADgB,yBACFd,KADE,EACKe,OADL,EACc;AAC5Bf,IAAAA,KAAK,CAACC,UAAN,GAAmBc,OAAnB;AACD,GAHe;AAIhBC,EAAAA,WAJgB,uBAIJhB,KAJI,EAIGe,OAJH,EAIY;AAC1Bf,IAAAA,KAAK,CAACG,QAAN,GAAiBY,OAAjB;AACD,GANe;AAOhBE,EAAAA,eAPgB,2BAOAjB,KAPA,EAOOe,OAPP,EAOgB;AAC9Bf,IAAAA,KAAK,CAACI,YAAN,GAAqBW,OAArB;AACD,GATe;AAUhBG,EAAAA,eAVgB,2BAUAlB,KAVA,EAUOe,OAVP,EAUgB;AAC9Bf,IAAAA,KAAK,CAACE,YAAN,GAAqBa,OAArB;AACD,GAZe;AAahBI,EAAAA,sBAbgB,kCAaOnB,KAbP,EAace,OAbd,EAauB;AACrCf,IAAAA,KAAK,CAACK,mBAAN,GAA4BU,OAA5B;AACD,GAfe;AAgBhBK,EAAAA,qBAhBgB,iCAgBMpB,KAhBN,EAgBae,OAhBb,EAgBsB;AACpCf,IAAAA,KAAK,CAACM,kBAAN,GAA2BS,OAA3B;AACD;AAlBe,CAAlB;AAqBA,IAAMM,OAAO,GAAG;AACdC,EAAAA,gBADc,kCACeP,OADf,EACwB;AAAA,QAAnBQ,MAAmB,QAAnBA,MAAmB;AACpCxB,IAAAA,WAAW,CACRyB,GADH,uBACsBT,OAAO,CAACU,MAD9B,cACwCV,OAAO,CAACW,QADhD,GAEGC,IAFH,CAEQ,UAACC,GAAD,EAAS;AACb,UAAIA,GAAG,CAACC,IAAJ,IAAYD,GAAG,CAACC,IAAJ,KAAa,IAAzB,IAAiCD,GAAG,CAACC,IAAJ,CAASC,MAA9C,EAAsD;AACpDP,QAAAA,MAAM,CAAC,eAAD,EAAkBK,GAAG,CAACC,IAAtB,CAAN;AACD;AACF,KANH;AAOD,GATa;AAUdE,EAAAA,WAVc,8BAUU;AAAA,QAAVR,MAAU,SAAVA,MAAU;AACtBxB,IAAAA,WAAW,CAACyB,GAAZ,CAAgB,2BAAhB,EAA6CG,IAA7C,CAAkD,UAACC,GAAD,EAAS;AACzDL,MAAAA,MAAM,CAAC,aAAD,EAAgBK,GAAG,CAACC,IAApB,CAAN;AACD,KAFD;AAGD,GAda;AAedG,EAAAA,eAfc,kCAec;AAAA,QAAVT,MAAU,SAAVA,MAAU;AAC1BxB,IAAAA,WAAW,CAACyB,GAAZ,CAAgB,sBAAhB,EAAwCG,IAAxC,CAA6C,UAACC,GAAD,EAAS;AACpDL,MAAAA,MAAM,CAAC,iBAAD,EAAoBK,GAAG,CAACC,IAAxB,CAAN;AACD,KAFD;AAGD,GAnBa;AAoBdI,EAAAA,eApBc,kCAoBc;AAAA,QAAVV,MAAU,SAAVA,MAAU;AAC1BxB,IAAAA,WAAW,CAACyB,GAAZ,CAAgB,2BAAhB,EAA6CG,IAA7C,CAAkD,UAACC,GAAD,EAAS;AACzDL,MAAAA,MAAM,CAAC,iBAAD,EAAoBK,GAAG,CAACC,IAAxB,CAAN;AACD,KAFD;AAGD,GAxBa;AAyBdK,EAAAA,eAzBc,kCAyBcnB,OAzBd,EAyBuB;AAAA,QAAnBQ,MAAmB,SAAnBA,MAAmB;AACnCxB,IAAAA,WAAW,CACRoC,IADH,CACQ,2BADR,EACqC;AACjCvB,MAAAA,EAAE,EAAEG;AAD6B,KADrC,EAIGY,IAJH,CAIQ,UAACC,GAAD,EAAS;AACbL,MAAAA,MAAM,CAAC,aAAD,EAAgBK,GAAG,CAACC,IAApB,CAAN;AACD,KANH;AAOD,GAjCa;AAkCdO,EAAAA,mBAlCc,sCAkCkBrB,OAlClB,EAkC2B;AAAA,QAAnBQ,MAAmB,SAAnBA,MAAmB;AACvCxB,IAAAA,WAAW,CACRoC,IADH,CACQ,sBADR,EACgC;AAC5BvB,MAAAA,EAAE,EAAEG;AADwB,KADhC,EAIGY,IAJH,CAIQ,UAACC,GAAD,EAAS;AACbL,MAAAA,MAAM,CAAC,iBAAD,EAAoBK,GAAG,CAACC,IAAxB,CAAN;AACD,KANH;AAOD,GA1Ca;AA2CdQ,EAAAA,SA3Cc,4BA2CQtB,OA3CR,EA2CiB;AAAA,QAAnBQ,MAAmB,SAAnBA,MAAmB;AAC7BxB,IAAAA,WAAW,CACRoC,IADH,CACQ,2BADR,EACqC;AACjCvB,MAAAA,EAAE,EAAEG;AAD6B,KADrC,EAIGY,IAJH,CAIQ,UAACC,GAAD,EAAS;AACbL,MAAAA,MAAM,CAAC,iBAAD,EAAoBK,GAAG,CAACC,IAAxB,CAAN;AACD,KANH;AAOD,GAnDa;AAoDdS,EAAAA,uBApDc,0CAoDsBvB,OApDtB,EAoD+B;AAAA,QAAnBQ,MAAmB,SAAnBA,MAAmB;AAC3CxB,IAAAA,WAAW,CAACyB,GAAZ,CAAgB,iBAAhB,EAAmCG,IAAnC,CAAwC,UAACC,GAAD,EAAS;AAC/CL,MAAAA,MAAM,CACJ,wBADI,EAEJK,GAAG,CAACC,IAAJ,CAASU,GAAT,CAAa,UAACC,QAAD,EAAc;AACzB,eAAO;AACLC,UAAAA,IAAI,EAAED,QAAQ,CAACE,IADV;AAELC,UAAAA,KAAK,EAAEH,QAAQ,CAAC5B;AAFX,SAAP;AAID,OALD,CAFI,CAAN;;AASA,UACEG,OAAO,IACPA,OAAO,KAAK,IADZ,IAEAa,GAAG,CAACC,IAAJ,CAASC,MAFT,IAGAF,GAAG,CAACC,IAAJ,CAASC,MAAT,GAAkB,CAJpB,EAKE;AACAP,QAAAA,MAAM,CAAC,uBAAD,EAA0BK,GAAG,CAACC,IAAJ,CAAS,CAAT,EAAYjB,EAAtC,CAAN;AACD;AACF,KAlBD;AAmBD;AAxEa,CAAhB;AA2EA,eAAe;AACbZ,EAAAA,KAAK,EAALA,KADa;AAEbO,EAAAA,OAAO,EAAPA,OAFa;AAGbM,EAAAA,SAAS,EAATA,SAHa;AAIbQ,EAAAA,OAAO,EAAPA;AAJa,CAAf","sourcesContent":["import { httpService } from \"../../services/http\";\n\nconst state = {\n  tmdbGenres: [],\n  appXmltvSync: false,\n  syncTMDB: false,\n  syncPlaylist: false,\n  movieSeriePlaylists: [],\n  movieSeriePlaylist: null,\n};\n\nconst getters = {\n  tmdbGenres(state) {\n    return state.tmdbGenres;\n  },\n  tmdbFilteredGenres(state) {\n    return state.tmdbGenres.filter((genre) => {\n      return [\n        12, 14, 16, 18, 27, 28, 35, 36, 37, 53, 99, 878, 10749, 10762, 10759,\n        80, 10751, 9648, 10763, 10765, 10767, 10768, 10752, 10402,\n      ].includes(genre.id);\n    });\n  },\n  syncTMDB(state) {\n    return state.syncTMDB;\n  },\n  syncPlaylist(state) {\n    return state.syncPlaylist;\n  },\n  appXmltvSync(state) {\n    return state.appXmltvSync;\n  },\n  movieSeriePlaylists(state) {\n    return state.movieSeriePlaylists;\n  },\n  movieSeriePlaylist(state) {\n    return state.movieSeriePlaylist;\n  },\n};\n\nconst mutations = {\n  setTMDBGenres(state, payload) {\n    state.tmdbGenres = payload;\n  },\n  setSyncTMDB(state, payload) {\n    state.syncTMDB = payload;\n  },\n  setSyncPlaylist(state, payload) {\n    state.syncPlaylist = payload;\n  },\n  setAppXmltvSync(state, payload) {\n    state.appXmltvSync = payload;\n  },\n  setMovieSeriePlaylists(state, payload) {\n    state.movieSeriePlaylists = payload;\n  },\n  setMovieSeriePlaylist(state, payload) {\n    state.movieSeriePlaylist = payload;\n  },\n};\n\nconst actions = {\n  updateTMDBGenres({ commit }, payload) {\n    httpService\n      .get(`tmdb/genres/${payload.source}/${payload.language}`)\n      .then((res) => {\n        if (res.data && res.data !== null && res.data.length) {\n          commit(\"setTMDBGenres\", res.data);\n        }\n      });\n  },\n  getSyncTMDB({ commit }) {\n    httpService.get(\"playlist/synchronize-tmdb\").then((res) => {\n      commit(\"setSyncTMDB\", res.data);\n    });\n  },\n  getSyncPlaylist({ commit }) {\n    httpService.get(\"playlist/synchronize\").then((res) => {\n      commit(\"setSyncPlaylist\", res.data);\n    });\n  },\n  getAppXmltvSync({ commit }) {\n    httpService.get(\"administration/xmltv-sync\").then((res) => {\n      commit(\"setAppXmltvSync\", res.data);\n    });\n  },\n  synchronizeTMDB({ commit }, payload) {\n    httpService\n      .post(\"playlist/synchronize-tmdb\", {\n        id: payload,\n      })\n      .then((res) => {\n        commit(\"setSyncTMDB\", res.data);\n      });\n  },\n  synchronizePlaylist({ commit }, payload) {\n    httpService\n      .post(\"playlist/synchronize\", {\n        id: payload,\n      })\n      .then((res) => {\n        commit(\"setSyncPlaylist\", res.data);\n      });\n  },\n  syncXmltv({ commit }, payload) {\n    httpService\n      .post(\"administration/xmltv/sync\", {\n        id: payload,\n      })\n      .then((res) => {\n        commit(\"setAppXmltvSync\", res.data);\n      });\n  },\n  loadMovieSeriePlaylists({ commit }, payload) {\n    httpService.get(\"playlist/simple\").then((res) => {\n      commit(\n        \"setMovieSeriePlaylists\",\n        res.data.map((playlist) => {\n          return {\n            text: playlist.name,\n            value: playlist.id,\n          };\n        })\n      );\n      if (\n        payload &&\n        payload === true &&\n        res.data.length &&\n        res.data.length > 0\n      ) {\n        commit(\"setMovieSeriePlaylist\", res.data[0].id);\n      }\n    });\n  },\n};\n\nexport default {\n  state,\n  getters,\n  mutations,\n  actions,\n};\n"]}]}