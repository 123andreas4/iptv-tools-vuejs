{"remainingRequest":"/media/ernst/63bce43c-5e51-4bf1-a611-3afdf32ac6f6/VueJS/IPTV-Tools/node_modules/thread-loader/dist/cjs.js!/media/ernst/63bce43c-5e51-4bf1-a611-3afdf32ac6f6/VueJS/IPTV-Tools/node_modules/babel-loader/lib/index.js!/media/ernst/63bce43c-5e51-4bf1-a611-3afdf32ac6f6/VueJS/IPTV-Tools/node_modules/vuedraggable/node_modules/sortablejs/modular/sortable.esm.js","dependencies":[{"path":"/media/ernst/63bce43c-5e51-4bf1-a611-3afdf32ac6f6/VueJS/IPTV-Tools/node_modules/vuedraggable/node_modules/sortablejs/modular/sortable.esm.js","mtime":499162500000},{"path":"/media/ernst/63bce43c-5e51-4bf1-a611-3afdf32ac6f6/VueJS/IPTV-Tools/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/media/ernst/63bce43c-5e51-4bf1-a611-3afdf32ac6f6/VueJS/IPTV-Tools/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/media/ernst/63bce43c-5e51-4bf1-a611-3afdf32ac6f6/VueJS/IPTV-Tools/node_modules/babel-loader/lib/index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF90eXBlb2YyIGZyb20gIi9tZWRpYS9lcm5zdC82M2JjZTQzYy01ZTUxLTRiZjEtYTYxMS0zYWZkZjMyYWM2ZjYvVnVlSlMvSVBUVi1Ub29scy9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdHlwZW9mIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sLmRlc2NyaXB0aW9uLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnRvLXN0cmluZy5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnN5bWJvbC5pdGVyYXRvci5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5pdGVyYXRvci5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL3dlYi5kb20tY29sbGVjdGlvbnMuaXRlcmF0b3IuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3Qua2V5cy5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmNvbmNhdC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmZpbHRlci5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3IuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy93ZWIuZG9tLWNvbGxlY3Rpb25zLmZvci1lYWNoLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZnJvbS5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnJlZ2V4cC5leGVjLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLm1hdGNoLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnJlcGxhY2UuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5udW1iZXIuY29uc3RydWN0b3IuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5zbGljZS5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnNwbGljZS5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmZ1bmN0aW9uLm5hbWUuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuc3BsaXQuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5qb2luLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMubnVtYmVyLnBhcnNlLWludC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnNvcnQuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcudHJpbS5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnJlZ2V4cC50by1zdHJpbmcuanMiOwoKLyoqIQogKiBTb3J0YWJsZSAxLjEwLjIKICogQGF1dGhvcglSdWJhWGEgICA8dHJhc2hAcnViYXhhLm9yZz4KICogQGF1dGhvcglvd2VubSAgICA8b3dlbjIzMzU1QGdtYWlsLmNvbT4KICogQGxpY2Vuc2UgTUlUCiAqLwpmdW5jdGlvbiBfdHlwZW9mKG9iaikgewogIGlmICh0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIF90eXBlb2YyKFN5bWJvbC5pdGVyYXRvcikgPT09ICJzeW1ib2wiKSB7CiAgICBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsKICAgICAgcmV0dXJuIF90eXBlb2YyKG9iaik7CiAgICB9OwogIH0gZWxzZSB7CiAgICBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsKICAgICAgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/ICJzeW1ib2wiIDogX3R5cGVvZjIob2JqKTsKICAgIH07CiAgfQoKICByZXR1cm4gX3R5cGVvZihvYmopOwp9CgpmdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7CiAgaWYgKGtleSBpbiBvYmopIHsKICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgewogICAgICB2YWx1ZTogdmFsdWUsCiAgICAgIGVudW1lcmFibGU6IHRydWUsCiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSwKICAgICAgd3JpdGFibGU6IHRydWUKICAgIH0pOwogIH0gZWxzZSB7CiAgICBvYmpba2V5XSA9IHZhbHVlOwogIH0KCiAgcmV0dXJuIG9iajsKfQoKZnVuY3Rpb24gX2V4dGVuZHMoKSB7CiAgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsKICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7CiAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07CgogICAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7CiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsKICAgICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07CiAgICAgICAgfQogICAgICB9CiAgICB9CgogICAgcmV0dXJuIHRhcmdldDsKICB9OwoKICByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKfQoKZnVuY3Rpb24gX29iamVjdFNwcmVhZCh0YXJnZXQpIHsKICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgewogICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307CiAgICB2YXIgb3duS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7CgogICAgaWYgKHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSAnZnVuY3Rpb24nKSB7CiAgICAgIG93bktleXMgPSBvd25LZXlzLmNvbmNhdChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHNvdXJjZSkuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHsKICAgICAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIHN5bSkuZW51bWVyYWJsZTsKICAgICAgfSkpOwogICAgfQoKICAgIG93bktleXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7CiAgICAgIF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pOwogICAgfSk7CiAgfQoKICByZXR1cm4gdGFyZ2V0Owp9CgpmdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKSB7CiAgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307CiAgdmFyIHRhcmdldCA9IHt9OwogIHZhciBzb3VyY2VLZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTsKICB2YXIga2V5LCBpOwoKICBmb3IgKGkgPSAwOyBpIDwgc291cmNlS2V5cy5sZW5ndGg7IGkrKykgewogICAga2V5ID0gc291cmNlS2V5c1tpXTsKICAgIGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7CiAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOwogIH0KCiAgcmV0dXJuIHRhcmdldDsKfQoKZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHNvdXJjZSwgZXhjbHVkZWQpIHsKICBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTsKCiAgdmFyIHRhcmdldCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpOwoKICB2YXIga2V5LCBpOwoKICBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgewogICAgdmFyIHNvdXJjZVN5bWJvbEtleXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHNvdXJjZSk7CgogICAgZm9yIChpID0gMDsgaSA8IHNvdXJjZVN5bWJvbEtleXMubGVuZ3RoOyBpKyspIHsKICAgICAga2V5ID0gc291cmNlU3ltYm9sS2V5c1tpXTsKICAgICAgaWYgKGV4Y2x1ZGVkLmluZGV4T2Yoa2V5KSA+PSAwKSBjb250aW51ZTsKICAgICAgaWYgKCFPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwoc291cmNlLCBrZXkpKSBjb250aW51ZTsKICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsKICAgIH0KICB9CgogIHJldHVybiB0YXJnZXQ7Cn0KCmZ1bmN0aW9uIF90b0NvbnN1bWFibGVBcnJheShhcnIpIHsKICByZXR1cm4gX2FycmF5V2l0aG91dEhvbGVzKGFycikgfHwgX2l0ZXJhYmxlVG9BcnJheShhcnIpIHx8IF9ub25JdGVyYWJsZVNwcmVhZCgpOwp9CgpmdW5jdGlvbiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB7CiAgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgewogICAgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkoYXJyLmxlbmd0aCk7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHsKICAgICAgYXJyMltpXSA9IGFycltpXTsKICAgIH0KCiAgICByZXR1cm4gYXJyMjsKICB9Cn0KCmZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXkoaXRlcikgewogIGlmIChTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGl0ZXIpIHx8IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChpdGVyKSA9PT0gIltvYmplY3QgQXJndW1lbnRzXSIpIHJldHVybiBBcnJheS5mcm9tKGl0ZXIpOwp9CgpmdW5jdGlvbiBfbm9uSXRlcmFibGVTcHJlYWQoKSB7CiAgdGhyb3cgbmV3IFR5cGVFcnJvcigiSW52YWxpZCBhdHRlbXB0IHRvIHNwcmVhZCBub24taXRlcmFibGUgaW5zdGFuY2UiKTsKfQoKdmFyIHZlcnNpb24gPSAiMS4xMC4yIjsKCmZ1bmN0aW9uIHVzZXJBZ2VudChwYXR0ZXJuKSB7CiAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5uYXZpZ2F0b3IpIHsKICAgIHJldHVybiAhISAvKkBfX1BVUkVfXyovbmF2aWdhdG9yLnVzZXJBZ2VudC5tYXRjaChwYXR0ZXJuKTsKICB9Cn0KCnZhciBJRTExT3JMZXNzID0gdXNlckFnZW50KC8oPzpUcmlkZW50LipydlsgOl0/MTFcLnxtc2llfGllbW9iaWxlfFdpbmRvd3MgUGhvbmUpL2kpOwp2YXIgRWRnZSA9IHVzZXJBZ2VudCgvRWRnZS9pKTsKdmFyIEZpcmVGb3ggPSB1c2VyQWdlbnQoL2ZpcmVmb3gvaSk7CnZhciBTYWZhcmkgPSB1c2VyQWdlbnQoL3NhZmFyaS9pKSAmJiAhdXNlckFnZW50KC9jaHJvbWUvaSkgJiYgIXVzZXJBZ2VudCgvYW5kcm9pZC9pKTsKdmFyIElPUyA9IHVzZXJBZ2VudCgvaVAoYWR8b2R8aG9uZSkvaSk7CnZhciBDaHJvbWVGb3JBbmRyb2lkID0gdXNlckFnZW50KC9jaHJvbWUvaSkgJiYgdXNlckFnZW50KC9hbmRyb2lkL2kpOwp2YXIgY2FwdHVyZU1vZGUgPSB7CiAgY2FwdHVyZTogZmFsc2UsCiAgcGFzc2l2ZTogZmFsc2UKfTsKCmZ1bmN0aW9uIG9uKGVsLCBldmVudCwgZm4pIHsKICBlbC5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCBmbiwgIUlFMTFPckxlc3MgJiYgY2FwdHVyZU1vZGUpOwp9CgpmdW5jdGlvbiBvZmYoZWwsIGV2ZW50LCBmbikgewogIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnQsIGZuLCAhSUUxMU9yTGVzcyAmJiBjYXB0dXJlTW9kZSk7Cn0KCmZ1bmN0aW9uIG1hdGNoZXMoCi8qKkhUTUxFbGVtZW50Ki8KZWwsCi8qKlN0cmluZyovCnNlbGVjdG9yKSB7CiAgaWYgKCFzZWxlY3RvcikgcmV0dXJuOwogIHNlbGVjdG9yWzBdID09PSAnPicgJiYgKHNlbGVjdG9yID0gc2VsZWN0b3Iuc3Vic3RyaW5nKDEpKTsKCiAgaWYgKGVsKSB7CiAgICB0cnkgewogICAgICBpZiAoZWwubWF0Y2hlcykgewogICAgICAgIHJldHVybiBlbC5tYXRjaGVzKHNlbGVjdG9yKTsKICAgICAgfSBlbHNlIGlmIChlbC5tc01hdGNoZXNTZWxlY3RvcikgewogICAgICAgIHJldHVybiBlbC5tc01hdGNoZXNTZWxlY3RvcihzZWxlY3Rvcik7CiAgICAgIH0gZWxzZSBpZiAoZWwud2Via2l0TWF0Y2hlc1NlbGVjdG9yKSB7CiAgICAgICAgcmV0dXJuIGVsLndlYmtpdE1hdGNoZXNTZWxlY3RvcihzZWxlY3Rvcik7CiAgICAgIH0KICAgIH0gY2F0Y2ggKF8pIHsKICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQogIH0KCiAgcmV0dXJuIGZhbHNlOwp9CgpmdW5jdGlvbiBnZXRQYXJlbnRPckhvc3QoZWwpIHsKICByZXR1cm4gZWwuaG9zdCAmJiBlbCAhPT0gZG9jdW1lbnQgJiYgZWwuaG9zdC5ub2RlVHlwZSA/IGVsLmhvc3QgOiBlbC5wYXJlbnROb2RlOwp9CgpmdW5jdGlvbiBjbG9zZXN0KAovKipIVE1MRWxlbWVudCovCmVsLAovKipTdHJpbmcqLwpzZWxlY3RvciwKLyoqSFRNTEVsZW1lbnQqLwpjdHgsIGluY2x1ZGVDVFgpIHsKICBpZiAoZWwpIHsKICAgIGN0eCA9IGN0eCB8fCBkb2N1bWVudDsKCiAgICBkbyB7CiAgICAgIGlmIChzZWxlY3RvciAhPSBudWxsICYmIChzZWxlY3RvclswXSA9PT0gJz4nID8gZWwucGFyZW50Tm9kZSA9PT0gY3R4ICYmIG1hdGNoZXMoZWwsIHNlbGVjdG9yKSA6IG1hdGNoZXMoZWwsIHNlbGVjdG9yKSkgfHwgaW5jbHVkZUNUWCAmJiBlbCA9PT0gY3R4KSB7CiAgICAgICAgcmV0dXJuIGVsOwogICAgICB9CgogICAgICBpZiAoZWwgPT09IGN0eCkgYnJlYWs7CiAgICAgIC8qIGpzaGludCBib3NzOnRydWUgKi8KICAgIH0gd2hpbGUgKGVsID0gZ2V0UGFyZW50T3JIb3N0KGVsKSk7CiAgfQoKICByZXR1cm4gbnVsbDsKfQoKdmFyIFJfU1BBQ0UgPSAvXHMrL2c7CgpmdW5jdGlvbiB0b2dnbGVDbGFzcyhlbCwgbmFtZSwgc3RhdGUpIHsKICBpZiAoZWwgJiYgbmFtZSkgewogICAgaWYgKGVsLmNsYXNzTGlzdCkgewogICAgICBlbC5jbGFzc0xpc3Rbc3RhdGUgPyAnYWRkJyA6ICdyZW1vdmUnXShuYW1lKTsKICAgIH0gZWxzZSB7CiAgICAgIHZhciBjbGFzc05hbWUgPSAoJyAnICsgZWwuY2xhc3NOYW1lICsgJyAnKS5yZXBsYWNlKFJfU1BBQ0UsICcgJykucmVwbGFjZSgnICcgKyBuYW1lICsgJyAnLCAnICcpOwogICAgICBlbC5jbGFzc05hbWUgPSAoY2xhc3NOYW1lICsgKHN0YXRlID8gJyAnICsgbmFtZSA6ICcnKSkucmVwbGFjZShSX1NQQUNFLCAnICcpOwogICAgfQogIH0KfQoKZnVuY3Rpb24gY3NzKGVsLCBwcm9wLCB2YWwpIHsKICB2YXIgc3R5bGUgPSBlbCAmJiBlbC5zdHlsZTsKCiAgaWYgKHN0eWxlKSB7CiAgICBpZiAodmFsID09PSB2b2lkIDApIHsKICAgICAgaWYgKGRvY3VtZW50LmRlZmF1bHRWaWV3ICYmIGRvY3VtZW50LmRlZmF1bHRWaWV3LmdldENvbXB1dGVkU3R5bGUpIHsKICAgICAgICB2YWwgPSBkb2N1bWVudC5kZWZhdWx0Vmlldy5nZXRDb21wdXRlZFN0eWxlKGVsLCAnJyk7CiAgICAgIH0gZWxzZSBpZiAoZWwuY3VycmVudFN0eWxlKSB7CiAgICAgICAgdmFsID0gZWwuY3VycmVudFN0eWxlOwogICAgICB9CgogICAgICByZXR1cm4gcHJvcCA9PT0gdm9pZCAwID8gdmFsIDogdmFsW3Byb3BdOwogICAgfSBlbHNlIHsKICAgICAgaWYgKCEocHJvcCBpbiBzdHlsZSkgJiYgcHJvcC5pbmRleE9mKCd3ZWJraXQnKSA9PT0gLTEpIHsKICAgICAgICBwcm9wID0gJy13ZWJraXQtJyArIHByb3A7CiAgICAgIH0KCiAgICAgIHN0eWxlW3Byb3BdID0gdmFsICsgKHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnID8gJycgOiAncHgnKTsKICAgIH0KICB9Cn0KCmZ1bmN0aW9uIG1hdHJpeChlbCwgc2VsZk9ubHkpIHsKICB2YXIgYXBwbGllZFRyYW5zZm9ybXMgPSAnJzsKCiAgaWYgKHR5cGVvZiBlbCA9PT0gJ3N0cmluZycpIHsKICAgIGFwcGxpZWRUcmFuc2Zvcm1zID0gZWw7CiAgfSBlbHNlIHsKICAgIGRvIHsKICAgICAgdmFyIHRyYW5zZm9ybSA9IGNzcyhlbCwgJ3RyYW5zZm9ybScpOwoKICAgICAgaWYgKHRyYW5zZm9ybSAmJiB0cmFuc2Zvcm0gIT09ICdub25lJykgewogICAgICAgIGFwcGxpZWRUcmFuc2Zvcm1zID0gdHJhbnNmb3JtICsgJyAnICsgYXBwbGllZFRyYW5zZm9ybXM7CiAgICAgIH0KICAgICAgLyoganNoaW50IGJvc3M6dHJ1ZSAqLwoKICAgIH0gd2hpbGUgKCFzZWxmT25seSAmJiAoZWwgPSBlbC5wYXJlbnROb2RlKSk7CiAgfQoKICB2YXIgbWF0cml4Rm4gPSB3aW5kb3cuRE9NTWF0cml4IHx8IHdpbmRvdy5XZWJLaXRDU1NNYXRyaXggfHwgd2luZG93LkNTU01hdHJpeCB8fCB3aW5kb3cuTVNDU1NNYXRyaXg7CiAgLypqc2hpbnQgLVcwNTYgKi8KCiAgcmV0dXJuIG1hdHJpeEZuICYmIG5ldyBtYXRyaXhGbihhcHBsaWVkVHJhbnNmb3Jtcyk7Cn0KCmZ1bmN0aW9uIGZpbmQoY3R4LCB0YWdOYW1lLCBpdGVyYXRvcikgewogIGlmIChjdHgpIHsKICAgIHZhciBsaXN0ID0gY3R4LmdldEVsZW1lbnRzQnlUYWdOYW1lKHRhZ05hbWUpLAogICAgICAgIGkgPSAwLAogICAgICAgIG4gPSBsaXN0Lmxlbmd0aDsKCiAgICBpZiAoaXRlcmF0b3IpIHsKICAgICAgZm9yICg7IGkgPCBuOyBpKyspIHsKICAgICAgICBpdGVyYXRvcihsaXN0W2ldLCBpKTsKICAgICAgfQogICAgfQoKICAgIHJldHVybiBsaXN0OwogIH0KCiAgcmV0dXJuIFtdOwp9CgpmdW5jdGlvbiBnZXRXaW5kb3dTY3JvbGxpbmdFbGVtZW50KCkgewogIHZhciBzY3JvbGxpbmdFbGVtZW50ID0gZG9jdW1lbnQuc2Nyb2xsaW5nRWxlbWVudDsKCiAgaWYgKHNjcm9sbGluZ0VsZW1lbnQpIHsKICAgIHJldHVybiBzY3JvbGxpbmdFbGVtZW50OwogIH0gZWxzZSB7CiAgICByZXR1cm4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50OwogIH0KfQovKioNCiAqIFJldHVybnMgdGhlICJib3VuZGluZyBjbGllbnQgcmVjdCIgb2YgZ2l2ZW4gZWxlbWVudA0KICogQHBhcmFtICB7SFRNTEVsZW1lbnR9IGVsICAgICAgICAgICAgICAgICAgICAgICBUaGUgZWxlbWVudCB3aG9zZSBib3VuZGluZ0NsaWVudFJlY3QgaXMgd2FudGVkDQogKiBAcGFyYW0gIHtbQm9vbGVhbl19IHJlbGF0aXZlVG9Db250YWluaW5nQmxvY2sgIFdoZXRoZXIgdGhlIHJlY3Qgc2hvdWxkIGJlIHJlbGF0aXZlIHRvIHRoZSBjb250YWluaW5nIGJsb2NrIG9mIChpbmNsdWRpbmcpIHRoZSBjb250YWluZXINCiAqIEBwYXJhbSAge1tCb29sZWFuXX0gcmVsYXRpdmVUb05vblN0YXRpY1BhcmVudCAgV2hldGhlciB0aGUgcmVjdCBzaG91bGQgYmUgcmVsYXRpdmUgdG8gdGhlIHJlbGF0aXZlIHBhcmVudCBvZiAoaW5jbHVkaW5nKSB0aGUgY29udGFpZW5yDQogKiBAcGFyYW0gIHtbQm9vbGVhbl19IHVuZG9TY2FsZSAgICAgICAgICAgICAgICAgIFdoZXRoZXIgdGhlIGNvbnRhaW5lcidzIHNjYWxlKCkgc2hvdWxkIGJlIHVuZG9uZQ0KICogQHBhcmFtICB7W0hUTUxFbGVtZW50XX0gY29udGFpbmVyICAgICAgICAgICAgICBUaGUgcGFyZW50IHRoZSBlbGVtZW50IHdpbGwgYmUgcGxhY2VkIGluDQogKiBAcmV0dXJuIHtPYmplY3R9ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRoZSBib3VuZGluZ0NsaWVudFJlY3Qgb2YgZWwsIHdpdGggc3BlY2lmaWVkIGFkanVzdG1lbnRzDQogKi8KCgpmdW5jdGlvbiBnZXRSZWN0KGVsLCByZWxhdGl2ZVRvQ29udGFpbmluZ0Jsb2NrLCByZWxhdGl2ZVRvTm9uU3RhdGljUGFyZW50LCB1bmRvU2NhbGUsIGNvbnRhaW5lcikgewogIGlmICghZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0ICYmIGVsICE9PSB3aW5kb3cpIHJldHVybjsKICB2YXIgZWxSZWN0LCB0b3AsIGxlZnQsIGJvdHRvbSwgcmlnaHQsIGhlaWdodCwgd2lkdGg7CgogIGlmIChlbCAhPT0gd2luZG93ICYmIGVsICE9PSBnZXRXaW5kb3dTY3JvbGxpbmdFbGVtZW50KCkpIHsKICAgIGVsUmVjdCA9IGVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpOwogICAgdG9wID0gZWxSZWN0LnRvcDsKICAgIGxlZnQgPSBlbFJlY3QubGVmdDsKICAgIGJvdHRvbSA9IGVsUmVjdC5ib3R0b207CiAgICByaWdodCA9IGVsUmVjdC5yaWdodDsKICAgIGhlaWdodCA9IGVsUmVjdC5oZWlnaHQ7CiAgICB3aWR0aCA9IGVsUmVjdC53aWR0aDsKICB9IGVsc2UgewogICAgdG9wID0gMDsKICAgIGxlZnQgPSAwOwogICAgYm90dG9tID0gd2luZG93LmlubmVySGVpZ2h0OwogICAgcmlnaHQgPSB3aW5kb3cuaW5uZXJXaWR0aDsKICAgIGhlaWdodCA9IHdpbmRvdy5pbm5lckhlaWdodDsKICAgIHdpZHRoID0gd2luZG93LmlubmVyV2lkdGg7CiAgfQoKICBpZiAoKHJlbGF0aXZlVG9Db250YWluaW5nQmxvY2sgfHwgcmVsYXRpdmVUb05vblN0YXRpY1BhcmVudCkgJiYgZWwgIT09IHdpbmRvdykgewogICAgLy8gQWRqdXN0IGZvciB0cmFuc2xhdGUoKQogICAgY29udGFpbmVyID0gY29udGFpbmVyIHx8IGVsLnBhcmVudE5vZGU7IC8vIHNvbHZlcyAjMTEyMyAoc2VlOiBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMzc5NTM4MDYvNjA4ODMxMikKICAgIC8vIE5vdCBuZWVkZWQgb24gPD0gSUUxMQoKICAgIGlmICghSUUxMU9yTGVzcykgewogICAgICBkbyB7CiAgICAgICAgaWYgKGNvbnRhaW5lciAmJiBjb250YWluZXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0ICYmIChjc3MoY29udGFpbmVyLCAndHJhbnNmb3JtJykgIT09ICdub25lJyB8fCByZWxhdGl2ZVRvTm9uU3RhdGljUGFyZW50ICYmIGNzcyhjb250YWluZXIsICdwb3NpdGlvbicpICE9PSAnc3RhdGljJykpIHsKICAgICAgICAgIHZhciBjb250YWluZXJSZWN0ID0gY29udGFpbmVyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpOyAvLyBTZXQgcmVsYXRpdmUgdG8gZWRnZXMgb2YgcGFkZGluZyBib3ggb2YgY29udGFpbmVyCgogICAgICAgICAgdG9wIC09IGNvbnRhaW5lclJlY3QudG9wICsgcGFyc2VJbnQoY3NzKGNvbnRhaW5lciwgJ2JvcmRlci10b3Atd2lkdGgnKSk7CiAgICAgICAgICBsZWZ0IC09IGNvbnRhaW5lclJlY3QubGVmdCArIHBhcnNlSW50KGNzcyhjb250YWluZXIsICdib3JkZXItbGVmdC13aWR0aCcpKTsKICAgICAgICAgIGJvdHRvbSA9IHRvcCArIGVsUmVjdC5oZWlnaHQ7CiAgICAgICAgICByaWdodCA9IGxlZnQgKyBlbFJlY3Qud2lkdGg7CiAgICAgICAgICBicmVhazsKICAgICAgICB9CiAgICAgICAgLyoganNoaW50IGJvc3M6dHJ1ZSAqLwoKICAgICAgfSB3aGlsZSAoY29udGFpbmVyID0gY29udGFpbmVyLnBhcmVudE5vZGUpOwogICAgfQogIH0KCiAgaWYgKHVuZG9TY2FsZSAmJiBlbCAhPT0gd2luZG93KSB7CiAgICAvLyBBZGp1c3QgZm9yIHNjYWxlKCkKICAgIHZhciBlbE1hdHJpeCA9IG1hdHJpeChjb250YWluZXIgfHwgZWwpLAogICAgICAgIHNjYWxlWCA9IGVsTWF0cml4ICYmIGVsTWF0cml4LmEsCiAgICAgICAgc2NhbGVZID0gZWxNYXRyaXggJiYgZWxNYXRyaXguZDsKCiAgICBpZiAoZWxNYXRyaXgpIHsKICAgICAgdG9wIC89IHNjYWxlWTsKICAgICAgbGVmdCAvPSBzY2FsZVg7CiAgICAgIHdpZHRoIC89IHNjYWxlWDsKICAgICAgaGVpZ2h0IC89IHNjYWxlWTsKICAgICAgYm90dG9tID0gdG9wICsgaGVpZ2h0OwogICAgICByaWdodCA9IGxlZnQgKyB3aWR0aDsKICAgIH0KICB9CgogIHJldHVybiB7CiAgICB0b3A6IHRvcCwKICAgIGxlZnQ6IGxlZnQsCiAgICBib3R0b206IGJvdHRvbSwKICAgIHJpZ2h0OiByaWdodCwKICAgIHdpZHRoOiB3aWR0aCwKICAgIGhlaWdodDogaGVpZ2h0CiAgfTsKfQovKioNCiAqIENoZWNrcyBpZiBhIHNpZGUgb2YgYW4gZWxlbWVudCBpcyBzY3JvbGxlZCBwYXN0IGEgc2lkZSBvZiBpdHMgcGFyZW50cw0KICogQHBhcmFtICB7SFRNTEVsZW1lbnR9ICBlbCAgICAgICAgICAgVGhlIGVsZW1lbnQgd2hvJ3Mgc2lkZSBiZWluZyBzY3JvbGxlZCBvdXQgb2YgdmlldyBpcyBpbiBxdWVzdGlvbg0KICogQHBhcmFtICB7U3RyaW5nfSAgICAgICBlbFNpZGUgICAgICAgU2lkZSBvZiB0aGUgZWxlbWVudCBpbiBxdWVzdGlvbiAoJ3RvcCcsICdsZWZ0JywgJ3JpZ2h0JywgJ2JvdHRvbScpDQogKiBAcGFyYW0gIHtTdHJpbmd9ICAgICAgIHBhcmVudFNpZGUgICBTaWRlIG9mIHRoZSBwYXJlbnQgaW4gcXVlc3Rpb24gKCd0b3AnLCAnbGVmdCcsICdyaWdodCcsICdib3R0b20nKQ0KICogQHJldHVybiB7SFRNTEVsZW1lbnR9ICAgICAgICAgICAgICAgVGhlIHBhcmVudCBzY3JvbGwgZWxlbWVudCB0aGF0IHRoZSBlbCdzIHNpZGUgaXMgc2Nyb2xsZWQgcGFzdCwgb3IgbnVsbCBpZiB0aGVyZSBpcyBubyBzdWNoIGVsZW1lbnQNCiAqLwoKCmZ1bmN0aW9uIGlzU2Nyb2xsZWRQYXN0KGVsLCBlbFNpZGUsIHBhcmVudFNpZGUpIHsKICB2YXIgcGFyZW50ID0gZ2V0UGFyZW50QXV0b1Njcm9sbEVsZW1lbnQoZWwsIHRydWUpLAogICAgICBlbFNpZGVWYWwgPSBnZXRSZWN0KGVsKVtlbFNpZGVdOwogIC8qIGpzaGludCBib3NzOnRydWUgKi8KCiAgd2hpbGUgKHBhcmVudCkgewogICAgdmFyIHBhcmVudFNpZGVWYWwgPSBnZXRSZWN0KHBhcmVudClbcGFyZW50U2lkZV0sCiAgICAgICAgdmlzaWJsZSA9IHZvaWQgMDsKCiAgICBpZiAocGFyZW50U2lkZSA9PT0gJ3RvcCcgfHwgcGFyZW50U2lkZSA9PT0gJ2xlZnQnKSB7CiAgICAgIHZpc2libGUgPSBlbFNpZGVWYWwgPj0gcGFyZW50U2lkZVZhbDsKICAgIH0gZWxzZSB7CiAgICAgIHZpc2libGUgPSBlbFNpZGVWYWwgPD0gcGFyZW50U2lkZVZhbDsKICAgIH0KCiAgICBpZiAoIXZpc2libGUpIHJldHVybiBwYXJlbnQ7CiAgICBpZiAocGFyZW50ID09PSBnZXRXaW5kb3dTY3JvbGxpbmdFbGVtZW50KCkpIGJyZWFrOwogICAgcGFyZW50ID0gZ2V0UGFyZW50QXV0b1Njcm9sbEVsZW1lbnQocGFyZW50LCBmYWxzZSk7CiAgfQoKICByZXR1cm4gZmFsc2U7Cn0KLyoqDQogKiBHZXRzIG50aCBjaGlsZCBvZiBlbCwgaWdub3JpbmcgaGlkZGVuIGNoaWxkcmVuLCBzb3J0YWJsZSdzIGVsZW1lbnRzIChkb2VzIG5vdCBpZ25vcmUgY2xvbmUgaWYgaXQncyB2aXNpYmxlKQ0KICogYW5kIG5vbi1kcmFnZ2FibGUgZWxlbWVudHMNCiAqIEBwYXJhbSAge0hUTUxFbGVtZW50fSBlbCAgICAgICBUaGUgcGFyZW50IGVsZW1lbnQNCiAqIEBwYXJhbSAge051bWJlcn0gY2hpbGROdW0gICAgICBUaGUgaW5kZXggb2YgdGhlIGNoaWxkDQogKiBAcGFyYW0gIHtPYmplY3R9IG9wdGlvbnMgICAgICAgUGFyZW50IFNvcnRhYmxlJ3Mgb3B0aW9ucw0KICogQHJldHVybiB7SFRNTEVsZW1lbnR9ICAgICAgICAgIFRoZSBjaGlsZCBhdCBpbmRleCBjaGlsZE51bSwgb3IgbnVsbCBpZiBub3QgZm91bmQNCiAqLwoKCmZ1bmN0aW9uIGdldENoaWxkKGVsLCBjaGlsZE51bSwgb3B0aW9ucykgewogIHZhciBjdXJyZW50Q2hpbGQgPSAwLAogICAgICBpID0gMCwKICAgICAgY2hpbGRyZW4gPSBlbC5jaGlsZHJlbjsKCiAgd2hpbGUgKGkgPCBjaGlsZHJlbi5sZW5ndGgpIHsKICAgIGlmIChjaGlsZHJlbltpXS5zdHlsZS5kaXNwbGF5ICE9PSAnbm9uZScgJiYgY2hpbGRyZW5baV0gIT09IFNvcnRhYmxlLmdob3N0ICYmIGNoaWxkcmVuW2ldICE9PSBTb3J0YWJsZS5kcmFnZ2VkICYmIGNsb3Nlc3QoY2hpbGRyZW5baV0sIG9wdGlvbnMuZHJhZ2dhYmxlLCBlbCwgZmFsc2UpKSB7CiAgICAgIGlmIChjdXJyZW50Q2hpbGQgPT09IGNoaWxkTnVtKSB7CiAgICAgICAgcmV0dXJuIGNoaWxkcmVuW2ldOwogICAgICB9CgogICAgICBjdXJyZW50Q2hpbGQrKzsKICAgIH0KCiAgICBpKys7CiAgfQoKICByZXR1cm4gbnVsbDsKfQovKioNCiAqIEdldHMgdGhlIGxhc3QgY2hpbGQgaW4gdGhlIGVsLCBpZ25vcmluZyBnaG9zdEVsIG9yIGludmlzaWJsZSBlbGVtZW50cyAoY2xvbmVzKQ0KICogQHBhcmFtICB7SFRNTEVsZW1lbnR9IGVsICAgICAgIFBhcmVudCBlbGVtZW50DQogKiBAcGFyYW0gIHtzZWxlY3Rvcn0gc2VsZWN0b3IgICAgQW55IG90aGVyIGVsZW1lbnRzIHRoYXQgc2hvdWxkIGJlIGlnbm9yZWQNCiAqIEByZXR1cm4ge0hUTUxFbGVtZW50fSAgICAgICAgICBUaGUgbGFzdCBjaGlsZCwgaWdub3JpbmcgZ2hvc3RFbA0KICovCgoKZnVuY3Rpb24gbGFzdENoaWxkKGVsLCBzZWxlY3RvcikgewogIHZhciBsYXN0ID0gZWwubGFzdEVsZW1lbnRDaGlsZDsKCiAgd2hpbGUgKGxhc3QgJiYgKGxhc3QgPT09IFNvcnRhYmxlLmdob3N0IHx8IGNzcyhsYXN0LCAnZGlzcGxheScpID09PSAnbm9uZScgfHwgc2VsZWN0b3IgJiYgIW1hdGNoZXMobGFzdCwgc2VsZWN0b3IpKSkgewogICAgbGFzdCA9IGxhc3QucHJldmlvdXNFbGVtZW50U2libGluZzsKICB9CgogIHJldHVybiBsYXN0IHx8IG51bGw7Cn0KLyoqDQogKiBSZXR1cm5zIHRoZSBpbmRleCBvZiBhbiBlbGVtZW50IHdpdGhpbiBpdHMgcGFyZW50IGZvciBhIHNlbGVjdGVkIHNldCBvZg0KICogZWxlbWVudHMNCiAqIEBwYXJhbSAge0hUTUxFbGVtZW50fSBlbA0KICogQHBhcmFtICB7c2VsZWN0b3J9IHNlbGVjdG9yDQogKiBAcmV0dXJuIHtudW1iZXJ9DQogKi8KCgpmdW5jdGlvbiBpbmRleChlbCwgc2VsZWN0b3IpIHsKICB2YXIgaW5kZXggPSAwOwoKICBpZiAoIWVsIHx8ICFlbC5wYXJlbnROb2RlKSB7CiAgICByZXR1cm4gLTE7CiAgfQogIC8qIGpzaGludCBib3NzOnRydWUgKi8KCgogIHdoaWxlIChlbCA9IGVsLnByZXZpb3VzRWxlbWVudFNpYmxpbmcpIHsKICAgIGlmIChlbC5ub2RlTmFtZS50b1VwcGVyQ2FzZSgpICE9PSAnVEVNUExBVEUnICYmIGVsICE9PSBTb3J0YWJsZS5jbG9uZSAmJiAoIXNlbGVjdG9yIHx8IG1hdGNoZXMoZWwsIHNlbGVjdG9yKSkpIHsKICAgICAgaW5kZXgrKzsKICAgIH0KICB9CgogIHJldHVybiBpbmRleDsKfQovKioNCiAqIFJldHVybnMgdGhlIHNjcm9sbCBvZmZzZXQgb2YgdGhlIGdpdmVuIGVsZW1lbnQsIGFkZGVkIHdpdGggYWxsIHRoZSBzY3JvbGwgb2Zmc2V0cyBvZiBwYXJlbnQgZWxlbWVudHMuDQogKiBUaGUgdmFsdWUgaXMgcmV0dXJuZWQgaW4gcmVhbCBwaXhlbHMuDQogKiBAcGFyYW0gIHtIVE1MRWxlbWVudH0gZWwNCiAqIEByZXR1cm4ge0FycmF5fSAgICAgICAgICAgICBPZmZzZXRzIGluIHRoZSBmb3JtYXQgb2YgW2xlZnQsIHRvcF0NCiAqLwoKCmZ1bmN0aW9uIGdldFJlbGF0aXZlU2Nyb2xsT2Zmc2V0KGVsKSB7CiAgdmFyIG9mZnNldExlZnQgPSAwLAogICAgICBvZmZzZXRUb3AgPSAwLAogICAgICB3aW5TY3JvbGxlciA9IGdldFdpbmRvd1Njcm9sbGluZ0VsZW1lbnQoKTsKCiAgaWYgKGVsKSB7CiAgICBkbyB7CiAgICAgIHZhciBlbE1hdHJpeCA9IG1hdHJpeChlbCksCiAgICAgICAgICBzY2FsZVggPSBlbE1hdHJpeC5hLAogICAgICAgICAgc2NhbGVZID0gZWxNYXRyaXguZDsKICAgICAgb2Zmc2V0TGVmdCArPSBlbC5zY3JvbGxMZWZ0ICogc2NhbGVYOwogICAgICBvZmZzZXRUb3AgKz0gZWwuc2Nyb2xsVG9wICogc2NhbGVZOwogICAgfSB3aGlsZSAoZWwgIT09IHdpblNjcm9sbGVyICYmIChlbCA9IGVsLnBhcmVudE5vZGUpKTsKICB9CgogIHJldHVybiBbb2Zmc2V0TGVmdCwgb2Zmc2V0VG9wXTsKfQovKioNCiAqIFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBvYmplY3Qgd2l0aGluIHRoZSBnaXZlbiBhcnJheQ0KICogQHBhcmFtICB7QXJyYXl9IGFyciAgIEFycmF5IHRoYXQgbWF5IG9yIG1heSBub3QgaG9sZCB0aGUgb2JqZWN0DQogKiBAcGFyYW0gIHtPYmplY3R9IG9iaiAgQW4gb2JqZWN0IHRoYXQgaGFzIGEga2V5LXZhbHVlIHBhaXIgdW5pcXVlIHRvIGFuZCBpZGVudGljYWwgdG8gYSBrZXktdmFsdWUgcGFpciBpbiB0aGUgb2JqZWN0IHlvdSB3YW50IHRvIGZpbmQNCiAqIEByZXR1cm4ge051bWJlcn0gICAgICBUaGUgaW5kZXggb2YgdGhlIG9iamVjdCBpbiB0aGUgYXJyYXksIG9yIC0xDQogKi8KCgpmdW5jdGlvbiBpbmRleE9mT2JqZWN0KGFyciwgb2JqKSB7CiAgZm9yICh2YXIgaSBpbiBhcnIpIHsKICAgIGlmICghYXJyLmhhc093blByb3BlcnR5KGkpKSBjb250aW51ZTsKCiAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7CiAgICAgIGlmIChvYmouaGFzT3duUHJvcGVydHkoa2V5KSAmJiBvYmpba2V5XSA9PT0gYXJyW2ldW2tleV0pIHJldHVybiBOdW1iZXIoaSk7CiAgICB9CiAgfQoKICByZXR1cm4gLTE7Cn0KCmZ1bmN0aW9uIGdldFBhcmVudEF1dG9TY3JvbGxFbGVtZW50KGVsLCBpbmNsdWRlU2VsZikgewogIC8vIHNraXAgdG8gd2luZG93CiAgaWYgKCFlbCB8fCAhZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KSByZXR1cm4gZ2V0V2luZG93U2Nyb2xsaW5nRWxlbWVudCgpOwogIHZhciBlbGVtID0gZWw7CiAgdmFyIGdvdFNlbGYgPSBmYWxzZTsKCiAgZG8gewogICAgLy8gd2UgZG9uJ3QgbmVlZCB0byBnZXQgZWxlbSBjc3MgaWYgaXQgaXNuJ3QgZXZlbiBvdmVyZmxvd2luZyBpbiB0aGUgZmlyc3QgcGxhY2UgKHBlcmZvcm1hbmNlKQogICAgaWYgKGVsZW0uY2xpZW50V2lkdGggPCBlbGVtLnNjcm9sbFdpZHRoIHx8IGVsZW0uY2xpZW50SGVpZ2h0IDwgZWxlbS5zY3JvbGxIZWlnaHQpIHsKICAgICAgdmFyIGVsZW1DU1MgPSBjc3MoZWxlbSk7CgogICAgICBpZiAoZWxlbS5jbGllbnRXaWR0aCA8IGVsZW0uc2Nyb2xsV2lkdGggJiYgKGVsZW1DU1Mub3ZlcmZsb3dYID09ICdhdXRvJyB8fCBlbGVtQ1NTLm92ZXJmbG93WCA9PSAnc2Nyb2xsJykgfHwgZWxlbS5jbGllbnRIZWlnaHQgPCBlbGVtLnNjcm9sbEhlaWdodCAmJiAoZWxlbUNTUy5vdmVyZmxvd1kgPT0gJ2F1dG8nIHx8IGVsZW1DU1Mub3ZlcmZsb3dZID09ICdzY3JvbGwnKSkgewogICAgICAgIGlmICghZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QgfHwgZWxlbSA9PT0gZG9jdW1lbnQuYm9keSkgcmV0dXJuIGdldFdpbmRvd1Njcm9sbGluZ0VsZW1lbnQoKTsKICAgICAgICBpZiAoZ290U2VsZiB8fCBpbmNsdWRlU2VsZikgcmV0dXJuIGVsZW07CiAgICAgICAgZ290U2VsZiA9IHRydWU7CiAgICAgIH0KICAgIH0KICAgIC8qIGpzaGludCBib3NzOnRydWUgKi8KCiAgfSB3aGlsZSAoZWxlbSA9IGVsZW0ucGFyZW50Tm9kZSk7CgogIHJldHVybiBnZXRXaW5kb3dTY3JvbGxpbmdFbGVtZW50KCk7Cn0KCmZ1bmN0aW9uIGV4dGVuZChkc3QsIHNyYykgewogIGlmIChkc3QgJiYgc3JjKSB7CiAgICBmb3IgKHZhciBrZXkgaW4gc3JjKSB7CiAgICAgIGlmIChzcmMuaGFzT3duUHJvcGVydHkoa2V5KSkgewogICAgICAgIGRzdFtrZXldID0gc3JjW2tleV07CiAgICAgIH0KICAgIH0KICB9CgogIHJldHVybiBkc3Q7Cn0KCmZ1bmN0aW9uIGlzUmVjdEVxdWFsKHJlY3QxLCByZWN0MikgewogIHJldHVybiBNYXRoLnJvdW5kKHJlY3QxLnRvcCkgPT09IE1hdGgucm91bmQocmVjdDIudG9wKSAmJiBNYXRoLnJvdW5kKHJlY3QxLmxlZnQpID09PSBNYXRoLnJvdW5kKHJlY3QyLmxlZnQpICYmIE1hdGgucm91bmQocmVjdDEuaGVpZ2h0KSA9PT0gTWF0aC5yb3VuZChyZWN0Mi5oZWlnaHQpICYmIE1hdGgucm91bmQocmVjdDEud2lkdGgpID09PSBNYXRoLnJvdW5kKHJlY3QyLndpZHRoKTsKfQoKdmFyIF90aHJvdHRsZVRpbWVvdXQ7CgpmdW5jdGlvbiB0aHJvdHRsZShjYWxsYmFjaywgbXMpIHsKICByZXR1cm4gZnVuY3Rpb24gKCkgewogICAgaWYgKCFfdGhyb3R0bGVUaW1lb3V0KSB7CiAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzLAogICAgICAgICAgX3RoaXMgPSB0aGlzOwoKICAgICAgaWYgKGFyZ3MubGVuZ3RoID09PSAxKSB7CiAgICAgICAgY2FsbGJhY2suY2FsbChfdGhpcywgYXJnc1swXSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgY2FsbGJhY2suYXBwbHkoX3RoaXMsIGFyZ3MpOwogICAgICB9CgogICAgICBfdGhyb3R0bGVUaW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7CiAgICAgICAgX3Rocm90dGxlVGltZW91dCA9IHZvaWQgMDsKICAgICAgfSwgbXMpOwogICAgfQogIH07Cn0KCmZ1bmN0aW9uIGNhbmNlbFRocm90dGxlKCkgewogIGNsZWFyVGltZW91dChfdGhyb3R0bGVUaW1lb3V0KTsKICBfdGhyb3R0bGVUaW1lb3V0ID0gdm9pZCAwOwp9CgpmdW5jdGlvbiBzY3JvbGxCeShlbCwgeCwgeSkgewogIGVsLnNjcm9sbExlZnQgKz0geDsKICBlbC5zY3JvbGxUb3AgKz0geTsKfQoKZnVuY3Rpb24gY2xvbmUoZWwpIHsKICB2YXIgUG9seW1lciA9IHdpbmRvdy5Qb2x5bWVyOwogIHZhciAkID0gd2luZG93LmpRdWVyeSB8fCB3aW5kb3cuWmVwdG87CgogIGlmIChQb2x5bWVyICYmIFBvbHltZXIuZG9tKSB7CiAgICByZXR1cm4gUG9seW1lci5kb20oZWwpLmNsb25lTm9kZSh0cnVlKTsKICB9IGVsc2UgaWYgKCQpIHsKICAgIHJldHVybiAkKGVsKS5jbG9uZSh0cnVlKVswXTsKICB9IGVsc2UgewogICAgcmV0dXJuIGVsLmNsb25lTm9kZSh0cnVlKTsKICB9Cn0KCmZ1bmN0aW9uIHNldFJlY3QoZWwsIHJlY3QpIHsKICBjc3MoZWwsICdwb3NpdGlvbicsICdhYnNvbHV0ZScpOwogIGNzcyhlbCwgJ3RvcCcsIHJlY3QudG9wKTsKICBjc3MoZWwsICdsZWZ0JywgcmVjdC5sZWZ0KTsKICBjc3MoZWwsICd3aWR0aCcsIHJlY3Qud2lkdGgpOwogIGNzcyhlbCwgJ2hlaWdodCcsIHJlY3QuaGVpZ2h0KTsKfQoKZnVuY3Rpb24gdW5zZXRSZWN0KGVsKSB7CiAgY3NzKGVsLCAncG9zaXRpb24nLCAnJyk7CiAgY3NzKGVsLCAndG9wJywgJycpOwogIGNzcyhlbCwgJ2xlZnQnLCAnJyk7CiAgY3NzKGVsLCAnd2lkdGgnLCAnJyk7CiAgY3NzKGVsLCAnaGVpZ2h0JywgJycpOwp9Cgp2YXIgZXhwYW5kbyA9ICdTb3J0YWJsZScgKyBuZXcgRGF0ZSgpLmdldFRpbWUoKTsKCmZ1bmN0aW9uIEFuaW1hdGlvblN0YXRlTWFuYWdlcigpIHsKICB2YXIgYW5pbWF0aW9uU3RhdGVzID0gW10sCiAgICAgIGFuaW1hdGlvbkNhbGxiYWNrSWQ7CiAgcmV0dXJuIHsKICAgIGNhcHR1cmVBbmltYXRpb25TdGF0ZTogZnVuY3Rpb24gY2FwdHVyZUFuaW1hdGlvblN0YXRlKCkgewogICAgICBhbmltYXRpb25TdGF0ZXMgPSBbXTsKICAgICAgaWYgKCF0aGlzLm9wdGlvbnMuYW5pbWF0aW9uKSByZXR1cm47CiAgICAgIHZhciBjaGlsZHJlbiA9IFtdLnNsaWNlLmNhbGwodGhpcy5lbC5jaGlsZHJlbik7CiAgICAgIGNoaWxkcmVuLmZvckVhY2goZnVuY3Rpb24gKGNoaWxkKSB7CiAgICAgICAgaWYgKGNzcyhjaGlsZCwgJ2Rpc3BsYXknKSA9PT0gJ25vbmUnIHx8IGNoaWxkID09PSBTb3J0YWJsZS5naG9zdCkgcmV0dXJuOwogICAgICAgIGFuaW1hdGlvblN0YXRlcy5wdXNoKHsKICAgICAgICAgIHRhcmdldDogY2hpbGQsCiAgICAgICAgICByZWN0OiBnZXRSZWN0KGNoaWxkKQogICAgICAgIH0pOwoKICAgICAgICB2YXIgZnJvbVJlY3QgPSBfb2JqZWN0U3ByZWFkKHt9LCBhbmltYXRpb25TdGF0ZXNbYW5pbWF0aW9uU3RhdGVzLmxlbmd0aCAtIDFdLnJlY3QpOyAvLyBJZiBhbmltYXRpbmc6IGNvbXBlbnNhdGUgZm9yIGN1cnJlbnQgYW5pbWF0aW9uCgoKICAgICAgICBpZiAoY2hpbGQudGhpc0FuaW1hdGlvbkR1cmF0aW9uKSB7CiAgICAgICAgICB2YXIgY2hpbGRNYXRyaXggPSBtYXRyaXgoY2hpbGQsIHRydWUpOwoKICAgICAgICAgIGlmIChjaGlsZE1hdHJpeCkgewogICAgICAgICAgICBmcm9tUmVjdC50b3AgLT0gY2hpbGRNYXRyaXguZjsKICAgICAgICAgICAgZnJvbVJlY3QubGVmdCAtPSBjaGlsZE1hdHJpeC5lOwogICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgY2hpbGQuZnJvbVJlY3QgPSBmcm9tUmVjdDsKICAgICAgfSk7CiAgICB9LAogICAgYWRkQW5pbWF0aW9uU3RhdGU6IGZ1bmN0aW9uIGFkZEFuaW1hdGlvblN0YXRlKHN0YXRlKSB7CiAgICAgIGFuaW1hdGlvblN0YXRlcy5wdXNoKHN0YXRlKTsKICAgIH0sCiAgICByZW1vdmVBbmltYXRpb25TdGF0ZTogZnVuY3Rpb24gcmVtb3ZlQW5pbWF0aW9uU3RhdGUodGFyZ2V0KSB7CiAgICAgIGFuaW1hdGlvblN0YXRlcy5zcGxpY2UoaW5kZXhPZk9iamVjdChhbmltYXRpb25TdGF0ZXMsIHsKICAgICAgICB0YXJnZXQ6IHRhcmdldAogICAgICB9KSwgMSk7CiAgICB9LAogICAgYW5pbWF0ZUFsbDogZnVuY3Rpb24gYW5pbWF0ZUFsbChjYWxsYmFjaykgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgaWYgKCF0aGlzLm9wdGlvbnMuYW5pbWF0aW9uKSB7CiAgICAgICAgY2xlYXJUaW1lb3V0KGFuaW1hdGlvbkNhbGxiYWNrSWQpOwogICAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIGNhbGxiYWNrKCk7CiAgICAgICAgcmV0dXJuOwogICAgICB9CgogICAgICB2YXIgYW5pbWF0aW5nID0gZmFsc2UsCiAgICAgICAgICBhbmltYXRpb25UaW1lID0gMDsKICAgICAgYW5pbWF0aW9uU3RhdGVzLmZvckVhY2goZnVuY3Rpb24gKHN0YXRlKSB7CiAgICAgICAgdmFyIHRpbWUgPSAwLAogICAgICAgICAgICB0YXJnZXQgPSBzdGF0ZS50YXJnZXQsCiAgICAgICAgICAgIGZyb21SZWN0ID0gdGFyZ2V0LmZyb21SZWN0LAogICAgICAgICAgICB0b1JlY3QgPSBnZXRSZWN0KHRhcmdldCksCiAgICAgICAgICAgIHByZXZGcm9tUmVjdCA9IHRhcmdldC5wcmV2RnJvbVJlY3QsCiAgICAgICAgICAgIHByZXZUb1JlY3QgPSB0YXJnZXQucHJldlRvUmVjdCwKICAgICAgICAgICAgYW5pbWF0aW5nUmVjdCA9IHN0YXRlLnJlY3QsCiAgICAgICAgICAgIHRhcmdldE1hdHJpeCA9IG1hdHJpeCh0YXJnZXQsIHRydWUpOwoKICAgICAgICBpZiAodGFyZ2V0TWF0cml4KSB7CiAgICAgICAgICAvLyBDb21wZW5zYXRlIGZvciBjdXJyZW50IGFuaW1hdGlvbgogICAgICAgICAgdG9SZWN0LnRvcCAtPSB0YXJnZXRNYXRyaXguZjsKICAgICAgICAgIHRvUmVjdC5sZWZ0IC09IHRhcmdldE1hdHJpeC5lOwogICAgICAgIH0KCiAgICAgICAgdGFyZ2V0LnRvUmVjdCA9IHRvUmVjdDsKCiAgICAgICAgaWYgKHRhcmdldC50aGlzQW5pbWF0aW9uRHVyYXRpb24pIHsKICAgICAgICAgIC8vIENvdWxkIGFsc28gY2hlY2sgaWYgYW5pbWF0aW5nUmVjdCBpcyBiZXR3ZWVuIGZyb21SZWN0IGFuZCB0b1JlY3QKICAgICAgICAgIGlmIChpc1JlY3RFcXVhbChwcmV2RnJvbVJlY3QsIHRvUmVjdCkgJiYgIWlzUmVjdEVxdWFsKGZyb21SZWN0LCB0b1JlY3QpICYmIC8vIE1ha2Ugc3VyZSBhbmltYXRpbmdSZWN0IGlzIG9uIGxpbmUgYmV0d2VlbiB0b1JlY3QgJiBmcm9tUmVjdAogICAgICAgICAgKGFuaW1hdGluZ1JlY3QudG9wIC0gdG9SZWN0LnRvcCkgLyAoYW5pbWF0aW5nUmVjdC5sZWZ0IC0gdG9SZWN0LmxlZnQpID09PSAoZnJvbVJlY3QudG9wIC0gdG9SZWN0LnRvcCkgLyAoZnJvbVJlY3QubGVmdCAtIHRvUmVjdC5sZWZ0KSkgewogICAgICAgICAgICAvLyBJZiByZXR1cm5pbmcgdG8gc2FtZSBwbGFjZSBhcyBzdGFydGVkIGZyb20gYW5pbWF0aW9uIGFuZCBvbiBzYW1lIGF4aXMKICAgICAgICAgICAgdGltZSA9IGNhbGN1bGF0ZVJlYWxUaW1lKGFuaW1hdGluZ1JlY3QsIHByZXZGcm9tUmVjdCwgcHJldlRvUmVjdCwgX3RoaXMub3B0aW9ucyk7CiAgICAgICAgICB9CiAgICAgICAgfSAvLyBpZiBmcm9tUmVjdCAhPSB0b1JlY3Q6IGFuaW1hdGUKCgogICAgICAgIGlmICghaXNSZWN0RXF1YWwodG9SZWN0LCBmcm9tUmVjdCkpIHsKICAgICAgICAgIHRhcmdldC5wcmV2RnJvbVJlY3QgPSBmcm9tUmVjdDsKICAgICAgICAgIHRhcmdldC5wcmV2VG9SZWN0ID0gdG9SZWN0OwoKICAgICAgICAgIGlmICghdGltZSkgewogICAgICAgICAgICB0aW1lID0gX3RoaXMub3B0aW9ucy5hbmltYXRpb247CiAgICAgICAgICB9CgogICAgICAgICAgX3RoaXMuYW5pbWF0ZSh0YXJnZXQsIGFuaW1hdGluZ1JlY3QsIHRvUmVjdCwgdGltZSk7CiAgICAgICAgfQoKICAgICAgICBpZiAodGltZSkgewogICAgICAgICAgYW5pbWF0aW5nID0gdHJ1ZTsKICAgICAgICAgIGFuaW1hdGlvblRpbWUgPSBNYXRoLm1heChhbmltYXRpb25UaW1lLCB0aW1lKTsKICAgICAgICAgIGNsZWFyVGltZW91dCh0YXJnZXQuYW5pbWF0aW9uUmVzZXRUaW1lcik7CiAgICAgICAgICB0YXJnZXQuYW5pbWF0aW9uUmVzZXRUaW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgewogICAgICAgICAgICB0YXJnZXQuYW5pbWF0aW9uVGltZSA9IDA7CiAgICAgICAgICAgIHRhcmdldC5wcmV2RnJvbVJlY3QgPSBudWxsOwogICAgICAgICAgICB0YXJnZXQuZnJvbVJlY3QgPSBudWxsOwogICAgICAgICAgICB0YXJnZXQucHJldlRvUmVjdCA9IG51bGw7CiAgICAgICAgICAgIHRhcmdldC50aGlzQW5pbWF0aW9uRHVyYXRpb24gPSBudWxsOwogICAgICAgICAgfSwgdGltZSk7CiAgICAgICAgICB0YXJnZXQudGhpc0FuaW1hdGlvbkR1cmF0aW9uID0gdGltZTsKICAgICAgICB9CiAgICAgIH0pOwogICAgICBjbGVhclRpbWVvdXQoYW5pbWF0aW9uQ2FsbGJhY2tJZCk7CgogICAgICBpZiAoIWFuaW1hdGluZykgewogICAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIGNhbGxiYWNrKCk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgYW5pbWF0aW9uQ2FsbGJhY2tJZCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgewogICAgICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJykgY2FsbGJhY2soKTsKICAgICAgICB9LCBhbmltYXRpb25UaW1lKTsKICAgICAgfQoKICAgICAgYW5pbWF0aW9uU3RhdGVzID0gW107CiAgICB9LAogICAgYW5pbWF0ZTogZnVuY3Rpb24gYW5pbWF0ZSh0YXJnZXQsIGN1cnJlbnRSZWN0LCB0b1JlY3QsIGR1cmF0aW9uKSB7CiAgICAgIGlmIChkdXJhdGlvbikgewogICAgICAgIGNzcyh0YXJnZXQsICd0cmFuc2l0aW9uJywgJycpOwogICAgICAgIGNzcyh0YXJnZXQsICd0cmFuc2Zvcm0nLCAnJyk7CiAgICAgICAgdmFyIGVsTWF0cml4ID0gbWF0cml4KHRoaXMuZWwpLAogICAgICAgICAgICBzY2FsZVggPSBlbE1hdHJpeCAmJiBlbE1hdHJpeC5hLAogICAgICAgICAgICBzY2FsZVkgPSBlbE1hdHJpeCAmJiBlbE1hdHJpeC5kLAogICAgICAgICAgICB0cmFuc2xhdGVYID0gKGN1cnJlbnRSZWN0LmxlZnQgLSB0b1JlY3QubGVmdCkgLyAoc2NhbGVYIHx8IDEpLAogICAgICAgICAgICB0cmFuc2xhdGVZID0gKGN1cnJlbnRSZWN0LnRvcCAtIHRvUmVjdC50b3ApIC8gKHNjYWxlWSB8fCAxKTsKICAgICAgICB0YXJnZXQuYW5pbWF0aW5nWCA9ICEhdHJhbnNsYXRlWDsKICAgICAgICB0YXJnZXQuYW5pbWF0aW5nWSA9ICEhdHJhbnNsYXRlWTsKICAgICAgICBjc3ModGFyZ2V0LCAndHJhbnNmb3JtJywgJ3RyYW5zbGF0ZTNkKCcgKyB0cmFuc2xhdGVYICsgJ3B4LCcgKyB0cmFuc2xhdGVZICsgJ3B4LDApJyk7CiAgICAgICAgcmVwYWludCh0YXJnZXQpOyAvLyByZXBhaW50CgogICAgICAgIGNzcyh0YXJnZXQsICd0cmFuc2l0aW9uJywgJ3RyYW5zZm9ybSAnICsgZHVyYXRpb24gKyAnbXMnICsgKHRoaXMub3B0aW9ucy5lYXNpbmcgPyAnICcgKyB0aGlzLm9wdGlvbnMuZWFzaW5nIDogJycpKTsKICAgICAgICBjc3ModGFyZ2V0LCAndHJhbnNmb3JtJywgJ3RyYW5zbGF0ZTNkKDAsMCwwKScpOwogICAgICAgIHR5cGVvZiB0YXJnZXQuYW5pbWF0ZWQgPT09ICdudW1iZXInICYmIGNsZWFyVGltZW91dCh0YXJnZXQuYW5pbWF0ZWQpOwogICAgICAgIHRhcmdldC5hbmltYXRlZCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgewogICAgICAgICAgY3NzKHRhcmdldCwgJ3RyYW5zaXRpb24nLCAnJyk7CiAgICAgICAgICBjc3ModGFyZ2V0LCAndHJhbnNmb3JtJywgJycpOwogICAgICAgICAgdGFyZ2V0LmFuaW1hdGVkID0gZmFsc2U7CiAgICAgICAgICB0YXJnZXQuYW5pbWF0aW5nWCA9IGZhbHNlOwogICAgICAgICAgdGFyZ2V0LmFuaW1hdGluZ1kgPSBmYWxzZTsKICAgICAgICB9LCBkdXJhdGlvbik7CiAgICAgIH0KICAgIH0KICB9Owp9CgpmdW5jdGlvbiByZXBhaW50KHRhcmdldCkgewogIHJldHVybiB0YXJnZXQub2Zmc2V0V2lkdGg7Cn0KCmZ1bmN0aW9uIGNhbGN1bGF0ZVJlYWxUaW1lKGFuaW1hdGluZ1JlY3QsIGZyb21SZWN0LCB0b1JlY3QsIG9wdGlvbnMpIHsKICByZXR1cm4gTWF0aC5zcXJ0KE1hdGgucG93KGZyb21SZWN0LnRvcCAtIGFuaW1hdGluZ1JlY3QudG9wLCAyKSArIE1hdGgucG93KGZyb21SZWN0LmxlZnQgLSBhbmltYXRpbmdSZWN0LmxlZnQsIDIpKSAvIE1hdGguc3FydChNYXRoLnBvdyhmcm9tUmVjdC50b3AgLSB0b1JlY3QudG9wLCAyKSArIE1hdGgucG93KGZyb21SZWN0LmxlZnQgLSB0b1JlY3QubGVmdCwgMikpICogb3B0aW9ucy5hbmltYXRpb247Cn0KCnZhciBwbHVnaW5zID0gW107CnZhciBkZWZhdWx0cyA9IHsKICBpbml0aWFsaXplQnlEZWZhdWx0OiB0cnVlCn07CnZhciBQbHVnaW5NYW5hZ2VyID0gewogIG1vdW50OiBmdW5jdGlvbiBtb3VudChwbHVnaW4pIHsKICAgIC8vIFNldCBkZWZhdWx0IHN0YXRpYyBwcm9wZXJ0aWVzCiAgICBmb3IgKHZhciBvcHRpb24gaW4gZGVmYXVsdHMpIHsKICAgICAgaWYgKGRlZmF1bHRzLmhhc093blByb3BlcnR5KG9wdGlvbikgJiYgIShvcHRpb24gaW4gcGx1Z2luKSkgewogICAgICAgIHBsdWdpbltvcHRpb25dID0gZGVmYXVsdHNbb3B0aW9uXTsKICAgICAgfQogICAgfQoKICAgIHBsdWdpbnMucHVzaChwbHVnaW4pOwogIH0sCiAgcGx1Z2luRXZlbnQ6IGZ1bmN0aW9uIHBsdWdpbkV2ZW50KGV2ZW50TmFtZSwgc29ydGFibGUsIGV2dCkgewogICAgdmFyIF90aGlzID0gdGhpczsKCiAgICB0aGlzLmV2ZW50Q2FuY2VsZWQgPSBmYWxzZTsKCiAgICBldnQuY2FuY2VsID0gZnVuY3Rpb24gKCkgewogICAgICBfdGhpcy5ldmVudENhbmNlbGVkID0gdHJ1ZTsKICAgIH07CgogICAgdmFyIGV2ZW50TmFtZUdsb2JhbCA9IGV2ZW50TmFtZSArICdHbG9iYWwnOwogICAgcGx1Z2lucy5mb3JFYWNoKGZ1bmN0aW9uIChwbHVnaW4pIHsKICAgICAgaWYgKCFzb3J0YWJsZVtwbHVnaW4ucGx1Z2luTmFtZV0pIHJldHVybjsgLy8gRmlyZSBnbG9iYWwgZXZlbnRzIGlmIGl0IGV4aXN0cyBpbiB0aGlzIHNvcnRhYmxlCgogICAgICBpZiAoc29ydGFibGVbcGx1Z2luLnBsdWdpbk5hbWVdW2V2ZW50TmFtZUdsb2JhbF0pIHsKICAgICAgICBzb3J0YWJsZVtwbHVnaW4ucGx1Z2luTmFtZV1bZXZlbnROYW1lR2xvYmFsXShfb2JqZWN0U3ByZWFkKHsKICAgICAgICAgIHNvcnRhYmxlOiBzb3J0YWJsZQogICAgICAgIH0sIGV2dCkpOwogICAgICB9IC8vIE9ubHkgZmlyZSBwbHVnaW4gZXZlbnQgaWYgcGx1Z2luIGlzIGVuYWJsZWQgaW4gdGhpcyBzb3J0YWJsZSwKICAgICAgLy8gYW5kIHBsdWdpbiBoYXMgZXZlbnQgZGVmaW5lZAoKCiAgICAgIGlmIChzb3J0YWJsZS5vcHRpb25zW3BsdWdpbi5wbHVnaW5OYW1lXSAmJiBzb3J0YWJsZVtwbHVnaW4ucGx1Z2luTmFtZV1bZXZlbnROYW1lXSkgewogICAgICAgIHNvcnRhYmxlW3BsdWdpbi5wbHVnaW5OYW1lXVtldmVudE5hbWVdKF9vYmplY3RTcHJlYWQoewogICAgICAgICAgc29ydGFibGU6IHNvcnRhYmxlCiAgICAgICAgfSwgZXZ0KSk7CiAgICAgIH0KICAgIH0pOwogIH0sCiAgaW5pdGlhbGl6ZVBsdWdpbnM6IGZ1bmN0aW9uIGluaXRpYWxpemVQbHVnaW5zKHNvcnRhYmxlLCBlbCwgZGVmYXVsdHMsIG9wdGlvbnMpIHsKICAgIHBsdWdpbnMuZm9yRWFjaChmdW5jdGlvbiAocGx1Z2luKSB7CiAgICAgIHZhciBwbHVnaW5OYW1lID0gcGx1Z2luLnBsdWdpbk5hbWU7CiAgICAgIGlmICghc29ydGFibGUub3B0aW9uc1twbHVnaW5OYW1lXSAmJiAhcGx1Z2luLmluaXRpYWxpemVCeURlZmF1bHQpIHJldHVybjsKICAgICAgdmFyIGluaXRpYWxpemVkID0gbmV3IHBsdWdpbihzb3J0YWJsZSwgZWwsIHNvcnRhYmxlLm9wdGlvbnMpOwogICAgICBpbml0aWFsaXplZC5zb3J0YWJsZSA9IHNvcnRhYmxlOwogICAgICBpbml0aWFsaXplZC5vcHRpb25zID0gc29ydGFibGUub3B0aW9uczsKICAgICAgc29ydGFibGVbcGx1Z2luTmFtZV0gPSBpbml0aWFsaXplZDsgLy8gQWRkIGRlZmF1bHQgb3B0aW9ucyBmcm9tIHBsdWdpbgoKICAgICAgX2V4dGVuZHMoZGVmYXVsdHMsIGluaXRpYWxpemVkLmRlZmF1bHRzKTsKICAgIH0pOwoKICAgIGZvciAodmFyIG9wdGlvbiBpbiBzb3J0YWJsZS5vcHRpb25zKSB7CiAgICAgIGlmICghc29ydGFibGUub3B0aW9ucy5oYXNPd25Qcm9wZXJ0eShvcHRpb24pKSBjb250aW51ZTsKICAgICAgdmFyIG1vZGlmaWVkID0gdGhpcy5tb2RpZnlPcHRpb24oc29ydGFibGUsIG9wdGlvbiwgc29ydGFibGUub3B0aW9uc1tvcHRpb25dKTsKCiAgICAgIGlmICh0eXBlb2YgbW9kaWZpZWQgIT09ICd1bmRlZmluZWQnKSB7CiAgICAgICAgc29ydGFibGUub3B0aW9uc1tvcHRpb25dID0gbW9kaWZpZWQ7CiAgICAgIH0KICAgIH0KICB9LAogIGdldEV2ZW50UHJvcGVydGllczogZnVuY3Rpb24gZ2V0RXZlbnRQcm9wZXJ0aWVzKG5hbWUsIHNvcnRhYmxlKSB7CiAgICB2YXIgZXZlbnRQcm9wZXJ0aWVzID0ge307CiAgICBwbHVnaW5zLmZvckVhY2goZnVuY3Rpb24gKHBsdWdpbikgewogICAgICBpZiAodHlwZW9mIHBsdWdpbi5ldmVudFByb3BlcnRpZXMgIT09ICdmdW5jdGlvbicpIHJldHVybjsKCiAgICAgIF9leHRlbmRzKGV2ZW50UHJvcGVydGllcywgcGx1Z2luLmV2ZW50UHJvcGVydGllcy5jYWxsKHNvcnRhYmxlW3BsdWdpbi5wbHVnaW5OYW1lXSwgbmFtZSkpOwogICAgfSk7CiAgICByZXR1cm4gZXZlbnRQcm9wZXJ0aWVzOwogIH0sCiAgbW9kaWZ5T3B0aW9uOiBmdW5jdGlvbiBtb2RpZnlPcHRpb24oc29ydGFibGUsIG5hbWUsIHZhbHVlKSB7CiAgICB2YXIgbW9kaWZpZWRWYWx1ZTsKICAgIHBsdWdpbnMuZm9yRWFjaChmdW5jdGlvbiAocGx1Z2luKSB7CiAgICAgIC8vIFBsdWdpbiBtdXN0IGV4aXN0IG9uIHRoZSBTb3J0YWJsZQogICAgICBpZiAoIXNvcnRhYmxlW3BsdWdpbi5wbHVnaW5OYW1lXSkgcmV0dXJuOyAvLyBJZiBzdGF0aWMgb3B0aW9uIGxpc3RlbmVyIGV4aXN0cyBmb3IgdGhpcyBvcHRpb24sIGNhbGwgaW4gdGhlIGNvbnRleHQgb2YgdGhlIFNvcnRhYmxlJ3MgaW5zdGFuY2Ugb2YgdGhpcyBwbHVnaW4KCiAgICAgIGlmIChwbHVnaW4ub3B0aW9uTGlzdGVuZXJzICYmIHR5cGVvZiBwbHVnaW4ub3B0aW9uTGlzdGVuZXJzW25hbWVdID09PSAnZnVuY3Rpb24nKSB7CiAgICAgICAgbW9kaWZpZWRWYWx1ZSA9IHBsdWdpbi5vcHRpb25MaXN0ZW5lcnNbbmFtZV0uY2FsbChzb3J0YWJsZVtwbHVnaW4ucGx1Z2luTmFtZV0sIHZhbHVlKTsKICAgICAgfQogICAgfSk7CiAgICByZXR1cm4gbW9kaWZpZWRWYWx1ZTsKICB9Cn07CgpmdW5jdGlvbiBkaXNwYXRjaEV2ZW50KF9yZWYpIHsKICB2YXIgc29ydGFibGUgPSBfcmVmLnNvcnRhYmxlLAogICAgICByb290RWwgPSBfcmVmLnJvb3RFbCwKICAgICAgbmFtZSA9IF9yZWYubmFtZSwKICAgICAgdGFyZ2V0RWwgPSBfcmVmLnRhcmdldEVsLAogICAgICBjbG9uZUVsID0gX3JlZi5jbG9uZUVsLAogICAgICB0b0VsID0gX3JlZi50b0VsLAogICAgICBmcm9tRWwgPSBfcmVmLmZyb21FbCwKICAgICAgb2xkSW5kZXggPSBfcmVmLm9sZEluZGV4LAogICAgICBuZXdJbmRleCA9IF9yZWYubmV3SW5kZXgsCiAgICAgIG9sZERyYWdnYWJsZUluZGV4ID0gX3JlZi5vbGREcmFnZ2FibGVJbmRleCwKICAgICAgbmV3RHJhZ2dhYmxlSW5kZXggPSBfcmVmLm5ld0RyYWdnYWJsZUluZGV4LAogICAgICBvcmlnaW5hbEV2ZW50ID0gX3JlZi5vcmlnaW5hbEV2ZW50LAogICAgICBwdXRTb3J0YWJsZSA9IF9yZWYucHV0U29ydGFibGUsCiAgICAgIGV4dHJhRXZlbnRQcm9wZXJ0aWVzID0gX3JlZi5leHRyYUV2ZW50UHJvcGVydGllczsKICBzb3J0YWJsZSA9IHNvcnRhYmxlIHx8IHJvb3RFbCAmJiByb290RWxbZXhwYW5kb107CiAgaWYgKCFzb3J0YWJsZSkgcmV0dXJuOwogIHZhciBldnQsCiAgICAgIG9wdGlvbnMgPSBzb3J0YWJsZS5vcHRpb25zLAogICAgICBvbk5hbWUgPSAnb24nICsgbmFtZS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIG5hbWUuc3Vic3RyKDEpOyAvLyBTdXBwb3J0IGZvciBuZXcgQ3VzdG9tRXZlbnQgZmVhdHVyZQoKICBpZiAod2luZG93LkN1c3RvbUV2ZW50ICYmICFJRTExT3JMZXNzICYmICFFZGdlKSB7CiAgICBldnQgPSBuZXcgQ3VzdG9tRXZlbnQobmFtZSwgewogICAgICBidWJibGVzOiB0cnVlLAogICAgICBjYW5jZWxhYmxlOiB0cnVlCiAgICB9KTsKICB9IGVsc2UgewogICAgZXZ0ID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoJ0V2ZW50Jyk7CiAgICBldnQuaW5pdEV2ZW50KG5hbWUsIHRydWUsIHRydWUpOwogIH0KCiAgZXZ0LnRvID0gdG9FbCB8fCByb290RWw7CiAgZXZ0LmZyb20gPSBmcm9tRWwgfHwgcm9vdEVsOwogIGV2dC5pdGVtID0gdGFyZ2V0RWwgfHwgcm9vdEVsOwogIGV2dC5jbG9uZSA9IGNsb25lRWw7CiAgZXZ0Lm9sZEluZGV4ID0gb2xkSW5kZXg7CiAgZXZ0Lm5ld0luZGV4ID0gbmV3SW5kZXg7CiAgZXZ0Lm9sZERyYWdnYWJsZUluZGV4ID0gb2xkRHJhZ2dhYmxlSW5kZXg7CiAgZXZ0Lm5ld0RyYWdnYWJsZUluZGV4ID0gbmV3RHJhZ2dhYmxlSW5kZXg7CiAgZXZ0Lm9yaWdpbmFsRXZlbnQgPSBvcmlnaW5hbEV2ZW50OwogIGV2dC5wdWxsTW9kZSA9IHB1dFNvcnRhYmxlID8gcHV0U29ydGFibGUubGFzdFB1dE1vZGUgOiB1bmRlZmluZWQ7CgogIHZhciBhbGxFdmVudFByb3BlcnRpZXMgPSBfb2JqZWN0U3ByZWFkKHt9LCBleHRyYUV2ZW50UHJvcGVydGllcywgUGx1Z2luTWFuYWdlci5nZXRFdmVudFByb3BlcnRpZXMobmFtZSwgc29ydGFibGUpKTsKCiAgZm9yICh2YXIgb3B0aW9uIGluIGFsbEV2ZW50UHJvcGVydGllcykgewogICAgZXZ0W29wdGlvbl0gPSBhbGxFdmVudFByb3BlcnRpZXNbb3B0aW9uXTsKICB9CgogIGlmIChyb290RWwpIHsKICAgIHJvb3RFbC5kaXNwYXRjaEV2ZW50KGV2dCk7CiAgfQoKICBpZiAob3B0aW9uc1tvbk5hbWVdKSB7CiAgICBvcHRpb25zW29uTmFtZV0uY2FsbChzb3J0YWJsZSwgZXZ0KTsKICB9Cn0KCnZhciBwbHVnaW5FdmVudCA9IGZ1bmN0aW9uIHBsdWdpbkV2ZW50KGV2ZW50TmFtZSwgc29ydGFibGUpIHsKICB2YXIgX3JlZiA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDoge30sCiAgICAgIG9yaWdpbmFsRXZlbnQgPSBfcmVmLmV2dCwKICAgICAgZGF0YSA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcmVmLCBbImV2dCJdKTsKCiAgUGx1Z2luTWFuYWdlci5wbHVnaW5FdmVudC5iaW5kKFNvcnRhYmxlKShldmVudE5hbWUsIHNvcnRhYmxlLCBfb2JqZWN0U3ByZWFkKHsKICAgIGRyYWdFbDogZHJhZ0VsLAogICAgcGFyZW50RWw6IHBhcmVudEVsLAogICAgZ2hvc3RFbDogZ2hvc3RFbCwKICAgIHJvb3RFbDogcm9vdEVsLAogICAgbmV4dEVsOiBuZXh0RWwsCiAgICBsYXN0RG93bkVsOiBsYXN0RG93bkVsLAogICAgY2xvbmVFbDogY2xvbmVFbCwKICAgIGNsb25lSGlkZGVuOiBjbG9uZUhpZGRlbiwKICAgIGRyYWdTdGFydGVkOiBtb3ZlZCwKICAgIHB1dFNvcnRhYmxlOiBwdXRTb3J0YWJsZSwKICAgIGFjdGl2ZVNvcnRhYmxlOiBTb3J0YWJsZS5hY3RpdmUsCiAgICBvcmlnaW5hbEV2ZW50OiBvcmlnaW5hbEV2ZW50LAogICAgb2xkSW5kZXg6IG9sZEluZGV4LAogICAgb2xkRHJhZ2dhYmxlSW5kZXg6IG9sZERyYWdnYWJsZUluZGV4LAogICAgbmV3SW5kZXg6IG5ld0luZGV4LAogICAgbmV3RHJhZ2dhYmxlSW5kZXg6IG5ld0RyYWdnYWJsZUluZGV4LAogICAgaGlkZUdob3N0Rm9yVGFyZ2V0OiBfaGlkZUdob3N0Rm9yVGFyZ2V0LAogICAgdW5oaWRlR2hvc3RGb3JUYXJnZXQ6IF91bmhpZGVHaG9zdEZvclRhcmdldCwKICAgIGNsb25lTm93SGlkZGVuOiBmdW5jdGlvbiBjbG9uZU5vd0hpZGRlbigpIHsKICAgICAgY2xvbmVIaWRkZW4gPSB0cnVlOwogICAgfSwKICAgIGNsb25lTm93U2hvd246IGZ1bmN0aW9uIGNsb25lTm93U2hvd24oKSB7CiAgICAgIGNsb25lSGlkZGVuID0gZmFsc2U7CiAgICB9LAogICAgZGlzcGF0Y2hTb3J0YWJsZUV2ZW50OiBmdW5jdGlvbiBkaXNwYXRjaFNvcnRhYmxlRXZlbnQobmFtZSkgewogICAgICBfZGlzcGF0Y2hFdmVudCh7CiAgICAgICAgc29ydGFibGU6IHNvcnRhYmxlLAogICAgICAgIG5hbWU6IG5hbWUsCiAgICAgICAgb3JpZ2luYWxFdmVudDogb3JpZ2luYWxFdmVudAogICAgICB9KTsKICAgIH0KICB9LCBkYXRhKSk7Cn07CgpmdW5jdGlvbiBfZGlzcGF0Y2hFdmVudChpbmZvKSB7CiAgZGlzcGF0Y2hFdmVudChfb2JqZWN0U3ByZWFkKHsKICAgIHB1dFNvcnRhYmxlOiBwdXRTb3J0YWJsZSwKICAgIGNsb25lRWw6IGNsb25lRWwsCiAgICB0YXJnZXRFbDogZHJhZ0VsLAogICAgcm9vdEVsOiByb290RWwsCiAgICBvbGRJbmRleDogb2xkSW5kZXgsCiAgICBvbGREcmFnZ2FibGVJbmRleDogb2xkRHJhZ2dhYmxlSW5kZXgsCiAgICBuZXdJbmRleDogbmV3SW5kZXgsCiAgICBuZXdEcmFnZ2FibGVJbmRleDogbmV3RHJhZ2dhYmxlSW5kZXgKICB9LCBpbmZvKSk7Cn0KCnZhciBkcmFnRWwsCiAgICBwYXJlbnRFbCwKICAgIGdob3N0RWwsCiAgICByb290RWwsCiAgICBuZXh0RWwsCiAgICBsYXN0RG93bkVsLAogICAgY2xvbmVFbCwKICAgIGNsb25lSGlkZGVuLAogICAgb2xkSW5kZXgsCiAgICBuZXdJbmRleCwKICAgIG9sZERyYWdnYWJsZUluZGV4LAogICAgbmV3RHJhZ2dhYmxlSW5kZXgsCiAgICBhY3RpdmVHcm91cCwKICAgIHB1dFNvcnRhYmxlLAogICAgYXdhaXRpbmdEcmFnU3RhcnRlZCA9IGZhbHNlLAogICAgaWdub3JlTmV4dENsaWNrID0gZmFsc2UsCiAgICBzb3J0YWJsZXMgPSBbXSwKICAgIHRhcEV2dCwKICAgIHRvdWNoRXZ0LAogICAgbGFzdER4LAogICAgbGFzdER5LAogICAgdGFwRGlzdGFuY2VMZWZ0LAogICAgdGFwRGlzdGFuY2VUb3AsCiAgICBtb3ZlZCwKICAgIGxhc3RUYXJnZXQsCiAgICBsYXN0RGlyZWN0aW9uLAogICAgcGFzdEZpcnN0SW52ZXJ0VGhyZXNoID0gZmFsc2UsCiAgICBpc0NpcmN1bXN0YW50aWFsSW52ZXJ0ID0gZmFsc2UsCiAgICB0YXJnZXRNb3ZlRGlzdGFuY2UsCiAgICAvLyBGb3IgcG9zaXRpb25pbmcgZ2hvc3QgYWJzb2x1dGVseQpnaG9zdFJlbGF0aXZlUGFyZW50LAogICAgZ2hvc3RSZWxhdGl2ZVBhcmVudEluaXRpYWxTY3JvbGwgPSBbXSwKICAgIC8vIChsZWZ0LCB0b3ApCl9zaWxlbnQgPSBmYWxzZSwKICAgIHNhdmVkSW5wdXRDaGVja2VkID0gW107Ci8qKiBAY29uc3QgKi8KCnZhciBkb2N1bWVudEV4aXN0cyA9IHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcsCiAgICBQb3NpdGlvbkdob3N0QWJzb2x1dGVseSA9IElPUywKICAgIENTU0Zsb2F0UHJvcGVydHkgPSBFZGdlIHx8IElFMTFPckxlc3MgPyAnY3NzRmxvYXQnIDogJ2Zsb2F0JywKICAgIC8vIFRoaXMgd2lsbCBub3QgcGFzcyBmb3IgSUU5LCBiZWNhdXNlIElFOSBEbkQgb25seSB3b3JrcyBvbiBhbmNob3JzCnN1cHBvcnREcmFnZ2FibGUgPSBkb2N1bWVudEV4aXN0cyAmJiAhQ2hyb21lRm9yQW5kcm9pZCAmJiAhSU9TICYmICdkcmFnZ2FibGUnIGluIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpLAogICAgc3VwcG9ydENzc1BvaW50ZXJFdmVudHMgPSBmdW5jdGlvbiAoKSB7CiAgaWYgKCFkb2N1bWVudEV4aXN0cykgcmV0dXJuOyAvLyBmYWxzZSB3aGVuIDw9IElFMTEKCiAgaWYgKElFMTFPckxlc3MpIHsKICAgIHJldHVybiBmYWxzZTsKICB9CgogIHZhciBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3gnKTsKICBlbC5zdHlsZS5jc3NUZXh0ID0gJ3BvaW50ZXItZXZlbnRzOmF1dG8nOwogIHJldHVybiBlbC5zdHlsZS5wb2ludGVyRXZlbnRzID09PSAnYXV0byc7Cn0oKSwKICAgIF9kZXRlY3REaXJlY3Rpb24gPSBmdW5jdGlvbiBfZGV0ZWN0RGlyZWN0aW9uKGVsLCBvcHRpb25zKSB7CiAgdmFyIGVsQ1NTID0gY3NzKGVsKSwKICAgICAgZWxXaWR0aCA9IHBhcnNlSW50KGVsQ1NTLndpZHRoKSAtIHBhcnNlSW50KGVsQ1NTLnBhZGRpbmdMZWZ0KSAtIHBhcnNlSW50KGVsQ1NTLnBhZGRpbmdSaWdodCkgLSBwYXJzZUludChlbENTUy5ib3JkZXJMZWZ0V2lkdGgpIC0gcGFyc2VJbnQoZWxDU1MuYm9yZGVyUmlnaHRXaWR0aCksCiAgICAgIGNoaWxkMSA9IGdldENoaWxkKGVsLCAwLCBvcHRpb25zKSwKICAgICAgY2hpbGQyID0gZ2V0Q2hpbGQoZWwsIDEsIG9wdGlvbnMpLAogICAgICBmaXJzdENoaWxkQ1NTID0gY2hpbGQxICYmIGNzcyhjaGlsZDEpLAogICAgICBzZWNvbmRDaGlsZENTUyA9IGNoaWxkMiAmJiBjc3MoY2hpbGQyKSwKICAgICAgZmlyc3RDaGlsZFdpZHRoID0gZmlyc3RDaGlsZENTUyAmJiBwYXJzZUludChmaXJzdENoaWxkQ1NTLm1hcmdpbkxlZnQpICsgcGFyc2VJbnQoZmlyc3RDaGlsZENTUy5tYXJnaW5SaWdodCkgKyBnZXRSZWN0KGNoaWxkMSkud2lkdGgsCiAgICAgIHNlY29uZENoaWxkV2lkdGggPSBzZWNvbmRDaGlsZENTUyAmJiBwYXJzZUludChzZWNvbmRDaGlsZENTUy5tYXJnaW5MZWZ0KSArIHBhcnNlSW50KHNlY29uZENoaWxkQ1NTLm1hcmdpblJpZ2h0KSArIGdldFJlY3QoY2hpbGQyKS53aWR0aDsKCiAgaWYgKGVsQ1NTLmRpc3BsYXkgPT09ICdmbGV4JykgewogICAgcmV0dXJuIGVsQ1NTLmZsZXhEaXJlY3Rpb24gPT09ICdjb2x1bW4nIHx8IGVsQ1NTLmZsZXhEaXJlY3Rpb24gPT09ICdjb2x1bW4tcmV2ZXJzZScgPyAndmVydGljYWwnIDogJ2hvcml6b250YWwnOwogIH0KCiAgaWYgKGVsQ1NTLmRpc3BsYXkgPT09ICdncmlkJykgewogICAgcmV0dXJuIGVsQ1NTLmdyaWRUZW1wbGF0ZUNvbHVtbnMuc3BsaXQoJyAnKS5sZW5ndGggPD0gMSA/ICd2ZXJ0aWNhbCcgOiAnaG9yaXpvbnRhbCc7CiAgfQoKICBpZiAoY2hpbGQxICYmIGZpcnN0Q2hpbGRDU1NbImZsb2F0Il0gJiYgZmlyc3RDaGlsZENTU1siZmxvYXQiXSAhPT0gJ25vbmUnKSB7CiAgICB2YXIgdG91Y2hpbmdTaWRlQ2hpbGQyID0gZmlyc3RDaGlsZENTU1siZmxvYXQiXSA9PT0gJ2xlZnQnID8gJ2xlZnQnIDogJ3JpZ2h0JzsKICAgIHJldHVybiBjaGlsZDIgJiYgKHNlY29uZENoaWxkQ1NTLmNsZWFyID09PSAnYm90aCcgfHwgc2Vjb25kQ2hpbGRDU1MuY2xlYXIgPT09IHRvdWNoaW5nU2lkZUNoaWxkMikgPyAndmVydGljYWwnIDogJ2hvcml6b250YWwnOwogIH0KCiAgcmV0dXJuIGNoaWxkMSAmJiAoZmlyc3RDaGlsZENTUy5kaXNwbGF5ID09PSAnYmxvY2snIHx8IGZpcnN0Q2hpbGRDU1MuZGlzcGxheSA9PT0gJ2ZsZXgnIHx8IGZpcnN0Q2hpbGRDU1MuZGlzcGxheSA9PT0gJ3RhYmxlJyB8fCBmaXJzdENoaWxkQ1NTLmRpc3BsYXkgPT09ICdncmlkJyB8fCBmaXJzdENoaWxkV2lkdGggPj0gZWxXaWR0aCAmJiBlbENTU1tDU1NGbG9hdFByb3BlcnR5XSA9PT0gJ25vbmUnIHx8IGNoaWxkMiAmJiBlbENTU1tDU1NGbG9hdFByb3BlcnR5XSA9PT0gJ25vbmUnICYmIGZpcnN0Q2hpbGRXaWR0aCArIHNlY29uZENoaWxkV2lkdGggPiBlbFdpZHRoKSA/ICd2ZXJ0aWNhbCcgOiAnaG9yaXpvbnRhbCc7Cn0sCiAgICBfZHJhZ0VsSW5Sb3dDb2x1bW4gPSBmdW5jdGlvbiBfZHJhZ0VsSW5Sb3dDb2x1bW4oZHJhZ1JlY3QsIHRhcmdldFJlY3QsIHZlcnRpY2FsKSB7CiAgdmFyIGRyYWdFbFMxT3BwID0gdmVydGljYWwgPyBkcmFnUmVjdC5sZWZ0IDogZHJhZ1JlY3QudG9wLAogICAgICBkcmFnRWxTMk9wcCA9IHZlcnRpY2FsID8gZHJhZ1JlY3QucmlnaHQgOiBkcmFnUmVjdC5ib3R0b20sCiAgICAgIGRyYWdFbE9wcExlbmd0aCA9IHZlcnRpY2FsID8gZHJhZ1JlY3Qud2lkdGggOiBkcmFnUmVjdC5oZWlnaHQsCiAgICAgIHRhcmdldFMxT3BwID0gdmVydGljYWwgPyB0YXJnZXRSZWN0LmxlZnQgOiB0YXJnZXRSZWN0LnRvcCwKICAgICAgdGFyZ2V0UzJPcHAgPSB2ZXJ0aWNhbCA/IHRhcmdldFJlY3QucmlnaHQgOiB0YXJnZXRSZWN0LmJvdHRvbSwKICAgICAgdGFyZ2V0T3BwTGVuZ3RoID0gdmVydGljYWwgPyB0YXJnZXRSZWN0LndpZHRoIDogdGFyZ2V0UmVjdC5oZWlnaHQ7CiAgcmV0dXJuIGRyYWdFbFMxT3BwID09PSB0YXJnZXRTMU9wcCB8fCBkcmFnRWxTMk9wcCA9PT0gdGFyZ2V0UzJPcHAgfHwgZHJhZ0VsUzFPcHAgKyBkcmFnRWxPcHBMZW5ndGggLyAyID09PSB0YXJnZXRTMU9wcCArIHRhcmdldE9wcExlbmd0aCAvIDI7Cn0sCgovKioKICogRGV0ZWN0cyBmaXJzdCBuZWFyZXN0IGVtcHR5IHNvcnRhYmxlIHRvIFggYW5kIFkgcG9zaXRpb24gdXNpbmcgZW1wdHlJbnNlcnRUaHJlc2hvbGQuCiAqIEBwYXJhbSAge051bWJlcn0geCAgICAgIFggcG9zaXRpb24KICogQHBhcmFtICB7TnVtYmVyfSB5ICAgICAgWSBwb3NpdGlvbgogKiBAcmV0dXJuIHtIVE1MRWxlbWVudH0gICBFbGVtZW50IG9mIHRoZSBmaXJzdCBmb3VuZCBuZWFyZXN0IFNvcnRhYmxlCiAqLwpfZGV0ZWN0TmVhcmVzdEVtcHR5U29ydGFibGUgPSBmdW5jdGlvbiBfZGV0ZWN0TmVhcmVzdEVtcHR5U29ydGFibGUoeCwgeSkgewogIHZhciByZXQ7CiAgc29ydGFibGVzLnNvbWUoZnVuY3Rpb24gKHNvcnRhYmxlKSB7CiAgICBpZiAobGFzdENoaWxkKHNvcnRhYmxlKSkgcmV0dXJuOwogICAgdmFyIHJlY3QgPSBnZXRSZWN0KHNvcnRhYmxlKSwKICAgICAgICB0aHJlc2hvbGQgPSBzb3J0YWJsZVtleHBhbmRvXS5vcHRpb25zLmVtcHR5SW5zZXJ0VGhyZXNob2xkLAogICAgICAgIGluc2lkZUhvcml6b250YWxseSA9IHggPj0gcmVjdC5sZWZ0IC0gdGhyZXNob2xkICYmIHggPD0gcmVjdC5yaWdodCArIHRocmVzaG9sZCwKICAgICAgICBpbnNpZGVWZXJ0aWNhbGx5ID0geSA+PSByZWN0LnRvcCAtIHRocmVzaG9sZCAmJiB5IDw9IHJlY3QuYm90dG9tICsgdGhyZXNob2xkOwoKICAgIGlmICh0aHJlc2hvbGQgJiYgaW5zaWRlSG9yaXpvbnRhbGx5ICYmIGluc2lkZVZlcnRpY2FsbHkpIHsKICAgICAgcmV0dXJuIHJldCA9IHNvcnRhYmxlOwogICAgfQogIH0pOwogIHJldHVybiByZXQ7Cn0sCiAgICBfcHJlcGFyZUdyb3VwID0gZnVuY3Rpb24gX3ByZXBhcmVHcm91cChvcHRpb25zKSB7CiAgZnVuY3Rpb24gdG9Gbih2YWx1ZSwgcHVsbCkgewogICAgcmV0dXJuIGZ1bmN0aW9uICh0bywgZnJvbSwgZHJhZ0VsLCBldnQpIHsKICAgICAgdmFyIHNhbWVHcm91cCA9IHRvLm9wdGlvbnMuZ3JvdXAubmFtZSAmJiBmcm9tLm9wdGlvbnMuZ3JvdXAubmFtZSAmJiB0by5vcHRpb25zLmdyb3VwLm5hbWUgPT09IGZyb20ub3B0aW9ucy5ncm91cC5uYW1lOwoKICAgICAgaWYgKHZhbHVlID09IG51bGwgJiYgKHB1bGwgfHwgc2FtZUdyb3VwKSkgewogICAgICAgIC8vIERlZmF1bHQgcHVsbCB2YWx1ZQogICAgICAgIC8vIERlZmF1bHQgcHVsbCBhbmQgcHV0IHZhbHVlIGlmIHNhbWUgZ3JvdXAKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgfSBlbHNlIGlmICh2YWx1ZSA9PSBudWxsIHx8IHZhbHVlID09PSBmYWxzZSkgewogICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgfSBlbHNlIGlmIChwdWxsICYmIHZhbHVlID09PSAnY2xvbmUnKSB7CiAgICAgICAgcmV0dXJuIHZhbHVlOwogICAgICB9IGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJykgewogICAgICAgIHJldHVybiB0b0ZuKHZhbHVlKHRvLCBmcm9tLCBkcmFnRWwsIGV2dCksIHB1bGwpKHRvLCBmcm9tLCBkcmFnRWwsIGV2dCk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdmFyIG90aGVyR3JvdXAgPSAocHVsbCA/IHRvIDogZnJvbSkub3B0aW9ucy5ncm91cC5uYW1lOwogICAgICAgIHJldHVybiB2YWx1ZSA9PT0gdHJ1ZSB8fCB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnICYmIHZhbHVlID09PSBvdGhlckdyb3VwIHx8IHZhbHVlLmpvaW4gJiYgdmFsdWUuaW5kZXhPZihvdGhlckdyb3VwKSA+IC0xOwogICAgICB9CiAgICB9OwogIH0KCiAgdmFyIGdyb3VwID0ge307CiAgdmFyIG9yaWdpbmFsR3JvdXAgPSBvcHRpb25zLmdyb3VwOwoKICBpZiAoIW9yaWdpbmFsR3JvdXAgfHwgX3R5cGVvZihvcmlnaW5hbEdyb3VwKSAhPSAnb2JqZWN0JykgewogICAgb3JpZ2luYWxHcm91cCA9IHsKICAgICAgbmFtZTogb3JpZ2luYWxHcm91cAogICAgfTsKICB9CgogIGdyb3VwLm5hbWUgPSBvcmlnaW5hbEdyb3VwLm5hbWU7CiAgZ3JvdXAuY2hlY2tQdWxsID0gdG9GbihvcmlnaW5hbEdyb3VwLnB1bGwsIHRydWUpOwogIGdyb3VwLmNoZWNrUHV0ID0gdG9GbihvcmlnaW5hbEdyb3VwLnB1dCk7CiAgZ3JvdXAucmV2ZXJ0Q2xvbmUgPSBvcmlnaW5hbEdyb3VwLnJldmVydENsb25lOwogIG9wdGlvbnMuZ3JvdXAgPSBncm91cDsKfSwKICAgIF9oaWRlR2hvc3RGb3JUYXJnZXQgPSBmdW5jdGlvbiBfaGlkZUdob3N0Rm9yVGFyZ2V0KCkgewogIGlmICghc3VwcG9ydENzc1BvaW50ZXJFdmVudHMgJiYgZ2hvc3RFbCkgewogICAgY3NzKGdob3N0RWwsICdkaXNwbGF5JywgJ25vbmUnKTsKICB9Cn0sCiAgICBfdW5oaWRlR2hvc3RGb3JUYXJnZXQgPSBmdW5jdGlvbiBfdW5oaWRlR2hvc3RGb3JUYXJnZXQoKSB7CiAgaWYgKCFzdXBwb3J0Q3NzUG9pbnRlckV2ZW50cyAmJiBnaG9zdEVsKSB7CiAgICBjc3MoZ2hvc3RFbCwgJ2Rpc3BsYXknLCAnJyk7CiAgfQp9OyAvLyAjMTE4NCBmaXggLSBQcmV2ZW50IGNsaWNrIGV2ZW50IG9uIGZhbGxiYWNrIGlmIGRyYWdnZWQgYnV0IGl0ZW0gbm90IGNoYW5nZWQgcG9zaXRpb24KCgppZiAoZG9jdW1lbnRFeGlzdHMpIHsKICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uIChldnQpIHsKICAgIGlmIChpZ25vcmVOZXh0Q2xpY2spIHsKICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7CiAgICAgIGV2dC5zdG9wUHJvcGFnYXRpb24gJiYgZXZ0LnN0b3BQcm9wYWdhdGlvbigpOwogICAgICBldnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uICYmIGV2dC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTsKICAgICAgaWdub3JlTmV4dENsaWNrID0gZmFsc2U7CiAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KICB9LCB0cnVlKTsKfQoKdmFyIG5lYXJlc3RFbXB0eUluc2VydERldGVjdEV2ZW50ID0gZnVuY3Rpb24gbmVhcmVzdEVtcHR5SW5zZXJ0RGV0ZWN0RXZlbnQoZXZ0KSB7CiAgaWYgKGRyYWdFbCkgewogICAgZXZ0ID0gZXZ0LnRvdWNoZXMgPyBldnQudG91Y2hlc1swXSA6IGV2dDsKCiAgICB2YXIgbmVhcmVzdCA9IF9kZXRlY3ROZWFyZXN0RW1wdHlTb3J0YWJsZShldnQuY2xpZW50WCwgZXZ0LmNsaWVudFkpOwoKICAgIGlmIChuZWFyZXN0KSB7CiAgICAgIC8vIENyZWF0ZSBpbWl0YXRpb24gZXZlbnQKICAgICAgdmFyIGV2ZW50ID0ge307CgogICAgICBmb3IgKHZhciBpIGluIGV2dCkgewogICAgICAgIGlmIChldnQuaGFzT3duUHJvcGVydHkoaSkpIHsKICAgICAgICAgIGV2ZW50W2ldID0gZXZ0W2ldOwogICAgICAgIH0KICAgICAgfQoKICAgICAgZXZlbnQudGFyZ2V0ID0gZXZlbnQucm9vdEVsID0gbmVhcmVzdDsKICAgICAgZXZlbnQucHJldmVudERlZmF1bHQgPSB2b2lkIDA7CiAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbiA9IHZvaWQgMDsKCiAgICAgIG5lYXJlc3RbZXhwYW5kb10uX29uRHJhZ092ZXIoZXZlbnQpOwogICAgfQogIH0KfTsKCnZhciBfY2hlY2tPdXRzaWRlVGFyZ2V0RWwgPSBmdW5jdGlvbiBfY2hlY2tPdXRzaWRlVGFyZ2V0RWwoZXZ0KSB7CiAgaWYgKGRyYWdFbCkgewogICAgZHJhZ0VsLnBhcmVudE5vZGVbZXhwYW5kb10uX2lzT3V0c2lkZVRoaXNFbChldnQudGFyZ2V0KTsKICB9Cn07Ci8qKgogKiBAY2xhc3MgIFNvcnRhYmxlCiAqIEBwYXJhbSAge0hUTUxFbGVtZW50fSAgZWwKICogQHBhcmFtICB7T2JqZWN0fSAgICAgICBbb3B0aW9uc10KICovCgoKZnVuY3Rpb24gU29ydGFibGUoZWwsIG9wdGlvbnMpIHsKICBpZiAoIShlbCAmJiBlbC5ub2RlVHlwZSAmJiBlbC5ub2RlVHlwZSA9PT0gMSkpIHsKICAgIHRocm93ICJTb3J0YWJsZTogYGVsYCBtdXN0IGJlIGFuIEhUTUxFbGVtZW50LCBub3QgIi5jb25jYXQoe30udG9TdHJpbmcuY2FsbChlbCkpOwogIH0KCiAgdGhpcy5lbCA9IGVsOyAvLyByb290IGVsZW1lbnQKCiAgdGhpcy5vcHRpb25zID0gb3B0aW9ucyA9IF9leHRlbmRzKHt9LCBvcHRpb25zKTsgLy8gRXhwb3J0IGluc3RhbmNlCgogIGVsW2V4cGFuZG9dID0gdGhpczsKICB2YXIgZGVmYXVsdHMgPSB7CiAgICBncm91cDogbnVsbCwKICAgIHNvcnQ6IHRydWUsCiAgICBkaXNhYmxlZDogZmFsc2UsCiAgICBzdG9yZTogbnVsbCwKICAgIGhhbmRsZTogbnVsbCwKICAgIGRyYWdnYWJsZTogL15bdW9dbCQvaS50ZXN0KGVsLm5vZGVOYW1lKSA/ICc+bGknIDogJz4qJywKICAgIHN3YXBUaHJlc2hvbGQ6IDEsCiAgICAvLyBwZXJjZW50YWdlOyAwIDw9IHggPD0gMQogICAgaW52ZXJ0U3dhcDogZmFsc2UsCiAgICAvLyBpbnZlcnQgYWx3YXlzCiAgICBpbnZlcnRlZFN3YXBUaHJlc2hvbGQ6IG51bGwsCiAgICAvLyB3aWxsIGJlIHNldCB0byBzYW1lIGFzIHN3YXBUaHJlc2hvbGQgaWYgZGVmYXVsdAogICAgcmVtb3ZlQ2xvbmVPbkhpZGU6IHRydWUsCiAgICBkaXJlY3Rpb246IGZ1bmN0aW9uIGRpcmVjdGlvbigpIHsKICAgICAgcmV0dXJuIF9kZXRlY3REaXJlY3Rpb24oZWwsIHRoaXMub3B0aW9ucyk7CiAgICB9LAogICAgZ2hvc3RDbGFzczogJ3NvcnRhYmxlLWdob3N0JywKICAgIGNob3NlbkNsYXNzOiAnc29ydGFibGUtY2hvc2VuJywKICAgIGRyYWdDbGFzczogJ3NvcnRhYmxlLWRyYWcnLAogICAgaWdub3JlOiAnYSwgaW1nJywKICAgIGZpbHRlcjogbnVsbCwKICAgIHByZXZlbnRPbkZpbHRlcjogdHJ1ZSwKICAgIGFuaW1hdGlvbjogMCwKICAgIGVhc2luZzogbnVsbCwKICAgIHNldERhdGE6IGZ1bmN0aW9uIHNldERhdGEoZGF0YVRyYW5zZmVyLCBkcmFnRWwpIHsKICAgICAgZGF0YVRyYW5zZmVyLnNldERhdGEoJ1RleHQnLCBkcmFnRWwudGV4dENvbnRlbnQpOwogICAgfSwKICAgIGRyb3BCdWJibGU6IGZhbHNlLAogICAgZHJhZ292ZXJCdWJibGU6IGZhbHNlLAogICAgZGF0YUlkQXR0cjogJ2RhdGEtaWQnLAogICAgZGVsYXk6IDAsCiAgICBkZWxheU9uVG91Y2hPbmx5OiBmYWxzZSwKICAgIHRvdWNoU3RhcnRUaHJlc2hvbGQ6IChOdW1iZXIucGFyc2VJbnQgPyBOdW1iZXIgOiB3aW5kb3cpLnBhcnNlSW50KHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvLCAxMCkgfHwgMSwKICAgIGZvcmNlRmFsbGJhY2s6IGZhbHNlLAogICAgZmFsbGJhY2tDbGFzczogJ3NvcnRhYmxlLWZhbGxiYWNrJywKICAgIGZhbGxiYWNrT25Cb2R5OiBmYWxzZSwKICAgIGZhbGxiYWNrVG9sZXJhbmNlOiAwLAogICAgZmFsbGJhY2tPZmZzZXQ6IHsKICAgICAgeDogMCwKICAgICAgeTogMAogICAgfSwKICAgIHN1cHBvcnRQb2ludGVyOiBTb3J0YWJsZS5zdXBwb3J0UG9pbnRlciAhPT0gZmFsc2UgJiYgJ1BvaW50ZXJFdmVudCcgaW4gd2luZG93LAogICAgZW1wdHlJbnNlcnRUaHJlc2hvbGQ6IDUKICB9OwogIFBsdWdpbk1hbmFnZXIuaW5pdGlhbGl6ZVBsdWdpbnModGhpcywgZWwsIGRlZmF1bHRzKTsgLy8gU2V0IGRlZmF1bHQgb3B0aW9ucwoKICBmb3IgKHZhciBuYW1lIGluIGRlZmF1bHRzKSB7CiAgICAhKG5hbWUgaW4gb3B0aW9ucykgJiYgKG9wdGlvbnNbbmFtZV0gPSBkZWZhdWx0c1tuYW1lXSk7CiAgfQoKICBfcHJlcGFyZUdyb3VwKG9wdGlvbnMpOyAvLyBCaW5kIGFsbCBwcml2YXRlIG1ldGhvZHMKCgogIGZvciAodmFyIGZuIGluIHRoaXMpIHsKICAgIGlmIChmbi5jaGFyQXQoMCkgPT09ICdfJyAmJiB0eXBlb2YgdGhpc1tmbl0gPT09ICdmdW5jdGlvbicpIHsKICAgICAgdGhpc1tmbl0gPSB0aGlzW2ZuXS5iaW5kKHRoaXMpOwogICAgfQogIH0gLy8gU2V0dXAgZHJhZyBtb2RlCgoKICB0aGlzLm5hdGl2ZURyYWdnYWJsZSA9IG9wdGlvbnMuZm9yY2VGYWxsYmFjayA/IGZhbHNlIDogc3VwcG9ydERyYWdnYWJsZTsKCiAgaWYgKHRoaXMubmF0aXZlRHJhZ2dhYmxlKSB7CiAgICAvLyBUb3VjaCBzdGFydCB0aHJlc2hvbGQgY2Fubm90IGJlIGdyZWF0ZXIgdGhhbiB0aGUgbmF0aXZlIGRyYWdzdGFydCB0aHJlc2hvbGQKICAgIHRoaXMub3B0aW9ucy50b3VjaFN0YXJ0VGhyZXNob2xkID0gMTsKICB9IC8vIEJpbmQgZXZlbnRzCgoKICBpZiAob3B0aW9ucy5zdXBwb3J0UG9pbnRlcikgewogICAgb24oZWwsICdwb2ludGVyZG93bicsIHRoaXMuX29uVGFwU3RhcnQpOwogIH0gZWxzZSB7CiAgICBvbihlbCwgJ21vdXNlZG93bicsIHRoaXMuX29uVGFwU3RhcnQpOwogICAgb24oZWwsICd0b3VjaHN0YXJ0JywgdGhpcy5fb25UYXBTdGFydCk7CiAgfQoKICBpZiAodGhpcy5uYXRpdmVEcmFnZ2FibGUpIHsKICAgIG9uKGVsLCAnZHJhZ292ZXInLCB0aGlzKTsKICAgIG9uKGVsLCAnZHJhZ2VudGVyJywgdGhpcyk7CiAgfQoKICBzb3J0YWJsZXMucHVzaCh0aGlzLmVsKTsgLy8gUmVzdG9yZSBzb3J0aW5nCgogIG9wdGlvbnMuc3RvcmUgJiYgb3B0aW9ucy5zdG9yZS5nZXQgJiYgdGhpcy5zb3J0KG9wdGlvbnMuc3RvcmUuZ2V0KHRoaXMpIHx8IFtdKTsgLy8gQWRkIGFuaW1hdGlvbiBzdGF0ZSBtYW5hZ2VyCgogIF9leHRlbmRzKHRoaXMsIEFuaW1hdGlvblN0YXRlTWFuYWdlcigpKTsKfQoKU29ydGFibGUucHJvdG90eXBlID0KLyoqIEBsZW5kcyBTb3J0YWJsZS5wcm90b3R5cGUgKi8KewogIGNvbnN0cnVjdG9yOiBTb3J0YWJsZSwKICBfaXNPdXRzaWRlVGhpc0VsOiBmdW5jdGlvbiBfaXNPdXRzaWRlVGhpc0VsKHRhcmdldCkgewogICAgaWYgKCF0aGlzLmVsLmNvbnRhaW5zKHRhcmdldCkgJiYgdGFyZ2V0ICE9PSB0aGlzLmVsKSB7CiAgICAgIGxhc3RUYXJnZXQgPSBudWxsOwogICAgfQogIH0sCiAgX2dldERpcmVjdGlvbjogZnVuY3Rpb24gX2dldERpcmVjdGlvbihldnQsIHRhcmdldCkgewogICAgcmV0dXJuIHR5cGVvZiB0aGlzLm9wdGlvbnMuZGlyZWN0aW9uID09PSAnZnVuY3Rpb24nID8gdGhpcy5vcHRpb25zLmRpcmVjdGlvbi5jYWxsKHRoaXMsIGV2dCwgdGFyZ2V0LCBkcmFnRWwpIDogdGhpcy5vcHRpb25zLmRpcmVjdGlvbjsKICB9LAogIF9vblRhcFN0YXJ0OiBmdW5jdGlvbiBfb25UYXBTdGFydCgKICAvKiogRXZlbnR8VG91Y2hFdmVudCAqLwogIGV2dCkgewogICAgaWYgKCFldnQuY2FuY2VsYWJsZSkgcmV0dXJuOwoKICAgIHZhciBfdGhpcyA9IHRoaXMsCiAgICAgICAgZWwgPSB0aGlzLmVsLAogICAgICAgIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnMsCiAgICAgICAgcHJldmVudE9uRmlsdGVyID0gb3B0aW9ucy5wcmV2ZW50T25GaWx0ZXIsCiAgICAgICAgdHlwZSA9IGV2dC50eXBlLAogICAgICAgIHRvdWNoID0gZXZ0LnRvdWNoZXMgJiYgZXZ0LnRvdWNoZXNbMF0gfHwgZXZ0LnBvaW50ZXJUeXBlICYmIGV2dC5wb2ludGVyVHlwZSA9PT0gJ3RvdWNoJyAmJiBldnQsCiAgICAgICAgdGFyZ2V0ID0gKHRvdWNoIHx8IGV2dCkudGFyZ2V0LAogICAgICAgIG9yaWdpbmFsVGFyZ2V0ID0gZXZ0LnRhcmdldC5zaGFkb3dSb290ICYmIChldnQucGF0aCAmJiBldnQucGF0aFswXSB8fCBldnQuY29tcG9zZWRQYXRoICYmIGV2dC5jb21wb3NlZFBhdGgoKVswXSkgfHwgdGFyZ2V0LAogICAgICAgIGZpbHRlciA9IG9wdGlvbnMuZmlsdGVyOwoKICAgIF9zYXZlSW5wdXRDaGVja2VkU3RhdGUoZWwpOyAvLyBEb24ndCB0cmlnZ2VyIHN0YXJ0IGV2ZW50IHdoZW4gYW4gZWxlbWVudCBpcyBiZWVuIGRyYWdnZWQsIG90aGVyd2lzZSB0aGUgZXZ0Lm9sZGluZGV4IGFsd2F5cyB3cm9uZyB3aGVuIHNldCBvcHRpb24uZ3JvdXAuCgoKICAgIGlmIChkcmFnRWwpIHsKICAgICAgcmV0dXJuOwogICAgfQoKICAgIGlmICgvbW91c2Vkb3dufHBvaW50ZXJkb3duLy50ZXN0KHR5cGUpICYmIGV2dC5idXR0b24gIT09IDAgfHwgb3B0aW9ucy5kaXNhYmxlZCkgewogICAgICByZXR1cm47IC8vIG9ubHkgbGVmdCBidXR0b24gYW5kIGVuYWJsZWQKICAgIH0gLy8gY2FuY2VsIGRuZCBpZiBvcmlnaW5hbCB0YXJnZXQgaXMgY29udGVudCBlZGl0YWJsZQoKCiAgICBpZiAob3JpZ2luYWxUYXJnZXQuaXNDb250ZW50RWRpdGFibGUpIHsKICAgICAgcmV0dXJuOwogICAgfQoKICAgIHRhcmdldCA9IGNsb3Nlc3QodGFyZ2V0LCBvcHRpb25zLmRyYWdnYWJsZSwgZWwsIGZhbHNlKTsKCiAgICBpZiAodGFyZ2V0ICYmIHRhcmdldC5hbmltYXRlZCkgewogICAgICByZXR1cm47CiAgICB9CgogICAgaWYgKGxhc3REb3duRWwgPT09IHRhcmdldCkgewogICAgICAvLyBJZ25vcmluZyBkdXBsaWNhdGUgYGRvd25gCiAgICAgIHJldHVybjsKICAgIH0gLy8gR2V0IHRoZSBpbmRleCBvZiB0aGUgZHJhZ2dlZCBlbGVtZW50IHdpdGhpbiBpdHMgcGFyZW50CgoKICAgIG9sZEluZGV4ID0gaW5kZXgodGFyZ2V0KTsKICAgIG9sZERyYWdnYWJsZUluZGV4ID0gaW5kZXgodGFyZ2V0LCBvcHRpb25zLmRyYWdnYWJsZSk7IC8vIENoZWNrIGZpbHRlcgoKICAgIGlmICh0eXBlb2YgZmlsdGVyID09PSAnZnVuY3Rpb24nKSB7CiAgICAgIGlmIChmaWx0ZXIuY2FsbCh0aGlzLCBldnQsIHRhcmdldCwgdGhpcykpIHsKICAgICAgICBfZGlzcGF0Y2hFdmVudCh7CiAgICAgICAgICBzb3J0YWJsZTogX3RoaXMsCiAgICAgICAgICByb290RWw6IG9yaWdpbmFsVGFyZ2V0LAogICAgICAgICAgbmFtZTogJ2ZpbHRlcicsCiAgICAgICAgICB0YXJnZXRFbDogdGFyZ2V0LAogICAgICAgICAgdG9FbDogZWwsCiAgICAgICAgICBmcm9tRWw6IGVsCiAgICAgICAgfSk7CgogICAgICAgIHBsdWdpbkV2ZW50KCdmaWx0ZXInLCBfdGhpcywgewogICAgICAgICAgZXZ0OiBldnQKICAgICAgICB9KTsKICAgICAgICBwcmV2ZW50T25GaWx0ZXIgJiYgZXZ0LmNhbmNlbGFibGUgJiYgZXZ0LnByZXZlbnREZWZhdWx0KCk7CiAgICAgICAgcmV0dXJuOyAvLyBjYW5jZWwgZG5kCiAgICAgIH0KICAgIH0gZWxzZSBpZiAoZmlsdGVyKSB7CiAgICAgIGZpbHRlciA9IGZpbHRlci5zcGxpdCgnLCcpLnNvbWUoZnVuY3Rpb24gKGNyaXRlcmlhKSB7CiAgICAgICAgY3JpdGVyaWEgPSBjbG9zZXN0KG9yaWdpbmFsVGFyZ2V0LCBjcml0ZXJpYS50cmltKCksIGVsLCBmYWxzZSk7CgogICAgICAgIGlmIChjcml0ZXJpYSkgewogICAgICAgICAgX2Rpc3BhdGNoRXZlbnQoewogICAgICAgICAgICBzb3J0YWJsZTogX3RoaXMsCiAgICAgICAgICAgIHJvb3RFbDogY3JpdGVyaWEsCiAgICAgICAgICAgIG5hbWU6ICdmaWx0ZXInLAogICAgICAgICAgICB0YXJnZXRFbDogdGFyZ2V0LAogICAgICAgICAgICBmcm9tRWw6IGVsLAogICAgICAgICAgICB0b0VsOiBlbAogICAgICAgICAgfSk7CgogICAgICAgICAgcGx1Z2luRXZlbnQoJ2ZpbHRlcicsIF90aGlzLCB7CiAgICAgICAgICAgIGV2dDogZXZ0CiAgICAgICAgICB9KTsKICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0KICAgICAgfSk7CgogICAgICBpZiAoZmlsdGVyKSB7CiAgICAgICAgcHJldmVudE9uRmlsdGVyICYmIGV2dC5jYW5jZWxhYmxlICYmIGV2dC5wcmV2ZW50RGVmYXVsdCgpOwogICAgICAgIHJldHVybjsgLy8gY2FuY2VsIGRuZAogICAgICB9CiAgICB9CgogICAgaWYgKG9wdGlvbnMuaGFuZGxlICYmICFjbG9zZXN0KG9yaWdpbmFsVGFyZ2V0LCBvcHRpb25zLmhhbmRsZSwgZWwsIGZhbHNlKSkgewogICAgICByZXR1cm47CiAgICB9IC8vIFByZXBhcmUgYGRyYWdzdGFydGAKCgogICAgdGhpcy5fcHJlcGFyZURyYWdTdGFydChldnQsIHRvdWNoLCB0YXJnZXQpOwogIH0sCiAgX3ByZXBhcmVEcmFnU3RhcnQ6IGZ1bmN0aW9uIF9wcmVwYXJlRHJhZ1N0YXJ0KAogIC8qKiBFdmVudCAqLwogIGV2dCwKICAvKiogVG91Y2ggKi8KICB0b3VjaCwKICAvKiogSFRNTEVsZW1lbnQgKi8KICB0YXJnZXQpIHsKICAgIHZhciBfdGhpcyA9IHRoaXMsCiAgICAgICAgZWwgPSBfdGhpcy5lbCwKICAgICAgICBvcHRpb25zID0gX3RoaXMub3B0aW9ucywKICAgICAgICBvd25lckRvY3VtZW50ID0gZWwub3duZXJEb2N1bWVudCwKICAgICAgICBkcmFnU3RhcnRGbjsKCiAgICBpZiAodGFyZ2V0ICYmICFkcmFnRWwgJiYgdGFyZ2V0LnBhcmVudE5vZGUgPT09IGVsKSB7CiAgICAgIHZhciBkcmFnUmVjdCA9IGdldFJlY3QodGFyZ2V0KTsKICAgICAgcm9vdEVsID0gZWw7CiAgICAgIGRyYWdFbCA9IHRhcmdldDsKICAgICAgcGFyZW50RWwgPSBkcmFnRWwucGFyZW50Tm9kZTsKICAgICAgbmV4dEVsID0gZHJhZ0VsLm5leHRTaWJsaW5nOwogICAgICBsYXN0RG93bkVsID0gdGFyZ2V0OwogICAgICBhY3RpdmVHcm91cCA9IG9wdGlvbnMuZ3JvdXA7CiAgICAgIFNvcnRhYmxlLmRyYWdnZWQgPSBkcmFnRWw7CiAgICAgIHRhcEV2dCA9IHsKICAgICAgICB0YXJnZXQ6IGRyYWdFbCwKICAgICAgICBjbGllbnRYOiAodG91Y2ggfHwgZXZ0KS5jbGllbnRYLAogICAgICAgIGNsaWVudFk6ICh0b3VjaCB8fCBldnQpLmNsaWVudFkKICAgICAgfTsKICAgICAgdGFwRGlzdGFuY2VMZWZ0ID0gdGFwRXZ0LmNsaWVudFggLSBkcmFnUmVjdC5sZWZ0OwogICAgICB0YXBEaXN0YW5jZVRvcCA9IHRhcEV2dC5jbGllbnRZIC0gZHJhZ1JlY3QudG9wOwogICAgICB0aGlzLl9sYXN0WCA9ICh0b3VjaCB8fCBldnQpLmNsaWVudFg7CiAgICAgIHRoaXMuX2xhc3RZID0gKHRvdWNoIHx8IGV2dCkuY2xpZW50WTsKICAgICAgZHJhZ0VsLnN0eWxlWyd3aWxsLWNoYW5nZSddID0gJ2FsbCc7CgogICAgICBkcmFnU3RhcnRGbiA9IGZ1bmN0aW9uIGRyYWdTdGFydEZuKCkgewogICAgICAgIHBsdWdpbkV2ZW50KCdkZWxheUVuZGVkJywgX3RoaXMsIHsKICAgICAgICAgIGV2dDogZXZ0CiAgICAgICAgfSk7CgogICAgICAgIGlmIChTb3J0YWJsZS5ldmVudENhbmNlbGVkKSB7CiAgICAgICAgICBfdGhpcy5fb25Ecm9wKCk7CgogICAgICAgICAgcmV0dXJuOwogICAgICAgIH0gLy8gRGVsYXllZCBkcmFnIGhhcyBiZWVuIHRyaWdnZXJlZAogICAgICAgIC8vIHdlIGNhbiByZS1lbmFibGUgdGhlIGV2ZW50czogdG91Y2htb3ZlL21vdXNlbW92ZQoKCiAgICAgICAgX3RoaXMuX2Rpc2FibGVEZWxheWVkRHJhZ0V2ZW50cygpOwoKICAgICAgICBpZiAoIUZpcmVGb3ggJiYgX3RoaXMubmF0aXZlRHJhZ2dhYmxlKSB7CiAgICAgICAgICBkcmFnRWwuZHJhZ2dhYmxlID0gdHJ1ZTsKICAgICAgICB9IC8vIEJpbmQgdGhlIGV2ZW50czogZHJhZ3N0YXJ0L2RyYWdlbmQKCgogICAgICAgIF90aGlzLl90cmlnZ2VyRHJhZ1N0YXJ0KGV2dCwgdG91Y2gpOyAvLyBEcmFnIHN0YXJ0IGV2ZW50CgoKICAgICAgICBfZGlzcGF0Y2hFdmVudCh7CiAgICAgICAgICBzb3J0YWJsZTogX3RoaXMsCiAgICAgICAgICBuYW1lOiAnY2hvb3NlJywKICAgICAgICAgIG9yaWdpbmFsRXZlbnQ6IGV2dAogICAgICAgIH0pOyAvLyBDaG9zZW4gaXRlbQoKCiAgICAgICAgdG9nZ2xlQ2xhc3MoZHJhZ0VsLCBvcHRpb25zLmNob3NlbkNsYXNzLCB0cnVlKTsKICAgICAgfTsgLy8gRGlzYWJsZSAiZHJhZ2dhYmxlIgoKCiAgICAgIG9wdGlvbnMuaWdub3JlLnNwbGl0KCcsJykuZm9yRWFjaChmdW5jdGlvbiAoY3JpdGVyaWEpIHsKICAgICAgICBmaW5kKGRyYWdFbCwgY3JpdGVyaWEudHJpbSgpLCBfZGlzYWJsZURyYWdnYWJsZSk7CiAgICAgIH0pOwogICAgICBvbihvd25lckRvY3VtZW50LCAnZHJhZ292ZXInLCBuZWFyZXN0RW1wdHlJbnNlcnREZXRlY3RFdmVudCk7CiAgICAgIG9uKG93bmVyRG9jdW1lbnQsICdtb3VzZW1vdmUnLCBuZWFyZXN0RW1wdHlJbnNlcnREZXRlY3RFdmVudCk7CiAgICAgIG9uKG93bmVyRG9jdW1lbnQsICd0b3VjaG1vdmUnLCBuZWFyZXN0RW1wdHlJbnNlcnREZXRlY3RFdmVudCk7CiAgICAgIG9uKG93bmVyRG9jdW1lbnQsICdtb3VzZXVwJywgX3RoaXMuX29uRHJvcCk7CiAgICAgIG9uKG93bmVyRG9jdW1lbnQsICd0b3VjaGVuZCcsIF90aGlzLl9vbkRyb3ApOwogICAgICBvbihvd25lckRvY3VtZW50LCAndG91Y2hjYW5jZWwnLCBfdGhpcy5fb25Ecm9wKTsgLy8gTWFrZSBkcmFnRWwgZHJhZ2dhYmxlIChtdXN0IGJlIGJlZm9yZSBkZWxheSBmb3IgRmlyZUZveCkKCiAgICAgIGlmIChGaXJlRm94ICYmIHRoaXMubmF0aXZlRHJhZ2dhYmxlKSB7CiAgICAgICAgdGhpcy5vcHRpb25zLnRvdWNoU3RhcnRUaHJlc2hvbGQgPSA0OwogICAgICAgIGRyYWdFbC5kcmFnZ2FibGUgPSB0cnVlOwogICAgICB9CgogICAgICBwbHVnaW5FdmVudCgnZGVsYXlTdGFydCcsIHRoaXMsIHsKICAgICAgICBldnQ6IGV2dAogICAgICB9KTsgLy8gRGVsYXkgaXMgaW1wb3NzaWJsZSBmb3IgbmF0aXZlIERuRCBpbiBFZGdlIG9yIElFCgogICAgICBpZiAob3B0aW9ucy5kZWxheSAmJiAoIW9wdGlvbnMuZGVsYXlPblRvdWNoT25seSB8fCB0b3VjaCkgJiYgKCF0aGlzLm5hdGl2ZURyYWdnYWJsZSB8fCAhKEVkZ2UgfHwgSUUxMU9yTGVzcykpKSB7CiAgICAgICAgaWYgKFNvcnRhYmxlLmV2ZW50Q2FuY2VsZWQpIHsKICAgICAgICAgIHRoaXMuX29uRHJvcCgpOwoKICAgICAgICAgIHJldHVybjsKICAgICAgICB9IC8vIElmIHRoZSB1c2VyIG1vdmVzIHRoZSBwb2ludGVyIG9yIGxldCBnbyB0aGUgY2xpY2sgb3IgdG91Y2gKICAgICAgICAvLyBiZWZvcmUgdGhlIGRlbGF5IGhhcyBiZWVuIHJlYWNoZWQ6CiAgICAgICAgLy8gZGlzYWJsZSB0aGUgZGVsYXllZCBkcmFnCgoKICAgICAgICBvbihvd25lckRvY3VtZW50LCAnbW91c2V1cCcsIF90aGlzLl9kaXNhYmxlRGVsYXllZERyYWcpOwogICAgICAgIG9uKG93bmVyRG9jdW1lbnQsICd0b3VjaGVuZCcsIF90aGlzLl9kaXNhYmxlRGVsYXllZERyYWcpOwogICAgICAgIG9uKG93bmVyRG9jdW1lbnQsICd0b3VjaGNhbmNlbCcsIF90aGlzLl9kaXNhYmxlRGVsYXllZERyYWcpOwogICAgICAgIG9uKG93bmVyRG9jdW1lbnQsICdtb3VzZW1vdmUnLCBfdGhpcy5fZGVsYXllZERyYWdUb3VjaE1vdmVIYW5kbGVyKTsKICAgICAgICBvbihvd25lckRvY3VtZW50LCAndG91Y2htb3ZlJywgX3RoaXMuX2RlbGF5ZWREcmFnVG91Y2hNb3ZlSGFuZGxlcik7CiAgICAgICAgb3B0aW9ucy5zdXBwb3J0UG9pbnRlciAmJiBvbihvd25lckRvY3VtZW50LCAncG9pbnRlcm1vdmUnLCBfdGhpcy5fZGVsYXllZERyYWdUb3VjaE1vdmVIYW5kbGVyKTsKICAgICAgICBfdGhpcy5fZHJhZ1N0YXJ0VGltZXIgPSBzZXRUaW1lb3V0KGRyYWdTdGFydEZuLCBvcHRpb25zLmRlbGF5KTsKICAgICAgfSBlbHNlIHsKICAgICAgICBkcmFnU3RhcnRGbigpOwogICAgICB9CiAgICB9CiAgfSwKICBfZGVsYXllZERyYWdUb3VjaE1vdmVIYW5kbGVyOiBmdW5jdGlvbiBfZGVsYXllZERyYWdUb3VjaE1vdmVIYW5kbGVyKAogIC8qKiBUb3VjaEV2ZW50fFBvaW50ZXJFdmVudCAqKi8KICBlKSB7CiAgICB2YXIgdG91Y2ggPSBlLnRvdWNoZXMgPyBlLnRvdWNoZXNbMF0gOiBlOwoKICAgIGlmIChNYXRoLm1heChNYXRoLmFicyh0b3VjaC5jbGllbnRYIC0gdGhpcy5fbGFzdFgpLCBNYXRoLmFicyh0b3VjaC5jbGllbnRZIC0gdGhpcy5fbGFzdFkpKSA+PSBNYXRoLmZsb29yKHRoaXMub3B0aW9ucy50b3VjaFN0YXJ0VGhyZXNob2xkIC8gKHRoaXMubmF0aXZlRHJhZ2dhYmxlICYmIHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvIHx8IDEpKSkgewogICAgICB0aGlzLl9kaXNhYmxlRGVsYXllZERyYWcoKTsKICAgIH0KICB9LAogIF9kaXNhYmxlRGVsYXllZERyYWc6IGZ1bmN0aW9uIF9kaXNhYmxlRGVsYXllZERyYWcoKSB7CiAgICBkcmFnRWwgJiYgX2Rpc2FibGVEcmFnZ2FibGUoZHJhZ0VsKTsKICAgIGNsZWFyVGltZW91dCh0aGlzLl9kcmFnU3RhcnRUaW1lcik7CgogICAgdGhpcy5fZGlzYWJsZURlbGF5ZWREcmFnRXZlbnRzKCk7CiAgfSwKICBfZGlzYWJsZURlbGF5ZWREcmFnRXZlbnRzOiBmdW5jdGlvbiBfZGlzYWJsZURlbGF5ZWREcmFnRXZlbnRzKCkgewogICAgdmFyIG93bmVyRG9jdW1lbnQgPSB0aGlzLmVsLm93bmVyRG9jdW1lbnQ7CiAgICBvZmYob3duZXJEb2N1bWVudCwgJ21vdXNldXAnLCB0aGlzLl9kaXNhYmxlRGVsYXllZERyYWcpOwogICAgb2ZmKG93bmVyRG9jdW1lbnQsICd0b3VjaGVuZCcsIHRoaXMuX2Rpc2FibGVEZWxheWVkRHJhZyk7CiAgICBvZmYob3duZXJEb2N1bWVudCwgJ3RvdWNoY2FuY2VsJywgdGhpcy5fZGlzYWJsZURlbGF5ZWREcmFnKTsKICAgIG9mZihvd25lckRvY3VtZW50LCAnbW91c2Vtb3ZlJywgdGhpcy5fZGVsYXllZERyYWdUb3VjaE1vdmVIYW5kbGVyKTsKICAgIG9mZihvd25lckRvY3VtZW50LCAndG91Y2htb3ZlJywgdGhpcy5fZGVsYXllZERyYWdUb3VjaE1vdmVIYW5kbGVyKTsKICAgIG9mZihvd25lckRvY3VtZW50LCAncG9pbnRlcm1vdmUnLCB0aGlzLl9kZWxheWVkRHJhZ1RvdWNoTW92ZUhhbmRsZXIpOwogIH0sCiAgX3RyaWdnZXJEcmFnU3RhcnQ6IGZ1bmN0aW9uIF90cmlnZ2VyRHJhZ1N0YXJ0KAogIC8qKiBFdmVudCAqLwogIGV2dCwKICAvKiogVG91Y2ggKi8KICB0b3VjaCkgewogICAgdG91Y2ggPSB0b3VjaCB8fCBldnQucG9pbnRlclR5cGUgPT0gJ3RvdWNoJyAmJiBldnQ7CgogICAgaWYgKCF0aGlzLm5hdGl2ZURyYWdnYWJsZSB8fCB0b3VjaCkgewogICAgICBpZiAodGhpcy5vcHRpb25zLnN1cHBvcnRQb2ludGVyKSB7CiAgICAgICAgb24oZG9jdW1lbnQsICdwb2ludGVybW92ZScsIHRoaXMuX29uVG91Y2hNb3ZlKTsKICAgICAgfSBlbHNlIGlmICh0b3VjaCkgewogICAgICAgIG9uKGRvY3VtZW50LCAndG91Y2htb3ZlJywgdGhpcy5fb25Ub3VjaE1vdmUpOwogICAgICB9IGVsc2UgewogICAgICAgIG9uKGRvY3VtZW50LCAnbW91c2Vtb3ZlJywgdGhpcy5fb25Ub3VjaE1vdmUpOwogICAgICB9CiAgICB9IGVsc2UgewogICAgICBvbihkcmFnRWwsICdkcmFnZW5kJywgdGhpcyk7CiAgICAgIG9uKHJvb3RFbCwgJ2RyYWdzdGFydCcsIHRoaXMuX29uRHJhZ1N0YXJ0KTsKICAgIH0KCiAgICB0cnkgewogICAgICBpZiAoZG9jdW1lbnQuc2VsZWN0aW9uKSB7CiAgICAgICAgLy8gVGltZW91dCBuZWNjZXNzYXJ5IGZvciBJRTkKICAgICAgICBfbmV4dFRpY2soZnVuY3Rpb24gKCkgewogICAgICAgICAgZG9jdW1lbnQuc2VsZWN0aW9uLmVtcHR5KCk7CiAgICAgICAgfSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgd2luZG93LmdldFNlbGVjdGlvbigpLnJlbW92ZUFsbFJhbmdlcygpOwogICAgICB9CiAgICB9IGNhdGNoIChlcnIpIHt9CiAgfSwKICBfZHJhZ1N0YXJ0ZWQ6IGZ1bmN0aW9uIF9kcmFnU3RhcnRlZChmYWxsYmFjaywgZXZ0KSB7CiAgICBhd2FpdGluZ0RyYWdTdGFydGVkID0gZmFsc2U7CgogICAgaWYgKHJvb3RFbCAmJiBkcmFnRWwpIHsKICAgICAgcGx1Z2luRXZlbnQoJ2RyYWdTdGFydGVkJywgdGhpcywgewogICAgICAgIGV2dDogZXZ0CiAgICAgIH0pOwoKICAgICAgaWYgKHRoaXMubmF0aXZlRHJhZ2dhYmxlKSB7CiAgICAgICAgb24oZG9jdW1lbnQsICdkcmFnb3ZlcicsIF9jaGVja091dHNpZGVUYXJnZXRFbCk7CiAgICAgIH0KCiAgICAgIHZhciBvcHRpb25zID0gdGhpcy5vcHRpb25zOyAvLyBBcHBseSBlZmZlY3QKCiAgICAgICFmYWxsYmFjayAmJiB0b2dnbGVDbGFzcyhkcmFnRWwsIG9wdGlvbnMuZHJhZ0NsYXNzLCBmYWxzZSk7CiAgICAgIHRvZ2dsZUNsYXNzKGRyYWdFbCwgb3B0aW9ucy5naG9zdENsYXNzLCB0cnVlKTsKICAgICAgU29ydGFibGUuYWN0aXZlID0gdGhpczsKICAgICAgZmFsbGJhY2sgJiYgdGhpcy5fYXBwZW5kR2hvc3QoKTsgLy8gRHJhZyBzdGFydCBldmVudAoKICAgICAgX2Rpc3BhdGNoRXZlbnQoewogICAgICAgIHNvcnRhYmxlOiB0aGlzLAogICAgICAgIG5hbWU6ICdzdGFydCcsCiAgICAgICAgb3JpZ2luYWxFdmVudDogZXZ0CiAgICAgIH0pOwogICAgfSBlbHNlIHsKICAgICAgdGhpcy5fbnVsbGluZygpOwogICAgfQogIH0sCiAgX2VtdWxhdGVEcmFnT3ZlcjogZnVuY3Rpb24gX2VtdWxhdGVEcmFnT3ZlcigpIHsKICAgIGlmICh0b3VjaEV2dCkgewogICAgICB0aGlzLl9sYXN0WCA9IHRvdWNoRXZ0LmNsaWVudFg7CiAgICAgIHRoaXMuX2xhc3RZID0gdG91Y2hFdnQuY2xpZW50WTsKCiAgICAgIF9oaWRlR2hvc3RGb3JUYXJnZXQoKTsKCiAgICAgIHZhciB0YXJnZXQgPSBkb2N1bWVudC5lbGVtZW50RnJvbVBvaW50KHRvdWNoRXZ0LmNsaWVudFgsIHRvdWNoRXZ0LmNsaWVudFkpOwogICAgICB2YXIgcGFyZW50ID0gdGFyZ2V0OwoKICAgICAgd2hpbGUgKHRhcmdldCAmJiB0YXJnZXQuc2hhZG93Um9vdCkgewogICAgICAgIHRhcmdldCA9IHRhcmdldC5zaGFkb3dSb290LmVsZW1lbnRGcm9tUG9pbnQodG91Y2hFdnQuY2xpZW50WCwgdG91Y2hFdnQuY2xpZW50WSk7CiAgICAgICAgaWYgKHRhcmdldCA9PT0gcGFyZW50KSBicmVhazsKICAgICAgICBwYXJlbnQgPSB0YXJnZXQ7CiAgICAgIH0KCiAgICAgIGRyYWdFbC5wYXJlbnROb2RlW2V4cGFuZG9dLl9pc091dHNpZGVUaGlzRWwodGFyZ2V0KTsKCiAgICAgIGlmIChwYXJlbnQpIHsKICAgICAgICBkbyB7CiAgICAgICAgICBpZiAocGFyZW50W2V4cGFuZG9dKSB7CiAgICAgICAgICAgIHZhciBpbnNlcnRlZCA9IHZvaWQgMDsKICAgICAgICAgICAgaW5zZXJ0ZWQgPSBwYXJlbnRbZXhwYW5kb10uX29uRHJhZ092ZXIoewogICAgICAgICAgICAgIGNsaWVudFg6IHRvdWNoRXZ0LmNsaWVudFgsCiAgICAgICAgICAgICAgY2xpZW50WTogdG91Y2hFdnQuY2xpZW50WSwKICAgICAgICAgICAgICB0YXJnZXQ6IHRhcmdldCwKICAgICAgICAgICAgICByb290RWw6IHBhcmVudAogICAgICAgICAgICB9KTsKCiAgICAgICAgICAgIGlmIChpbnNlcnRlZCAmJiAhdGhpcy5vcHRpb25zLmRyYWdvdmVyQnViYmxlKSB7CiAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KCiAgICAgICAgICB0YXJnZXQgPSBwYXJlbnQ7IC8vIHN0b3JlIGxhc3QgZWxlbWVudAogICAgICAgIH0KICAgICAgICAvKiBqc2hpbnQgYm9zczp0cnVlICovCiAgICAgICAgd2hpbGUgKHBhcmVudCA9IHBhcmVudC5wYXJlbnROb2RlKTsKICAgICAgfQoKICAgICAgX3VuaGlkZUdob3N0Rm9yVGFyZ2V0KCk7CiAgICB9CiAgfSwKICBfb25Ub3VjaE1vdmU6IGZ1bmN0aW9uIF9vblRvdWNoTW92ZSgKICAvKipUb3VjaEV2ZW50Ki8KICBldnQpIHsKICAgIGlmICh0YXBFdnQpIHsKICAgICAgdmFyIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnMsCiAgICAgICAgICBmYWxsYmFja1RvbGVyYW5jZSA9IG9wdGlvbnMuZmFsbGJhY2tUb2xlcmFuY2UsCiAgICAgICAgICBmYWxsYmFja09mZnNldCA9IG9wdGlvbnMuZmFsbGJhY2tPZmZzZXQsCiAgICAgICAgICB0b3VjaCA9IGV2dC50b3VjaGVzID8gZXZ0LnRvdWNoZXNbMF0gOiBldnQsCiAgICAgICAgICBnaG9zdE1hdHJpeCA9IGdob3N0RWwgJiYgbWF0cml4KGdob3N0RWwsIHRydWUpLAogICAgICAgICAgc2NhbGVYID0gZ2hvc3RFbCAmJiBnaG9zdE1hdHJpeCAmJiBnaG9zdE1hdHJpeC5hLAogICAgICAgICAgc2NhbGVZID0gZ2hvc3RFbCAmJiBnaG9zdE1hdHJpeCAmJiBnaG9zdE1hdHJpeC5kLAogICAgICAgICAgcmVsYXRpdmVTY3JvbGxPZmZzZXQgPSBQb3NpdGlvbkdob3N0QWJzb2x1dGVseSAmJiBnaG9zdFJlbGF0aXZlUGFyZW50ICYmIGdldFJlbGF0aXZlU2Nyb2xsT2Zmc2V0KGdob3N0UmVsYXRpdmVQYXJlbnQpLAogICAgICAgICAgZHggPSAodG91Y2guY2xpZW50WCAtIHRhcEV2dC5jbGllbnRYICsgZmFsbGJhY2tPZmZzZXQueCkgLyAoc2NhbGVYIHx8IDEpICsgKHJlbGF0aXZlU2Nyb2xsT2Zmc2V0ID8gcmVsYXRpdmVTY3JvbGxPZmZzZXRbMF0gLSBnaG9zdFJlbGF0aXZlUGFyZW50SW5pdGlhbFNjcm9sbFswXSA6IDApIC8gKHNjYWxlWCB8fCAxKSwKICAgICAgICAgIGR5ID0gKHRvdWNoLmNsaWVudFkgLSB0YXBFdnQuY2xpZW50WSArIGZhbGxiYWNrT2Zmc2V0LnkpIC8gKHNjYWxlWSB8fCAxKSArIChyZWxhdGl2ZVNjcm9sbE9mZnNldCA/IHJlbGF0aXZlU2Nyb2xsT2Zmc2V0WzFdIC0gZ2hvc3RSZWxhdGl2ZVBhcmVudEluaXRpYWxTY3JvbGxbMV0gOiAwKSAvIChzY2FsZVkgfHwgMSk7IC8vIG9ubHkgc2V0IHRoZSBzdGF0dXMgdG8gZHJhZ2dpbmcsIHdoZW4gd2UgYXJlIGFjdHVhbGx5IGRyYWdnaW5nCgogICAgICBpZiAoIVNvcnRhYmxlLmFjdGl2ZSAmJiAhYXdhaXRpbmdEcmFnU3RhcnRlZCkgewogICAgICAgIGlmIChmYWxsYmFja1RvbGVyYW5jZSAmJiBNYXRoLm1heChNYXRoLmFicyh0b3VjaC5jbGllbnRYIC0gdGhpcy5fbGFzdFgpLCBNYXRoLmFicyh0b3VjaC5jbGllbnRZIC0gdGhpcy5fbGFzdFkpKSA8IGZhbGxiYWNrVG9sZXJhbmNlKSB7CiAgICAgICAgICByZXR1cm47CiAgICAgICAgfQoKICAgICAgICB0aGlzLl9vbkRyYWdTdGFydChldnQsIHRydWUpOwogICAgICB9CgogICAgICBpZiAoZ2hvc3RFbCkgewogICAgICAgIGlmIChnaG9zdE1hdHJpeCkgewogICAgICAgICAgZ2hvc3RNYXRyaXguZSArPSBkeCAtIChsYXN0RHggfHwgMCk7CiAgICAgICAgICBnaG9zdE1hdHJpeC5mICs9IGR5IC0gKGxhc3REeSB8fCAwKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgZ2hvc3RNYXRyaXggPSB7CiAgICAgICAgICAgIGE6IDEsCiAgICAgICAgICAgIGI6IDAsCiAgICAgICAgICAgIGM6IDAsCiAgICAgICAgICAgIGQ6IDEsCiAgICAgICAgICAgIGU6IGR4LAogICAgICAgICAgICBmOiBkeQogICAgICAgICAgfTsKICAgICAgICB9CgogICAgICAgIHZhciBjc3NNYXRyaXggPSAibWF0cml4KCIuY29uY2F0KGdob3N0TWF0cml4LmEsICIsIikuY29uY2F0KGdob3N0TWF0cml4LmIsICIsIikuY29uY2F0KGdob3N0TWF0cml4LmMsICIsIikuY29uY2F0KGdob3N0TWF0cml4LmQsICIsIikuY29uY2F0KGdob3N0TWF0cml4LmUsICIsIikuY29uY2F0KGdob3N0TWF0cml4LmYsICIpIik7CiAgICAgICAgY3NzKGdob3N0RWwsICd3ZWJraXRUcmFuc2Zvcm0nLCBjc3NNYXRyaXgpOwogICAgICAgIGNzcyhnaG9zdEVsLCAnbW96VHJhbnNmb3JtJywgY3NzTWF0cml4KTsKICAgICAgICBjc3MoZ2hvc3RFbCwgJ21zVHJhbnNmb3JtJywgY3NzTWF0cml4KTsKICAgICAgICBjc3MoZ2hvc3RFbCwgJ3RyYW5zZm9ybScsIGNzc01hdHJpeCk7CiAgICAgICAgbGFzdER4ID0gZHg7CiAgICAgICAgbGFzdER5ID0gZHk7CiAgICAgICAgdG91Y2hFdnQgPSB0b3VjaDsKICAgICAgfQoKICAgICAgZXZ0LmNhbmNlbGFibGUgJiYgZXZ0LnByZXZlbnREZWZhdWx0KCk7CiAgICB9CiAgfSwKICBfYXBwZW5kR2hvc3Q6IGZ1bmN0aW9uIF9hcHBlbmRHaG9zdCgpIHsKICAgIC8vIEJ1ZyBpZiB1c2luZyBzY2FsZSgpOiBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8yNjM3MDU4CiAgICAvLyBOb3QgYmVpbmcgYWRqdXN0ZWQgZm9yCiAgICBpZiAoIWdob3N0RWwpIHsKICAgICAgdmFyIGNvbnRhaW5lciA9IHRoaXMub3B0aW9ucy5mYWxsYmFja09uQm9keSA/IGRvY3VtZW50LmJvZHkgOiByb290RWwsCiAgICAgICAgICByZWN0ID0gZ2V0UmVjdChkcmFnRWwsIHRydWUsIFBvc2l0aW9uR2hvc3RBYnNvbHV0ZWx5LCB0cnVlLCBjb250YWluZXIpLAogICAgICAgICAgb3B0aW9ucyA9IHRoaXMub3B0aW9uczsgLy8gUG9zaXRpb24gYWJzb2x1dGVseQoKICAgICAgaWYgKFBvc2l0aW9uR2hvc3RBYnNvbHV0ZWx5KSB7CiAgICAgICAgLy8gR2V0IHJlbGF0aXZlbHkgcG9zaXRpb25lZCBwYXJlbnQKICAgICAgICBnaG9zdFJlbGF0aXZlUGFyZW50ID0gY29udGFpbmVyOwoKICAgICAgICB3aGlsZSAoY3NzKGdob3N0UmVsYXRpdmVQYXJlbnQsICdwb3NpdGlvbicpID09PSAnc3RhdGljJyAmJiBjc3MoZ2hvc3RSZWxhdGl2ZVBhcmVudCwgJ3RyYW5zZm9ybScpID09PSAnbm9uZScgJiYgZ2hvc3RSZWxhdGl2ZVBhcmVudCAhPT0gZG9jdW1lbnQpIHsKICAgICAgICAgIGdob3N0UmVsYXRpdmVQYXJlbnQgPSBnaG9zdFJlbGF0aXZlUGFyZW50LnBhcmVudE5vZGU7CiAgICAgICAgfQoKICAgICAgICBpZiAoZ2hvc3RSZWxhdGl2ZVBhcmVudCAhPT0gZG9jdW1lbnQuYm9keSAmJiBnaG9zdFJlbGF0aXZlUGFyZW50ICE9PSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpIHsKICAgICAgICAgIGlmIChnaG9zdFJlbGF0aXZlUGFyZW50ID09PSBkb2N1bWVudCkgZ2hvc3RSZWxhdGl2ZVBhcmVudCA9IGdldFdpbmRvd1Njcm9sbGluZ0VsZW1lbnQoKTsKICAgICAgICAgIHJlY3QudG9wICs9IGdob3N0UmVsYXRpdmVQYXJlbnQuc2Nyb2xsVG9wOwogICAgICAgICAgcmVjdC5sZWZ0ICs9IGdob3N0UmVsYXRpdmVQYXJlbnQuc2Nyb2xsTGVmdDsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgZ2hvc3RSZWxhdGl2ZVBhcmVudCA9IGdldFdpbmRvd1Njcm9sbGluZ0VsZW1lbnQoKTsKICAgICAgICB9CgogICAgICAgIGdob3N0UmVsYXRpdmVQYXJlbnRJbml0aWFsU2Nyb2xsID0gZ2V0UmVsYXRpdmVTY3JvbGxPZmZzZXQoZ2hvc3RSZWxhdGl2ZVBhcmVudCk7CiAgICAgIH0KCiAgICAgIGdob3N0RWwgPSBkcmFnRWwuY2xvbmVOb2RlKHRydWUpOwogICAgICB0b2dnbGVDbGFzcyhnaG9zdEVsLCBvcHRpb25zLmdob3N0Q2xhc3MsIGZhbHNlKTsKICAgICAgdG9nZ2xlQ2xhc3MoZ2hvc3RFbCwgb3B0aW9ucy5mYWxsYmFja0NsYXNzLCB0cnVlKTsKICAgICAgdG9nZ2xlQ2xhc3MoZ2hvc3RFbCwgb3B0aW9ucy5kcmFnQ2xhc3MsIHRydWUpOwogICAgICBjc3MoZ2hvc3RFbCwgJ3RyYW5zaXRpb24nLCAnJyk7CiAgICAgIGNzcyhnaG9zdEVsLCAndHJhbnNmb3JtJywgJycpOwogICAgICBjc3MoZ2hvc3RFbCwgJ2JveC1zaXppbmcnLCAnYm9yZGVyLWJveCcpOwogICAgICBjc3MoZ2hvc3RFbCwgJ21hcmdpbicsIDApOwogICAgICBjc3MoZ2hvc3RFbCwgJ3RvcCcsIHJlY3QudG9wKTsKICAgICAgY3NzKGdob3N0RWwsICdsZWZ0JywgcmVjdC5sZWZ0KTsKICAgICAgY3NzKGdob3N0RWwsICd3aWR0aCcsIHJlY3Qud2lkdGgpOwogICAgICBjc3MoZ2hvc3RFbCwgJ2hlaWdodCcsIHJlY3QuaGVpZ2h0KTsKICAgICAgY3NzKGdob3N0RWwsICdvcGFjaXR5JywgJzAuOCcpOwogICAgICBjc3MoZ2hvc3RFbCwgJ3Bvc2l0aW9uJywgUG9zaXRpb25HaG9zdEFic29sdXRlbHkgPyAnYWJzb2x1dGUnIDogJ2ZpeGVkJyk7CiAgICAgIGNzcyhnaG9zdEVsLCAnekluZGV4JywgJzEwMDAwMCcpOwogICAgICBjc3MoZ2hvc3RFbCwgJ3BvaW50ZXJFdmVudHMnLCAnbm9uZScpOwogICAgICBTb3J0YWJsZS5naG9zdCA9IGdob3N0RWw7CiAgICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChnaG9zdEVsKTsgLy8gU2V0IHRyYW5zZm9ybS1vcmlnaW4KCiAgICAgIGNzcyhnaG9zdEVsLCAndHJhbnNmb3JtLW9yaWdpbicsIHRhcERpc3RhbmNlTGVmdCAvIHBhcnNlSW50KGdob3N0RWwuc3R5bGUud2lkdGgpICogMTAwICsgJyUgJyArIHRhcERpc3RhbmNlVG9wIC8gcGFyc2VJbnQoZ2hvc3RFbC5zdHlsZS5oZWlnaHQpICogMTAwICsgJyUnKTsKICAgIH0KICB9LAogIF9vbkRyYWdTdGFydDogZnVuY3Rpb24gX29uRHJhZ1N0YXJ0KAogIC8qKkV2ZW50Ki8KICBldnQsCiAgLyoqYm9vbGVhbiovCiAgZmFsbGJhY2spIHsKICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgdmFyIGRhdGFUcmFuc2ZlciA9IGV2dC5kYXRhVHJhbnNmZXI7CiAgICB2YXIgb3B0aW9ucyA9IF90aGlzLm9wdGlvbnM7CiAgICBwbHVnaW5FdmVudCgnZHJhZ1N0YXJ0JywgdGhpcywgewogICAgICBldnQ6IGV2dAogICAgfSk7CgogICAgaWYgKFNvcnRhYmxlLmV2ZW50Q2FuY2VsZWQpIHsKICAgICAgdGhpcy5fb25Ecm9wKCk7CgogICAgICByZXR1cm47CiAgICB9CgogICAgcGx1Z2luRXZlbnQoJ3NldHVwQ2xvbmUnLCB0aGlzKTsKCiAgICBpZiAoIVNvcnRhYmxlLmV2ZW50Q2FuY2VsZWQpIHsKICAgICAgY2xvbmVFbCA9IGNsb25lKGRyYWdFbCk7CiAgICAgIGNsb25lRWwuZHJhZ2dhYmxlID0gZmFsc2U7CiAgICAgIGNsb25lRWwuc3R5bGVbJ3dpbGwtY2hhbmdlJ10gPSAnJzsKCiAgICAgIHRoaXMuX2hpZGVDbG9uZSgpOwoKICAgICAgdG9nZ2xlQ2xhc3MoY2xvbmVFbCwgdGhpcy5vcHRpb25zLmNob3NlbkNsYXNzLCBmYWxzZSk7CiAgICAgIFNvcnRhYmxlLmNsb25lID0gY2xvbmVFbDsKICAgIH0gLy8gIzExNDM6IElGcmFtZSBzdXBwb3J0IHdvcmthcm91bmQKCgogICAgX3RoaXMuY2xvbmVJZCA9IF9uZXh0VGljayhmdW5jdGlvbiAoKSB7CiAgICAgIHBsdWdpbkV2ZW50KCdjbG9uZScsIF90aGlzKTsKICAgICAgaWYgKFNvcnRhYmxlLmV2ZW50Q2FuY2VsZWQpIHJldHVybjsKCiAgICAgIGlmICghX3RoaXMub3B0aW9ucy5yZW1vdmVDbG9uZU9uSGlkZSkgewogICAgICAgIHJvb3RFbC5pbnNlcnRCZWZvcmUoY2xvbmVFbCwgZHJhZ0VsKTsKICAgICAgfQoKICAgICAgX3RoaXMuX2hpZGVDbG9uZSgpOwoKICAgICAgX2Rpc3BhdGNoRXZlbnQoewogICAgICAgIHNvcnRhYmxlOiBfdGhpcywKICAgICAgICBuYW1lOiAnY2xvbmUnCiAgICAgIH0pOwogICAgfSk7CiAgICAhZmFsbGJhY2sgJiYgdG9nZ2xlQ2xhc3MoZHJhZ0VsLCBvcHRpb25zLmRyYWdDbGFzcywgdHJ1ZSk7IC8vIFNldCBwcm9wZXIgZHJvcCBldmVudHMKCiAgICBpZiAoZmFsbGJhY2spIHsKICAgICAgaWdub3JlTmV4dENsaWNrID0gdHJ1ZTsKICAgICAgX3RoaXMuX2xvb3BJZCA9IHNldEludGVydmFsKF90aGlzLl9lbXVsYXRlRHJhZ092ZXIsIDUwKTsKICAgIH0gZWxzZSB7CiAgICAgIC8vIFVuZG8gd2hhdCB3YXMgc2V0IGluIF9wcmVwYXJlRHJhZ1N0YXJ0IGJlZm9yZSBkcmFnIHN0YXJ0ZWQKICAgICAgb2ZmKGRvY3VtZW50LCAnbW91c2V1cCcsIF90aGlzLl9vbkRyb3ApOwogICAgICBvZmYoZG9jdW1lbnQsICd0b3VjaGVuZCcsIF90aGlzLl9vbkRyb3ApOwogICAgICBvZmYoZG9jdW1lbnQsICd0b3VjaGNhbmNlbCcsIF90aGlzLl9vbkRyb3ApOwoKICAgICAgaWYgKGRhdGFUcmFuc2ZlcikgewogICAgICAgIGRhdGFUcmFuc2Zlci5lZmZlY3RBbGxvd2VkID0gJ21vdmUnOwogICAgICAgIG9wdGlvbnMuc2V0RGF0YSAmJiBvcHRpb25zLnNldERhdGEuY2FsbChfdGhpcywgZGF0YVRyYW5zZmVyLCBkcmFnRWwpOwogICAgICB9CgogICAgICBvbihkb2N1bWVudCwgJ2Ryb3AnLCBfdGhpcyk7IC8vICMxMjc2IGZpeDoKCiAgICAgIGNzcyhkcmFnRWwsICd0cmFuc2Zvcm0nLCAndHJhbnNsYXRlWigwKScpOwogICAgfQoKICAgIGF3YWl0aW5nRHJhZ1N0YXJ0ZWQgPSB0cnVlOwogICAgX3RoaXMuX2RyYWdTdGFydElkID0gX25leHRUaWNrKF90aGlzLl9kcmFnU3RhcnRlZC5iaW5kKF90aGlzLCBmYWxsYmFjaywgZXZ0KSk7CiAgICBvbihkb2N1bWVudCwgJ3NlbGVjdHN0YXJ0JywgX3RoaXMpOwogICAgbW92ZWQgPSB0cnVlOwoKICAgIGlmIChTYWZhcmkpIHsKICAgICAgY3NzKGRvY3VtZW50LmJvZHksICd1c2VyLXNlbGVjdCcsICdub25lJyk7CiAgICB9CiAgfSwKICAvLyBSZXR1cm5zIHRydWUgLSBpZiBubyBmdXJ0aGVyIGFjdGlvbiBpcyBuZWVkZWQgKGVpdGhlciBpbnNlcnRlZCBvciBhbm90aGVyIGNvbmRpdGlvbikKICBfb25EcmFnT3ZlcjogZnVuY3Rpb24gX29uRHJhZ092ZXIoCiAgLyoqRXZlbnQqLwogIGV2dCkgewogICAgdmFyIGVsID0gdGhpcy5lbCwKICAgICAgICB0YXJnZXQgPSBldnQudGFyZ2V0LAogICAgICAgIGRyYWdSZWN0LAogICAgICAgIHRhcmdldFJlY3QsCiAgICAgICAgcmV2ZXJ0LAogICAgICAgIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnMsCiAgICAgICAgZ3JvdXAgPSBvcHRpb25zLmdyb3VwLAogICAgICAgIGFjdGl2ZVNvcnRhYmxlID0gU29ydGFibGUuYWN0aXZlLAogICAgICAgIGlzT3duZXIgPSBhY3RpdmVHcm91cCA9PT0gZ3JvdXAsCiAgICAgICAgY2FuU29ydCA9IG9wdGlvbnMuc29ydCwKICAgICAgICBmcm9tU29ydGFibGUgPSBwdXRTb3J0YWJsZSB8fCBhY3RpdmVTb3J0YWJsZSwKICAgICAgICB2ZXJ0aWNhbCwKICAgICAgICBfdGhpcyA9IHRoaXMsCiAgICAgICAgY29tcGxldGVkRmlyZWQgPSBmYWxzZTsKCiAgICBpZiAoX3NpbGVudCkgcmV0dXJuOwoKICAgIGZ1bmN0aW9uIGRyYWdPdmVyRXZlbnQobmFtZSwgZXh0cmEpIHsKICAgICAgcGx1Z2luRXZlbnQobmFtZSwgX3RoaXMsIF9vYmplY3RTcHJlYWQoewogICAgICAgIGV2dDogZXZ0LAogICAgICAgIGlzT3duZXI6IGlzT3duZXIsCiAgICAgICAgYXhpczogdmVydGljYWwgPyAndmVydGljYWwnIDogJ2hvcml6b250YWwnLAogICAgICAgIHJldmVydDogcmV2ZXJ0LAogICAgICAgIGRyYWdSZWN0OiBkcmFnUmVjdCwKICAgICAgICB0YXJnZXRSZWN0OiB0YXJnZXRSZWN0LAogICAgICAgIGNhblNvcnQ6IGNhblNvcnQsCiAgICAgICAgZnJvbVNvcnRhYmxlOiBmcm9tU29ydGFibGUsCiAgICAgICAgdGFyZ2V0OiB0YXJnZXQsCiAgICAgICAgY29tcGxldGVkOiBjb21wbGV0ZWQsCiAgICAgICAgb25Nb3ZlOiBmdW5jdGlvbiBvbk1vdmUodGFyZ2V0LCBhZnRlcikgewogICAgICAgICAgcmV0dXJuIF9vbk1vdmUocm9vdEVsLCBlbCwgZHJhZ0VsLCBkcmFnUmVjdCwgdGFyZ2V0LCBnZXRSZWN0KHRhcmdldCksIGV2dCwgYWZ0ZXIpOwogICAgICAgIH0sCiAgICAgICAgY2hhbmdlZDogY2hhbmdlZAogICAgICB9LCBleHRyYSkpOwogICAgfSAvLyBDYXB0dXJlIGFuaW1hdGlvbiBzdGF0ZQoKCiAgICBmdW5jdGlvbiBjYXB0dXJlKCkgewogICAgICBkcmFnT3ZlckV2ZW50KCdkcmFnT3ZlckFuaW1hdGlvbkNhcHR1cmUnKTsKCiAgICAgIF90aGlzLmNhcHR1cmVBbmltYXRpb25TdGF0ZSgpOwoKICAgICAgaWYgKF90aGlzICE9PSBmcm9tU29ydGFibGUpIHsKICAgICAgICBmcm9tU29ydGFibGUuY2FwdHVyZUFuaW1hdGlvblN0YXRlKCk7CiAgICAgIH0KICAgIH0gLy8gUmV0dXJuIGludm9jYXRpb24gd2hlbiBkcmFnRWwgaXMgaW5zZXJ0ZWQgKG9yIGNvbXBsZXRlZCkKCgogICAgZnVuY3Rpb24gY29tcGxldGVkKGluc2VydGlvbikgewogICAgICBkcmFnT3ZlckV2ZW50KCdkcmFnT3ZlckNvbXBsZXRlZCcsIHsKICAgICAgICBpbnNlcnRpb246IGluc2VydGlvbgogICAgICB9KTsKCiAgICAgIGlmIChpbnNlcnRpb24pIHsKICAgICAgICAvLyBDbG9uZXMgbXVzdCBiZSBoaWRkZW4gYmVmb3JlIGZvbGRpbmcgYW5pbWF0aW9uIHRvIGNhcHR1cmUgZHJhZ1JlY3RBYnNvbHV0ZSBwcm9wZXJseQogICAgICAgIGlmIChpc093bmVyKSB7CiAgICAgICAgICBhY3RpdmVTb3J0YWJsZS5faGlkZUNsb25lKCk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGFjdGl2ZVNvcnRhYmxlLl9zaG93Q2xvbmUoX3RoaXMpOwogICAgICAgIH0KCiAgICAgICAgaWYgKF90aGlzICE9PSBmcm9tU29ydGFibGUpIHsKICAgICAgICAgIC8vIFNldCBnaG9zdCBjbGFzcyB0byBuZXcgc29ydGFibGUncyBnaG9zdCBjbGFzcwogICAgICAgICAgdG9nZ2xlQ2xhc3MoZHJhZ0VsLCBwdXRTb3J0YWJsZSA/IHB1dFNvcnRhYmxlLm9wdGlvbnMuZ2hvc3RDbGFzcyA6IGFjdGl2ZVNvcnRhYmxlLm9wdGlvbnMuZ2hvc3RDbGFzcywgZmFsc2UpOwogICAgICAgICAgdG9nZ2xlQ2xhc3MoZHJhZ0VsLCBvcHRpb25zLmdob3N0Q2xhc3MsIHRydWUpOwogICAgICAgIH0KCiAgICAgICAgaWYgKHB1dFNvcnRhYmxlICE9PSBfdGhpcyAmJiBfdGhpcyAhPT0gU29ydGFibGUuYWN0aXZlKSB7CiAgICAgICAgICBwdXRTb3J0YWJsZSA9IF90aGlzOwogICAgICAgIH0gZWxzZSBpZiAoX3RoaXMgPT09IFNvcnRhYmxlLmFjdGl2ZSAmJiBwdXRTb3J0YWJsZSkgewogICAgICAgICAgcHV0U29ydGFibGUgPSBudWxsOwogICAgICAgIH0gLy8gQW5pbWF0aW9uCgoKICAgICAgICBpZiAoZnJvbVNvcnRhYmxlID09PSBfdGhpcykgewogICAgICAgICAgX3RoaXMuX2lnbm9yZVdoaWxlQW5pbWF0aW5nID0gdGFyZ2V0OwogICAgICAgIH0KCiAgICAgICAgX3RoaXMuYW5pbWF0ZUFsbChmdW5jdGlvbiAoKSB7CiAgICAgICAgICBkcmFnT3ZlckV2ZW50KCdkcmFnT3ZlckFuaW1hdGlvbkNvbXBsZXRlJyk7CiAgICAgICAgICBfdGhpcy5faWdub3JlV2hpbGVBbmltYXRpbmcgPSBudWxsOwogICAgICAgIH0pOwoKICAgICAgICBpZiAoX3RoaXMgIT09IGZyb21Tb3J0YWJsZSkgewogICAgICAgICAgZnJvbVNvcnRhYmxlLmFuaW1hdGVBbGwoKTsKICAgICAgICAgIGZyb21Tb3J0YWJsZS5faWdub3JlV2hpbGVBbmltYXRpbmcgPSBudWxsOwogICAgICAgIH0KICAgICAgfSAvLyBOdWxsIGxhc3RUYXJnZXQgaWYgaXQgaXMgbm90IGluc2lkZSBhIHByZXZpb3VzbHkgc3dhcHBlZCBlbGVtZW50CgoKICAgICAgaWYgKHRhcmdldCA9PT0gZHJhZ0VsICYmICFkcmFnRWwuYW5pbWF0ZWQgfHwgdGFyZ2V0ID09PSBlbCAmJiAhdGFyZ2V0LmFuaW1hdGVkKSB7CiAgICAgICAgbGFzdFRhcmdldCA9IG51bGw7CiAgICAgIH0gLy8gbm8gYnViYmxpbmcgYW5kIG5vdCBmYWxsYmFjawoKCiAgICAgIGlmICghb3B0aW9ucy5kcmFnb3ZlckJ1YmJsZSAmJiAhZXZ0LnJvb3RFbCAmJiB0YXJnZXQgIT09IGRvY3VtZW50KSB7CiAgICAgICAgZHJhZ0VsLnBhcmVudE5vZGVbZXhwYW5kb10uX2lzT3V0c2lkZVRoaXNFbChldnQudGFyZ2V0KTsgLy8gRG8gbm90IGRldGVjdCBmb3IgZW1wdHkgaW5zZXJ0IGlmIGFscmVhZHkgaW5zZXJ0ZWQKCgogICAgICAgICFpbnNlcnRpb24gJiYgbmVhcmVzdEVtcHR5SW5zZXJ0RGV0ZWN0RXZlbnQoZXZ0KTsKICAgICAgfQoKICAgICAgIW9wdGlvbnMuZHJhZ292ZXJCdWJibGUgJiYgZXZ0LnN0b3BQcm9wYWdhdGlvbiAmJiBldnQuc3RvcFByb3BhZ2F0aW9uKCk7CiAgICAgIHJldHVybiBjb21wbGV0ZWRGaXJlZCA9IHRydWU7CiAgICB9IC8vIENhbGwgd2hlbiBkcmFnRWwgaGFzIGJlZW4gaW5zZXJ0ZWQKCgogICAgZnVuY3Rpb24gY2hhbmdlZCgpIHsKICAgICAgbmV3SW5kZXggPSBpbmRleChkcmFnRWwpOwogICAgICBuZXdEcmFnZ2FibGVJbmRleCA9IGluZGV4KGRyYWdFbCwgb3B0aW9ucy5kcmFnZ2FibGUpOwoKICAgICAgX2Rpc3BhdGNoRXZlbnQoewogICAgICAgIHNvcnRhYmxlOiBfdGhpcywKICAgICAgICBuYW1lOiAnY2hhbmdlJywKICAgICAgICB0b0VsOiBlbCwKICAgICAgICBuZXdJbmRleDogbmV3SW5kZXgsCiAgICAgICAgbmV3RHJhZ2dhYmxlSW5kZXg6IG5ld0RyYWdnYWJsZUluZGV4LAogICAgICAgIG9yaWdpbmFsRXZlbnQ6IGV2dAogICAgICB9KTsKICAgIH0KCiAgICBpZiAoZXZ0LnByZXZlbnREZWZhdWx0ICE9PSB2b2lkIDApIHsKICAgICAgZXZ0LmNhbmNlbGFibGUgJiYgZXZ0LnByZXZlbnREZWZhdWx0KCk7CiAgICB9CgogICAgdGFyZ2V0ID0gY2xvc2VzdCh0YXJnZXQsIG9wdGlvbnMuZHJhZ2dhYmxlLCBlbCwgdHJ1ZSk7CiAgICBkcmFnT3ZlckV2ZW50KCdkcmFnT3ZlcicpOwogICAgaWYgKFNvcnRhYmxlLmV2ZW50Q2FuY2VsZWQpIHJldHVybiBjb21wbGV0ZWRGaXJlZDsKCiAgICBpZiAoZHJhZ0VsLmNvbnRhaW5zKGV2dC50YXJnZXQpIHx8IHRhcmdldC5hbmltYXRlZCAmJiB0YXJnZXQuYW5pbWF0aW5nWCAmJiB0YXJnZXQuYW5pbWF0aW5nWSB8fCBfdGhpcy5faWdub3JlV2hpbGVBbmltYXRpbmcgPT09IHRhcmdldCkgewogICAgICByZXR1cm4gY29tcGxldGVkKGZhbHNlKTsKICAgIH0KCiAgICBpZ25vcmVOZXh0Q2xpY2sgPSBmYWxzZTsKCiAgICBpZiAoYWN0aXZlU29ydGFibGUgJiYgIW9wdGlvbnMuZGlzYWJsZWQgJiYgKGlzT3duZXIgPyBjYW5Tb3J0IHx8IChyZXZlcnQgPSAhcm9vdEVsLmNvbnRhaW5zKGRyYWdFbCkpIC8vIFJldmVydGluZyBpdGVtIGludG8gdGhlIG9yaWdpbmFsIGxpc3QKICAgIDogcHV0U29ydGFibGUgPT09IHRoaXMgfHwgKHRoaXMubGFzdFB1dE1vZGUgPSBhY3RpdmVHcm91cC5jaGVja1B1bGwodGhpcywgYWN0aXZlU29ydGFibGUsIGRyYWdFbCwgZXZ0KSkgJiYgZ3JvdXAuY2hlY2tQdXQodGhpcywgYWN0aXZlU29ydGFibGUsIGRyYWdFbCwgZXZ0KSkpIHsKICAgICAgdmVydGljYWwgPSB0aGlzLl9nZXREaXJlY3Rpb24oZXZ0LCB0YXJnZXQpID09PSAndmVydGljYWwnOwogICAgICBkcmFnUmVjdCA9IGdldFJlY3QoZHJhZ0VsKTsKICAgICAgZHJhZ092ZXJFdmVudCgnZHJhZ092ZXJWYWxpZCcpOwogICAgICBpZiAoU29ydGFibGUuZXZlbnRDYW5jZWxlZCkgcmV0dXJuIGNvbXBsZXRlZEZpcmVkOwoKICAgICAgaWYgKHJldmVydCkgewogICAgICAgIHBhcmVudEVsID0gcm9vdEVsOyAvLyBhY3R1YWxpemF0aW9uCgogICAgICAgIGNhcHR1cmUoKTsKCiAgICAgICAgdGhpcy5faGlkZUNsb25lKCk7CgogICAgICAgIGRyYWdPdmVyRXZlbnQoJ3JldmVydCcpOwoKICAgICAgICBpZiAoIVNvcnRhYmxlLmV2ZW50Q2FuY2VsZWQpIHsKICAgICAgICAgIGlmIChuZXh0RWwpIHsKICAgICAgICAgICAgcm9vdEVsLmluc2VydEJlZm9yZShkcmFnRWwsIG5leHRFbCk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICByb290RWwuYXBwZW5kQ2hpbGQoZHJhZ0VsKTsKICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIHJldHVybiBjb21wbGV0ZWQodHJ1ZSk7CiAgICAgIH0KCiAgICAgIHZhciBlbExhc3RDaGlsZCA9IGxhc3RDaGlsZChlbCwgb3B0aW9ucy5kcmFnZ2FibGUpOwoKICAgICAgaWYgKCFlbExhc3RDaGlsZCB8fCBfZ2hvc3RJc0xhc3QoZXZ0LCB2ZXJ0aWNhbCwgdGhpcykgJiYgIWVsTGFzdENoaWxkLmFuaW1hdGVkKSB7CiAgICAgICAgLy8gSWYgYWxyZWFkeSBhdCBlbmQgb2YgbGlzdDogRG8gbm90IGluc2VydAogICAgICAgIGlmIChlbExhc3RDaGlsZCA9PT0gZHJhZ0VsKSB7CiAgICAgICAgICByZXR1cm4gY29tcGxldGVkKGZhbHNlKTsKICAgICAgICB9IC8vIGFzc2lnbiB0YXJnZXQgb25seSBpZiBjb25kaXRpb24gaXMgdHJ1ZQoKCiAgICAgICAgaWYgKGVsTGFzdENoaWxkICYmIGVsID09PSBldnQudGFyZ2V0KSB7CiAgICAgICAgICB0YXJnZXQgPSBlbExhc3RDaGlsZDsKICAgICAgICB9CgogICAgICAgIGlmICh0YXJnZXQpIHsKICAgICAgICAgIHRhcmdldFJlY3QgPSBnZXRSZWN0KHRhcmdldCk7CiAgICAgICAgfQoKICAgICAgICBpZiAoX29uTW92ZShyb290RWwsIGVsLCBkcmFnRWwsIGRyYWdSZWN0LCB0YXJnZXQsIHRhcmdldFJlY3QsIGV2dCwgISF0YXJnZXQpICE9PSBmYWxzZSkgewogICAgICAgICAgY2FwdHVyZSgpOwogICAgICAgICAgZWwuYXBwZW5kQ2hpbGQoZHJhZ0VsKTsKICAgICAgICAgIHBhcmVudEVsID0gZWw7IC8vIGFjdHVhbGl6YXRpb24KCiAgICAgICAgICBjaGFuZ2VkKCk7CiAgICAgICAgICByZXR1cm4gY29tcGxldGVkKHRydWUpOwogICAgICAgIH0KICAgICAgfSBlbHNlIGlmICh0YXJnZXQucGFyZW50Tm9kZSA9PT0gZWwpIHsKICAgICAgICB0YXJnZXRSZWN0ID0gZ2V0UmVjdCh0YXJnZXQpOwogICAgICAgIHZhciBkaXJlY3Rpb24gPSAwLAogICAgICAgICAgICB0YXJnZXRCZWZvcmVGaXJzdFN3YXAsCiAgICAgICAgICAgIGRpZmZlcmVudExldmVsID0gZHJhZ0VsLnBhcmVudE5vZGUgIT09IGVsLAogICAgICAgICAgICBkaWZmZXJlbnRSb3dDb2wgPSAhX2RyYWdFbEluUm93Q29sdW1uKGRyYWdFbC5hbmltYXRlZCAmJiBkcmFnRWwudG9SZWN0IHx8IGRyYWdSZWN0LCB0YXJnZXQuYW5pbWF0ZWQgJiYgdGFyZ2V0LnRvUmVjdCB8fCB0YXJnZXRSZWN0LCB2ZXJ0aWNhbCksCiAgICAgICAgICAgIHNpZGUxID0gdmVydGljYWwgPyAndG9wJyA6ICdsZWZ0JywKICAgICAgICAgICAgc2Nyb2xsZWRQYXN0VG9wID0gaXNTY3JvbGxlZFBhc3QodGFyZ2V0LCAndG9wJywgJ3RvcCcpIHx8IGlzU2Nyb2xsZWRQYXN0KGRyYWdFbCwgJ3RvcCcsICd0b3AnKSwKICAgICAgICAgICAgc2Nyb2xsQmVmb3JlID0gc2Nyb2xsZWRQYXN0VG9wID8gc2Nyb2xsZWRQYXN0VG9wLnNjcm9sbFRvcCA6IHZvaWQgMDsKCiAgICAgICAgaWYgKGxhc3RUYXJnZXQgIT09IHRhcmdldCkgewogICAgICAgICAgdGFyZ2V0QmVmb3JlRmlyc3RTd2FwID0gdGFyZ2V0UmVjdFtzaWRlMV07CiAgICAgICAgICBwYXN0Rmlyc3RJbnZlcnRUaHJlc2ggPSBmYWxzZTsKICAgICAgICAgIGlzQ2lyY3Vtc3RhbnRpYWxJbnZlcnQgPSAhZGlmZmVyZW50Um93Q29sICYmIG9wdGlvbnMuaW52ZXJ0U3dhcCB8fCBkaWZmZXJlbnRMZXZlbDsKICAgICAgICB9CgogICAgICAgIGRpcmVjdGlvbiA9IF9nZXRTd2FwRGlyZWN0aW9uKGV2dCwgdGFyZ2V0LCB0YXJnZXRSZWN0LCB2ZXJ0aWNhbCwgZGlmZmVyZW50Um93Q29sID8gMSA6IG9wdGlvbnMuc3dhcFRocmVzaG9sZCwgb3B0aW9ucy5pbnZlcnRlZFN3YXBUaHJlc2hvbGQgPT0gbnVsbCA/IG9wdGlvbnMuc3dhcFRocmVzaG9sZCA6IG9wdGlvbnMuaW52ZXJ0ZWRTd2FwVGhyZXNob2xkLCBpc0NpcmN1bXN0YW50aWFsSW52ZXJ0LCBsYXN0VGFyZ2V0ID09PSB0YXJnZXQpOwogICAgICAgIHZhciBzaWJsaW5nOwoKICAgICAgICBpZiAoZGlyZWN0aW9uICE9PSAwKSB7CiAgICAgICAgICAvLyBDaGVjayBpZiB0YXJnZXQgaXMgYmVzaWRlIGRyYWdFbCBpbiByZXNwZWN0aXZlIGRpcmVjdGlvbiAoaWdub3JpbmcgaGlkZGVuIGVsZW1lbnRzKQogICAgICAgICAgdmFyIGRyYWdJbmRleCA9IGluZGV4KGRyYWdFbCk7CgogICAgICAgICAgZG8gewogICAgICAgICAgICBkcmFnSW5kZXggLT0gZGlyZWN0aW9uOwogICAgICAgICAgICBzaWJsaW5nID0gcGFyZW50RWwuY2hpbGRyZW5bZHJhZ0luZGV4XTsKICAgICAgICAgIH0gd2hpbGUgKHNpYmxpbmcgJiYgKGNzcyhzaWJsaW5nLCAnZGlzcGxheScpID09PSAnbm9uZScgfHwgc2libGluZyA9PT0gZ2hvc3RFbCkpOwogICAgICAgIH0gLy8gSWYgZHJhZ0VsIGlzIGFscmVhZHkgYmVzaWRlIHRhcmdldDogRG8gbm90IGluc2VydAoKCiAgICAgICAgaWYgKGRpcmVjdGlvbiA9PT0gMCB8fCBzaWJsaW5nID09PSB0YXJnZXQpIHsKICAgICAgICAgIHJldHVybiBjb21wbGV0ZWQoZmFsc2UpOwogICAgICAgIH0KCiAgICAgICAgbGFzdFRhcmdldCA9IHRhcmdldDsKICAgICAgICBsYXN0RGlyZWN0aW9uID0gZGlyZWN0aW9uOwogICAgICAgIHZhciBuZXh0U2libGluZyA9IHRhcmdldC5uZXh0RWxlbWVudFNpYmxpbmcsCiAgICAgICAgICAgIGFmdGVyID0gZmFsc2U7CiAgICAgICAgYWZ0ZXIgPSBkaXJlY3Rpb24gPT09IDE7CgogICAgICAgIHZhciBtb3ZlVmVjdG9yID0gX29uTW92ZShyb290RWwsIGVsLCBkcmFnRWwsIGRyYWdSZWN0LCB0YXJnZXQsIHRhcmdldFJlY3QsIGV2dCwgYWZ0ZXIpOwoKICAgICAgICBpZiAobW92ZVZlY3RvciAhPT0gZmFsc2UpIHsKICAgICAgICAgIGlmIChtb3ZlVmVjdG9yID09PSAxIHx8IG1vdmVWZWN0b3IgPT09IC0xKSB7CiAgICAgICAgICAgIGFmdGVyID0gbW92ZVZlY3RvciA9PT0gMTsKICAgICAgICAgIH0KCiAgICAgICAgICBfc2lsZW50ID0gdHJ1ZTsKICAgICAgICAgIHNldFRpbWVvdXQoX3Vuc2lsZW50LCAzMCk7CiAgICAgICAgICBjYXB0dXJlKCk7CgogICAgICAgICAgaWYgKGFmdGVyICYmICFuZXh0U2libGluZykgewogICAgICAgICAgICBlbC5hcHBlbmRDaGlsZChkcmFnRWwpOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgdGFyZ2V0LnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGRyYWdFbCwgYWZ0ZXIgPyBuZXh0U2libGluZyA6IHRhcmdldCk7CiAgICAgICAgICB9IC8vIFVuZG8gY2hyb21lJ3Mgc2Nyb2xsIGFkanVzdG1lbnQgKGhhcyBubyBlZmZlY3Qgb24gb3RoZXIgYnJvd3NlcnMpCgoKICAgICAgICAgIGlmIChzY3JvbGxlZFBhc3RUb3ApIHsKICAgICAgICAgICAgc2Nyb2xsQnkoc2Nyb2xsZWRQYXN0VG9wLCAwLCBzY3JvbGxCZWZvcmUgLSBzY3JvbGxlZFBhc3RUb3Auc2Nyb2xsVG9wKTsKICAgICAgICAgIH0KCiAgICAgICAgICBwYXJlbnRFbCA9IGRyYWdFbC5wYXJlbnROb2RlOyAvLyBhY3R1YWxpemF0aW9uCiAgICAgICAgICAvLyBtdXN0IGJlIGRvbmUgYmVmb3JlIGFuaW1hdGlvbgoKICAgICAgICAgIGlmICh0YXJnZXRCZWZvcmVGaXJzdFN3YXAgIT09IHVuZGVmaW5lZCAmJiAhaXNDaXJjdW1zdGFudGlhbEludmVydCkgewogICAgICAgICAgICB0YXJnZXRNb3ZlRGlzdGFuY2UgPSBNYXRoLmFicyh0YXJnZXRCZWZvcmVGaXJzdFN3YXAgLSBnZXRSZWN0KHRhcmdldClbc2lkZTFdKTsKICAgICAgICAgIH0KCiAgICAgICAgICBjaGFuZ2VkKCk7CiAgICAgICAgICByZXR1cm4gY29tcGxldGVkKHRydWUpOwogICAgICAgIH0KICAgICAgfQoKICAgICAgaWYgKGVsLmNvbnRhaW5zKGRyYWdFbCkpIHsKICAgICAgICByZXR1cm4gY29tcGxldGVkKGZhbHNlKTsKICAgICAgfQogICAgfQoKICAgIHJldHVybiBmYWxzZTsKICB9LAogIF9pZ25vcmVXaGlsZUFuaW1hdGluZzogbnVsbCwKICBfb2ZmTW92ZUV2ZW50czogZnVuY3Rpb24gX29mZk1vdmVFdmVudHMoKSB7CiAgICBvZmYoZG9jdW1lbnQsICdtb3VzZW1vdmUnLCB0aGlzLl9vblRvdWNoTW92ZSk7CiAgICBvZmYoZG9jdW1lbnQsICd0b3VjaG1vdmUnLCB0aGlzLl9vblRvdWNoTW92ZSk7CiAgICBvZmYoZG9jdW1lbnQsICdwb2ludGVybW92ZScsIHRoaXMuX29uVG91Y2hNb3ZlKTsKICAgIG9mZihkb2N1bWVudCwgJ2RyYWdvdmVyJywgbmVhcmVzdEVtcHR5SW5zZXJ0RGV0ZWN0RXZlbnQpOwogICAgb2ZmKGRvY3VtZW50LCAnbW91c2Vtb3ZlJywgbmVhcmVzdEVtcHR5SW5zZXJ0RGV0ZWN0RXZlbnQpOwogICAgb2ZmKGRvY3VtZW50LCAndG91Y2htb3ZlJywgbmVhcmVzdEVtcHR5SW5zZXJ0RGV0ZWN0RXZlbnQpOwogIH0sCiAgX29mZlVwRXZlbnRzOiBmdW5jdGlvbiBfb2ZmVXBFdmVudHMoKSB7CiAgICB2YXIgb3duZXJEb2N1bWVudCA9IHRoaXMuZWwub3duZXJEb2N1bWVudDsKICAgIG9mZihvd25lckRvY3VtZW50LCAnbW91c2V1cCcsIHRoaXMuX29uRHJvcCk7CiAgICBvZmYob3duZXJEb2N1bWVudCwgJ3RvdWNoZW5kJywgdGhpcy5fb25Ecm9wKTsKICAgIG9mZihvd25lckRvY3VtZW50LCAncG9pbnRlcnVwJywgdGhpcy5fb25Ecm9wKTsKICAgIG9mZihvd25lckRvY3VtZW50LCAndG91Y2hjYW5jZWwnLCB0aGlzLl9vbkRyb3ApOwogICAgb2ZmKGRvY3VtZW50LCAnc2VsZWN0c3RhcnQnLCB0aGlzKTsKICB9LAogIF9vbkRyb3A6IGZ1bmN0aW9uIF9vbkRyb3AoCiAgLyoqRXZlbnQqLwogIGV2dCkgewogICAgdmFyIGVsID0gdGhpcy5lbCwKICAgICAgICBvcHRpb25zID0gdGhpcy5vcHRpb25zOyAvLyBHZXQgdGhlIGluZGV4IG9mIHRoZSBkcmFnZ2VkIGVsZW1lbnQgd2l0aGluIGl0cyBwYXJlbnQKCiAgICBuZXdJbmRleCA9IGluZGV4KGRyYWdFbCk7CiAgICBuZXdEcmFnZ2FibGVJbmRleCA9IGluZGV4KGRyYWdFbCwgb3B0aW9ucy5kcmFnZ2FibGUpOwogICAgcGx1Z2luRXZlbnQoJ2Ryb3AnLCB0aGlzLCB7CiAgICAgIGV2dDogZXZ0CiAgICB9KTsKICAgIHBhcmVudEVsID0gZHJhZ0VsICYmIGRyYWdFbC5wYXJlbnROb2RlOyAvLyBHZXQgYWdhaW4gYWZ0ZXIgcGx1Z2luIGV2ZW50CgogICAgbmV3SW5kZXggPSBpbmRleChkcmFnRWwpOwogICAgbmV3RHJhZ2dhYmxlSW5kZXggPSBpbmRleChkcmFnRWwsIG9wdGlvbnMuZHJhZ2dhYmxlKTsKCiAgICBpZiAoU29ydGFibGUuZXZlbnRDYW5jZWxlZCkgewogICAgICB0aGlzLl9udWxsaW5nKCk7CgogICAgICByZXR1cm47CiAgICB9CgogICAgYXdhaXRpbmdEcmFnU3RhcnRlZCA9IGZhbHNlOwogICAgaXNDaXJjdW1zdGFudGlhbEludmVydCA9IGZhbHNlOwogICAgcGFzdEZpcnN0SW52ZXJ0VGhyZXNoID0gZmFsc2U7CiAgICBjbGVhckludGVydmFsKHRoaXMuX2xvb3BJZCk7CiAgICBjbGVhclRpbWVvdXQodGhpcy5fZHJhZ1N0YXJ0VGltZXIpOwoKICAgIF9jYW5jZWxOZXh0VGljayh0aGlzLmNsb25lSWQpOwoKICAgIF9jYW5jZWxOZXh0VGljayh0aGlzLl9kcmFnU3RhcnRJZCk7IC8vIFVuYmluZCBldmVudHMKCgogICAgaWYgKHRoaXMubmF0aXZlRHJhZ2dhYmxlKSB7CiAgICAgIG9mZihkb2N1bWVudCwgJ2Ryb3AnLCB0aGlzKTsKICAgICAgb2ZmKGVsLCAnZHJhZ3N0YXJ0JywgdGhpcy5fb25EcmFnU3RhcnQpOwogICAgfQoKICAgIHRoaXMuX29mZk1vdmVFdmVudHMoKTsKCiAgICB0aGlzLl9vZmZVcEV2ZW50cygpOwoKICAgIGlmIChTYWZhcmkpIHsKICAgICAgY3NzKGRvY3VtZW50LmJvZHksICd1c2VyLXNlbGVjdCcsICcnKTsKICAgIH0KCiAgICBjc3MoZHJhZ0VsLCAndHJhbnNmb3JtJywgJycpOwoKICAgIGlmIChldnQpIHsKICAgICAgaWYgKG1vdmVkKSB7CiAgICAgICAgZXZ0LmNhbmNlbGFibGUgJiYgZXZ0LnByZXZlbnREZWZhdWx0KCk7CiAgICAgICAgIW9wdGlvbnMuZHJvcEJ1YmJsZSAmJiBldnQuc3RvcFByb3BhZ2F0aW9uKCk7CiAgICAgIH0KCiAgICAgIGdob3N0RWwgJiYgZ2hvc3RFbC5wYXJlbnROb2RlICYmIGdob3N0RWwucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChnaG9zdEVsKTsKCiAgICAgIGlmIChyb290RWwgPT09IHBhcmVudEVsIHx8IHB1dFNvcnRhYmxlICYmIHB1dFNvcnRhYmxlLmxhc3RQdXRNb2RlICE9PSAnY2xvbmUnKSB7CiAgICAgICAgLy8gUmVtb3ZlIGNsb25lKHMpCiAgICAgICAgY2xvbmVFbCAmJiBjbG9uZUVsLnBhcmVudE5vZGUgJiYgY2xvbmVFbC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGNsb25lRWwpOwogICAgICB9CgogICAgICBpZiAoZHJhZ0VsKSB7CiAgICAgICAgaWYgKHRoaXMubmF0aXZlRHJhZ2dhYmxlKSB7CiAgICAgICAgICBvZmYoZHJhZ0VsLCAnZHJhZ2VuZCcsIHRoaXMpOwogICAgICAgIH0KCiAgICAgICAgX2Rpc2FibGVEcmFnZ2FibGUoZHJhZ0VsKTsKCiAgICAgICAgZHJhZ0VsLnN0eWxlWyd3aWxsLWNoYW5nZSddID0gJyc7IC8vIFJlbW92ZSBjbGFzc2VzCiAgICAgICAgLy8gZ2hvc3RDbGFzcyBpcyBhZGRlZCBpbiBkcmFnU3RhcnRlZAoKICAgICAgICBpZiAobW92ZWQgJiYgIWF3YWl0aW5nRHJhZ1N0YXJ0ZWQpIHsKICAgICAgICAgIHRvZ2dsZUNsYXNzKGRyYWdFbCwgcHV0U29ydGFibGUgPyBwdXRTb3J0YWJsZS5vcHRpb25zLmdob3N0Q2xhc3MgOiB0aGlzLm9wdGlvbnMuZ2hvc3RDbGFzcywgZmFsc2UpOwogICAgICAgIH0KCiAgICAgICAgdG9nZ2xlQ2xhc3MoZHJhZ0VsLCB0aGlzLm9wdGlvbnMuY2hvc2VuQ2xhc3MsIGZhbHNlKTsgLy8gRHJhZyBzdG9wIGV2ZW50CgogICAgICAgIF9kaXNwYXRjaEV2ZW50KHsKICAgICAgICAgIHNvcnRhYmxlOiB0aGlzLAogICAgICAgICAgbmFtZTogJ3VuY2hvb3NlJywKICAgICAgICAgIHRvRWw6IHBhcmVudEVsLAogICAgICAgICAgbmV3SW5kZXg6IG51bGwsCiAgICAgICAgICBuZXdEcmFnZ2FibGVJbmRleDogbnVsbCwKICAgICAgICAgIG9yaWdpbmFsRXZlbnQ6IGV2dAogICAgICAgIH0pOwoKICAgICAgICBpZiAocm9vdEVsICE9PSBwYXJlbnRFbCkgewogICAgICAgICAgaWYgKG5ld0luZGV4ID49IDApIHsKICAgICAgICAgICAgLy8gQWRkIGV2ZW50CiAgICAgICAgICAgIF9kaXNwYXRjaEV2ZW50KHsKICAgICAgICAgICAgICByb290RWw6IHBhcmVudEVsLAogICAgICAgICAgICAgIG5hbWU6ICdhZGQnLAogICAgICAgICAgICAgIHRvRWw6IHBhcmVudEVsLAogICAgICAgICAgICAgIGZyb21FbDogcm9vdEVsLAogICAgICAgICAgICAgIG9yaWdpbmFsRXZlbnQ6IGV2dAogICAgICAgICAgICB9KTsgLy8gUmVtb3ZlIGV2ZW50CgoKICAgICAgICAgICAgX2Rpc3BhdGNoRXZlbnQoewogICAgICAgICAgICAgIHNvcnRhYmxlOiB0aGlzLAogICAgICAgICAgICAgIG5hbWU6ICdyZW1vdmUnLAogICAgICAgICAgICAgIHRvRWw6IHBhcmVudEVsLAogICAgICAgICAgICAgIG9yaWdpbmFsRXZlbnQ6IGV2dAogICAgICAgICAgICB9KTsgLy8gZHJhZyBmcm9tIG9uZSBsaXN0IGFuZCBkcm9wIGludG8gYW5vdGhlcgoKCiAgICAgICAgICAgIF9kaXNwYXRjaEV2ZW50KHsKICAgICAgICAgICAgICByb290RWw6IHBhcmVudEVsLAogICAgICAgICAgICAgIG5hbWU6ICdzb3J0JywKICAgICAgICAgICAgICB0b0VsOiBwYXJlbnRFbCwKICAgICAgICAgICAgICBmcm9tRWw6IHJvb3RFbCwKICAgICAgICAgICAgICBvcmlnaW5hbEV2ZW50OiBldnQKICAgICAgICAgICAgfSk7CgogICAgICAgICAgICBfZGlzcGF0Y2hFdmVudCh7CiAgICAgICAgICAgICAgc29ydGFibGU6IHRoaXMsCiAgICAgICAgICAgICAgbmFtZTogJ3NvcnQnLAogICAgICAgICAgICAgIHRvRWw6IHBhcmVudEVsLAogICAgICAgICAgICAgIG9yaWdpbmFsRXZlbnQ6IGV2dAogICAgICAgICAgICB9KTsKICAgICAgICAgIH0KCiAgICAgICAgICBwdXRTb3J0YWJsZSAmJiBwdXRTb3J0YWJsZS5zYXZlKCk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGlmIChuZXdJbmRleCAhPT0gb2xkSW5kZXgpIHsKICAgICAgICAgICAgaWYgKG5ld0luZGV4ID49IDApIHsKICAgICAgICAgICAgICAvLyBkcmFnICYgZHJvcCB3aXRoaW4gdGhlIHNhbWUgbGlzdAogICAgICAgICAgICAgIF9kaXNwYXRjaEV2ZW50KHsKICAgICAgICAgICAgICAgIHNvcnRhYmxlOiB0aGlzLAogICAgICAgICAgICAgICAgbmFtZTogJ3VwZGF0ZScsCiAgICAgICAgICAgICAgICB0b0VsOiBwYXJlbnRFbCwKICAgICAgICAgICAgICAgIG9yaWdpbmFsRXZlbnQ6IGV2dAogICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICBfZGlzcGF0Y2hFdmVudCh7CiAgICAgICAgICAgICAgICBzb3J0YWJsZTogdGhpcywKICAgICAgICAgICAgICAgIG5hbWU6ICdzb3J0JywKICAgICAgICAgICAgICAgIHRvRWw6IHBhcmVudEVsLAogICAgICAgICAgICAgICAgb3JpZ2luYWxFdmVudDogZXZ0CiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGlmIChTb3J0YWJsZS5hY3RpdmUpIHsKICAgICAgICAgIC8qIGpzaGludCBlcW51bGw6dHJ1ZSAqLwogICAgICAgICAgaWYgKG5ld0luZGV4ID09IG51bGwgfHwgbmV3SW5kZXggPT09IC0xKSB7CiAgICAgICAgICAgIG5ld0luZGV4ID0gb2xkSW5kZXg7CiAgICAgICAgICAgIG5ld0RyYWdnYWJsZUluZGV4ID0gb2xkRHJhZ2dhYmxlSW5kZXg7CiAgICAgICAgICB9CgogICAgICAgICAgX2Rpc3BhdGNoRXZlbnQoewogICAgICAgICAgICBzb3J0YWJsZTogdGhpcywKICAgICAgICAgICAgbmFtZTogJ2VuZCcsCiAgICAgICAgICAgIHRvRWw6IHBhcmVudEVsLAogICAgICAgICAgICBvcmlnaW5hbEV2ZW50OiBldnQKICAgICAgICAgIH0pOyAvLyBTYXZlIHNvcnRpbmcKCgogICAgICAgICAgdGhpcy5zYXZlKCk7CiAgICAgICAgfQogICAgICB9CiAgICB9CgogICAgdGhpcy5fbnVsbGluZygpOwogIH0sCiAgX251bGxpbmc6IGZ1bmN0aW9uIF9udWxsaW5nKCkgewogICAgcGx1Z2luRXZlbnQoJ251bGxpbmcnLCB0aGlzKTsKICAgIHJvb3RFbCA9IGRyYWdFbCA9IHBhcmVudEVsID0gZ2hvc3RFbCA9IG5leHRFbCA9IGNsb25lRWwgPSBsYXN0RG93bkVsID0gY2xvbmVIaWRkZW4gPSB0YXBFdnQgPSB0b3VjaEV2dCA9IG1vdmVkID0gbmV3SW5kZXggPSBuZXdEcmFnZ2FibGVJbmRleCA9IG9sZEluZGV4ID0gb2xkRHJhZ2dhYmxlSW5kZXggPSBsYXN0VGFyZ2V0ID0gbGFzdERpcmVjdGlvbiA9IHB1dFNvcnRhYmxlID0gYWN0aXZlR3JvdXAgPSBTb3J0YWJsZS5kcmFnZ2VkID0gU29ydGFibGUuZ2hvc3QgPSBTb3J0YWJsZS5jbG9uZSA9IFNvcnRhYmxlLmFjdGl2ZSA9IG51bGw7CiAgICBzYXZlZElucHV0Q2hlY2tlZC5mb3JFYWNoKGZ1bmN0aW9uIChlbCkgewogICAgICBlbC5jaGVja2VkID0gdHJ1ZTsKICAgIH0pOwogICAgc2F2ZWRJbnB1dENoZWNrZWQubGVuZ3RoID0gbGFzdER4ID0gbGFzdER5ID0gMDsKICB9LAogIGhhbmRsZUV2ZW50OiBmdW5jdGlvbiBoYW5kbGVFdmVudCgKICAvKipFdmVudCovCiAgZXZ0KSB7CiAgICBzd2l0Y2ggKGV2dC50eXBlKSB7CiAgICAgIGNhc2UgJ2Ryb3AnOgogICAgICBjYXNlICdkcmFnZW5kJzoKICAgICAgICB0aGlzLl9vbkRyb3AoZXZ0KTsKCiAgICAgICAgYnJlYWs7CgogICAgICBjYXNlICdkcmFnZW50ZXInOgogICAgICBjYXNlICdkcmFnb3Zlcic6CiAgICAgICAgaWYgKGRyYWdFbCkgewogICAgICAgICAgdGhpcy5fb25EcmFnT3ZlcihldnQpOwoKICAgICAgICAgIF9nbG9iYWxEcmFnT3ZlcihldnQpOwogICAgICAgIH0KCiAgICAgICAgYnJlYWs7CgogICAgICBjYXNlICdzZWxlY3RzdGFydCc6CiAgICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7CiAgICAgICAgYnJlYWs7CiAgICB9CiAgfSwKCiAgLyoqCiAgICogU2VyaWFsaXplcyB0aGUgaXRlbSBpbnRvIGFuIGFycmF5IG9mIHN0cmluZy4KICAgKiBAcmV0dXJucyB7U3RyaW5nW119CiAgICovCiAgdG9BcnJheTogZnVuY3Rpb24gdG9BcnJheSgpIHsKICAgIHZhciBvcmRlciA9IFtdLAogICAgICAgIGVsLAogICAgICAgIGNoaWxkcmVuID0gdGhpcy5lbC5jaGlsZHJlbiwKICAgICAgICBpID0gMCwKICAgICAgICBuID0gY2hpbGRyZW4ubGVuZ3RoLAogICAgICAgIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7CgogICAgZm9yICg7IGkgPCBuOyBpKyspIHsKICAgICAgZWwgPSBjaGlsZHJlbltpXTsKCiAgICAgIGlmIChjbG9zZXN0KGVsLCBvcHRpb25zLmRyYWdnYWJsZSwgdGhpcy5lbCwgZmFsc2UpKSB7CiAgICAgICAgb3JkZXIucHVzaChlbC5nZXRBdHRyaWJ1dGUob3B0aW9ucy5kYXRhSWRBdHRyKSB8fCBfZ2VuZXJhdGVJZChlbCkpOwogICAgICB9CiAgICB9CgogICAgcmV0dXJuIG9yZGVyOwogIH0sCgogIC8qKgogICAqIFNvcnRzIHRoZSBlbGVtZW50cyBhY2NvcmRpbmcgdG8gdGhlIGFycmF5LgogICAqIEBwYXJhbSAge1N0cmluZ1tdfSAgb3JkZXIgIG9yZGVyIG9mIHRoZSBpdGVtcwogICAqLwogIHNvcnQ6IGZ1bmN0aW9uIHNvcnQob3JkZXIpIHsKICAgIHZhciBpdGVtcyA9IHt9LAogICAgICAgIHJvb3RFbCA9IHRoaXMuZWw7CiAgICB0aGlzLnRvQXJyYXkoKS5mb3JFYWNoKGZ1bmN0aW9uIChpZCwgaSkgewogICAgICB2YXIgZWwgPSByb290RWwuY2hpbGRyZW5baV07CgogICAgICBpZiAoY2xvc2VzdChlbCwgdGhpcy5vcHRpb25zLmRyYWdnYWJsZSwgcm9vdEVsLCBmYWxzZSkpIHsKICAgICAgICBpdGVtc1tpZF0gPSBlbDsKICAgICAgfQogICAgfSwgdGhpcyk7CiAgICBvcmRlci5mb3JFYWNoKGZ1bmN0aW9uIChpZCkgewogICAgICBpZiAoaXRlbXNbaWRdKSB7CiAgICAgICAgcm9vdEVsLnJlbW92ZUNoaWxkKGl0ZW1zW2lkXSk7CiAgICAgICAgcm9vdEVsLmFwcGVuZENoaWxkKGl0ZW1zW2lkXSk7CiAgICAgIH0KICAgIH0pOwogIH0sCgogIC8qKgogICAqIFNhdmUgdGhlIGN1cnJlbnQgc29ydGluZwogICAqLwogIHNhdmU6IGZ1bmN0aW9uIHNhdmUoKSB7CiAgICB2YXIgc3RvcmUgPSB0aGlzLm9wdGlvbnMuc3RvcmU7CiAgICBzdG9yZSAmJiBzdG9yZS5zZXQgJiYgc3RvcmUuc2V0KHRoaXMpOwogIH0sCgogIC8qKgogICAqIEZvciBlYWNoIGVsZW1lbnQgaW4gdGhlIHNldCwgZ2V0IHRoZSBmaXJzdCBlbGVtZW50IHRoYXQgbWF0Y2hlcyB0aGUgc2VsZWN0b3IgYnkgdGVzdGluZyB0aGUgZWxlbWVudCBpdHNlbGYgYW5kIHRyYXZlcnNpbmcgdXAgdGhyb3VnaCBpdHMgYW5jZXN0b3JzIGluIHRoZSBET00gdHJlZS4KICAgKiBAcGFyYW0gICB7SFRNTEVsZW1lbnR9ICBlbAogICAqIEBwYXJhbSAgIHtTdHJpbmd9ICAgICAgIFtzZWxlY3Rvcl0gIGRlZmF1bHQ6IGBvcHRpb25zLmRyYWdnYWJsZWAKICAgKiBAcmV0dXJucyB7SFRNTEVsZW1lbnR8bnVsbH0KICAgKi8KICBjbG9zZXN0OiBmdW5jdGlvbiBjbG9zZXN0JDEoZWwsIHNlbGVjdG9yKSB7CiAgICByZXR1cm4gY2xvc2VzdChlbCwgc2VsZWN0b3IgfHwgdGhpcy5vcHRpb25zLmRyYWdnYWJsZSwgdGhpcy5lbCwgZmFsc2UpOwogIH0sCgogIC8qKgogICAqIFNldC9nZXQgb3B0aW9uCiAgICogQHBhcmFtICAge3N0cmluZ30gbmFtZQogICAqIEBwYXJhbSAgIHsqfSAgICAgIFt2YWx1ZV0KICAgKiBAcmV0dXJucyB7Kn0KICAgKi8KICBvcHRpb246IGZ1bmN0aW9uIG9wdGlvbihuYW1lLCB2YWx1ZSkgewogICAgdmFyIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7CgogICAgaWYgKHZhbHVlID09PSB2b2lkIDApIHsKICAgICAgcmV0dXJuIG9wdGlvbnNbbmFtZV07CiAgICB9IGVsc2UgewogICAgICB2YXIgbW9kaWZpZWRWYWx1ZSA9IFBsdWdpbk1hbmFnZXIubW9kaWZ5T3B0aW9uKHRoaXMsIG5hbWUsIHZhbHVlKTsKCiAgICAgIGlmICh0eXBlb2YgbW9kaWZpZWRWYWx1ZSAhPT0gJ3VuZGVmaW5lZCcpIHsKICAgICAgICBvcHRpb25zW25hbWVdID0gbW9kaWZpZWRWYWx1ZTsKICAgICAgfSBlbHNlIHsKICAgICAgICBvcHRpb25zW25hbWVdID0gdmFsdWU7CiAgICAgIH0KCiAgICAgIGlmIChuYW1lID09PSAnZ3JvdXAnKSB7CiAgICAgICAgX3ByZXBhcmVHcm91cChvcHRpb25zKTsKICAgICAgfQogICAgfQogIH0sCgogIC8qKgogICAqIERlc3Ryb3kKICAgKi8KICBkZXN0cm95OiBmdW5jdGlvbiBkZXN0cm95KCkgewogICAgcGx1Z2luRXZlbnQoJ2Rlc3Ryb3knLCB0aGlzKTsKICAgIHZhciBlbCA9IHRoaXMuZWw7CiAgICBlbFtleHBhbmRvXSA9IG51bGw7CiAgICBvZmYoZWwsICdtb3VzZWRvd24nLCB0aGlzLl9vblRhcFN0YXJ0KTsKICAgIG9mZihlbCwgJ3RvdWNoc3RhcnQnLCB0aGlzLl9vblRhcFN0YXJ0KTsKICAgIG9mZihlbCwgJ3BvaW50ZXJkb3duJywgdGhpcy5fb25UYXBTdGFydCk7CgogICAgaWYgKHRoaXMubmF0aXZlRHJhZ2dhYmxlKSB7CiAgICAgIG9mZihlbCwgJ2RyYWdvdmVyJywgdGhpcyk7CiAgICAgIG9mZihlbCwgJ2RyYWdlbnRlcicsIHRoaXMpOwogICAgfSAvLyBSZW1vdmUgZHJhZ2dhYmxlIGF0dHJpYnV0ZXMKCgogICAgQXJyYXkucHJvdG90eXBlLmZvckVhY2guY2FsbChlbC5xdWVyeVNlbGVjdG9yQWxsKCdbZHJhZ2dhYmxlXScpLCBmdW5jdGlvbiAoZWwpIHsKICAgICAgZWwucmVtb3ZlQXR0cmlidXRlKCdkcmFnZ2FibGUnKTsKICAgIH0pOwoKICAgIHRoaXMuX29uRHJvcCgpOwoKICAgIHRoaXMuX2Rpc2FibGVEZWxheWVkRHJhZ0V2ZW50cygpOwoKICAgIHNvcnRhYmxlcy5zcGxpY2Uoc29ydGFibGVzLmluZGV4T2YodGhpcy5lbCksIDEpOwogICAgdGhpcy5lbCA9IGVsID0gbnVsbDsKICB9LAogIF9oaWRlQ2xvbmU6IGZ1bmN0aW9uIF9oaWRlQ2xvbmUoKSB7CiAgICBpZiAoIWNsb25lSGlkZGVuKSB7CiAgICAgIHBsdWdpbkV2ZW50KCdoaWRlQ2xvbmUnLCB0aGlzKTsKICAgICAgaWYgKFNvcnRhYmxlLmV2ZW50Q2FuY2VsZWQpIHJldHVybjsKICAgICAgY3NzKGNsb25lRWwsICdkaXNwbGF5JywgJ25vbmUnKTsKCiAgICAgIGlmICh0aGlzLm9wdGlvbnMucmVtb3ZlQ2xvbmVPbkhpZGUgJiYgY2xvbmVFbC5wYXJlbnROb2RlKSB7CiAgICAgICAgY2xvbmVFbC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGNsb25lRWwpOwogICAgICB9CgogICAgICBjbG9uZUhpZGRlbiA9IHRydWU7CiAgICB9CiAgfSwKICBfc2hvd0Nsb25lOiBmdW5jdGlvbiBfc2hvd0Nsb25lKHB1dFNvcnRhYmxlKSB7CiAgICBpZiAocHV0U29ydGFibGUubGFzdFB1dE1vZGUgIT09ICdjbG9uZScpIHsKICAgICAgdGhpcy5faGlkZUNsb25lKCk7CgogICAgICByZXR1cm47CiAgICB9CgogICAgaWYgKGNsb25lSGlkZGVuKSB7CiAgICAgIHBsdWdpbkV2ZW50KCdzaG93Q2xvbmUnLCB0aGlzKTsKICAgICAgaWYgKFNvcnRhYmxlLmV2ZW50Q2FuY2VsZWQpIHJldHVybjsgLy8gc2hvdyBjbG9uZSBhdCBkcmFnRWwgb3Igb3JpZ2luYWwgcG9zaXRpb24KCiAgICAgIGlmIChyb290RWwuY29udGFpbnMoZHJhZ0VsKSAmJiAhdGhpcy5vcHRpb25zLmdyb3VwLnJldmVydENsb25lKSB7CiAgICAgICAgcm9vdEVsLmluc2VydEJlZm9yZShjbG9uZUVsLCBkcmFnRWwpOwogICAgICB9IGVsc2UgaWYgKG5leHRFbCkgewogICAgICAgIHJvb3RFbC5pbnNlcnRCZWZvcmUoY2xvbmVFbCwgbmV4dEVsKTsKICAgICAgfSBlbHNlIHsKICAgICAgICByb290RWwuYXBwZW5kQ2hpbGQoY2xvbmVFbCk7CiAgICAgIH0KCiAgICAgIGlmICh0aGlzLm9wdGlvbnMuZ3JvdXAucmV2ZXJ0Q2xvbmUpIHsKICAgICAgICB0aGlzLmFuaW1hdGUoZHJhZ0VsLCBjbG9uZUVsKTsKICAgICAgfQoKICAgICAgY3NzKGNsb25lRWwsICdkaXNwbGF5JywgJycpOwogICAgICBjbG9uZUhpZGRlbiA9IGZhbHNlOwogICAgfQogIH0KfTsKCmZ1bmN0aW9uIF9nbG9iYWxEcmFnT3ZlcigKLyoqRXZlbnQqLwpldnQpIHsKICBpZiAoZXZ0LmRhdGFUcmFuc2ZlcikgewogICAgZXZ0LmRhdGFUcmFuc2Zlci5kcm9wRWZmZWN0ID0gJ21vdmUnOwogIH0KCiAgZXZ0LmNhbmNlbGFibGUgJiYgZXZ0LnByZXZlbnREZWZhdWx0KCk7Cn0KCmZ1bmN0aW9uIF9vbk1vdmUoZnJvbUVsLCB0b0VsLCBkcmFnRWwsIGRyYWdSZWN0LCB0YXJnZXRFbCwgdGFyZ2V0UmVjdCwgb3JpZ2luYWxFdmVudCwgd2lsbEluc2VydEFmdGVyKSB7CiAgdmFyIGV2dCwKICAgICAgc29ydGFibGUgPSBmcm9tRWxbZXhwYW5kb10sCiAgICAgIG9uTW92ZUZuID0gc29ydGFibGUub3B0aW9ucy5vbk1vdmUsCiAgICAgIHJldFZhbDsgLy8gU3VwcG9ydCBmb3IgbmV3IEN1c3RvbUV2ZW50IGZlYXR1cmUKCiAgaWYgKHdpbmRvdy5DdXN0b21FdmVudCAmJiAhSUUxMU9yTGVzcyAmJiAhRWRnZSkgewogICAgZXZ0ID0gbmV3IEN1c3RvbUV2ZW50KCdtb3ZlJywgewogICAgICBidWJibGVzOiB0cnVlLAogICAgICBjYW5jZWxhYmxlOiB0cnVlCiAgICB9KTsKICB9IGVsc2UgewogICAgZXZ0ID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoJ0V2ZW50Jyk7CiAgICBldnQuaW5pdEV2ZW50KCdtb3ZlJywgdHJ1ZSwgdHJ1ZSk7CiAgfQoKICBldnQudG8gPSB0b0VsOwogIGV2dC5mcm9tID0gZnJvbUVsOwogIGV2dC5kcmFnZ2VkID0gZHJhZ0VsOwogIGV2dC5kcmFnZ2VkUmVjdCA9IGRyYWdSZWN0OwogIGV2dC5yZWxhdGVkID0gdGFyZ2V0RWwgfHwgdG9FbDsKICBldnQucmVsYXRlZFJlY3QgPSB0YXJnZXRSZWN0IHx8IGdldFJlY3QodG9FbCk7CiAgZXZ0LndpbGxJbnNlcnRBZnRlciA9IHdpbGxJbnNlcnRBZnRlcjsKICBldnQub3JpZ2luYWxFdmVudCA9IG9yaWdpbmFsRXZlbnQ7CiAgZnJvbUVsLmRpc3BhdGNoRXZlbnQoZXZ0KTsKCiAgaWYgKG9uTW92ZUZuKSB7CiAgICByZXRWYWwgPSBvbk1vdmVGbi5jYWxsKHNvcnRhYmxlLCBldnQsIG9yaWdpbmFsRXZlbnQpOwogIH0KCiAgcmV0dXJuIHJldFZhbDsKfQoKZnVuY3Rpb24gX2Rpc2FibGVEcmFnZ2FibGUoZWwpIHsKICBlbC5kcmFnZ2FibGUgPSBmYWxzZTsKfQoKZnVuY3Rpb24gX3Vuc2lsZW50KCkgewogIF9zaWxlbnQgPSBmYWxzZTsKfQoKZnVuY3Rpb24gX2dob3N0SXNMYXN0KGV2dCwgdmVydGljYWwsIHNvcnRhYmxlKSB7CiAgdmFyIHJlY3QgPSBnZXRSZWN0KGxhc3RDaGlsZChzb3J0YWJsZS5lbCwgc29ydGFibGUub3B0aW9ucy5kcmFnZ2FibGUpKTsKICB2YXIgc3BhY2VyID0gMTA7CiAgcmV0dXJuIHZlcnRpY2FsID8gZXZ0LmNsaWVudFggPiByZWN0LnJpZ2h0ICsgc3BhY2VyIHx8IGV2dC5jbGllbnRYIDw9IHJlY3QucmlnaHQgJiYgZXZ0LmNsaWVudFkgPiByZWN0LmJvdHRvbSAmJiBldnQuY2xpZW50WCA+PSByZWN0LmxlZnQgOiBldnQuY2xpZW50WCA+IHJlY3QucmlnaHQgJiYgZXZ0LmNsaWVudFkgPiByZWN0LnRvcCB8fCBldnQuY2xpZW50WCA8PSByZWN0LnJpZ2h0ICYmIGV2dC5jbGllbnRZID4gcmVjdC5ib3R0b20gKyBzcGFjZXI7Cn0KCmZ1bmN0aW9uIF9nZXRTd2FwRGlyZWN0aW9uKGV2dCwgdGFyZ2V0LCB0YXJnZXRSZWN0LCB2ZXJ0aWNhbCwgc3dhcFRocmVzaG9sZCwgaW52ZXJ0ZWRTd2FwVGhyZXNob2xkLCBpbnZlcnRTd2FwLCBpc0xhc3RUYXJnZXQpIHsKICB2YXIgbW91c2VPbkF4aXMgPSB2ZXJ0aWNhbCA/IGV2dC5jbGllbnRZIDogZXZ0LmNsaWVudFgsCiAgICAgIHRhcmdldExlbmd0aCA9IHZlcnRpY2FsID8gdGFyZ2V0UmVjdC5oZWlnaHQgOiB0YXJnZXRSZWN0LndpZHRoLAogICAgICB0YXJnZXRTMSA9IHZlcnRpY2FsID8gdGFyZ2V0UmVjdC50b3AgOiB0YXJnZXRSZWN0LmxlZnQsCiAgICAgIHRhcmdldFMyID0gdmVydGljYWwgPyB0YXJnZXRSZWN0LmJvdHRvbSA6IHRhcmdldFJlY3QucmlnaHQsCiAgICAgIGludmVydCA9IGZhbHNlOwoKICBpZiAoIWludmVydFN3YXApIHsKICAgIC8vIE5ldmVyIGludmVydCBvciBjcmVhdGUgZHJhZ0VsIHNoYWRvdyB3aGVuIHRhcmdldCBtb3ZlbWVuZXQgY2F1c2VzIG1vdXNlIHRvIG1vdmUgcGFzdCB0aGUgZW5kIG9mIHJlZ3VsYXIgc3dhcFRocmVzaG9sZAogICAgaWYgKGlzTGFzdFRhcmdldCAmJiB0YXJnZXRNb3ZlRGlzdGFuY2UgPCB0YXJnZXRMZW5ndGggKiBzd2FwVGhyZXNob2xkKSB7CiAgICAgIC8vIG11bHRpcGxpZWQgb25seSBieSBzd2FwVGhyZXNob2xkIGJlY2F1c2UgbW91c2Ugd2lsbCBhbHJlYWR5IGJlIGluc2lkZSB0YXJnZXQgYnkgKDEgLSB0aHJlc2hvbGQpICogdGFyZ2V0TGVuZ3RoIC8gMgogICAgICAvLyBjaGVjayBpZiBwYXN0IGZpcnN0IGludmVydCB0aHJlc2hvbGQgb24gc2lkZSBvcHBvc2l0ZSBvZiBsYXN0RGlyZWN0aW9uCiAgICAgIGlmICghcGFzdEZpcnN0SW52ZXJ0VGhyZXNoICYmIChsYXN0RGlyZWN0aW9uID09PSAxID8gbW91c2VPbkF4aXMgPiB0YXJnZXRTMSArIHRhcmdldExlbmd0aCAqIGludmVydGVkU3dhcFRocmVzaG9sZCAvIDIgOiBtb3VzZU9uQXhpcyA8IHRhcmdldFMyIC0gdGFyZ2V0TGVuZ3RoICogaW52ZXJ0ZWRTd2FwVGhyZXNob2xkIC8gMikpIHsKICAgICAgICAvLyBwYXN0IGZpcnN0IGludmVydCB0aHJlc2hvbGQsIGRvIG5vdCByZXN0cmljdCBpbnZlcnRlZCB0aHJlc2hvbGQgdG8gZHJhZ0VsIHNoYWRvdwogICAgICAgIHBhc3RGaXJzdEludmVydFRocmVzaCA9IHRydWU7CiAgICAgIH0KCiAgICAgIGlmICghcGFzdEZpcnN0SW52ZXJ0VGhyZXNoKSB7CiAgICAgICAgLy8gZHJhZ0VsIHNoYWRvdyAodGFyZ2V0IG1vdmUgZGlzdGFuY2Ugc2hhZG93KQogICAgICAgIGlmIChsYXN0RGlyZWN0aW9uID09PSAxID8gbW91c2VPbkF4aXMgPCB0YXJnZXRTMSArIHRhcmdldE1vdmVEaXN0YW5jZSAvLyBvdmVyIGRyYWdFbCBzaGFkb3cKICAgICAgICA6IG1vdXNlT25BeGlzID4gdGFyZ2V0UzIgLSB0YXJnZXRNb3ZlRGlzdGFuY2UpIHsKICAgICAgICAgIHJldHVybiAtbGFzdERpcmVjdGlvbjsKICAgICAgICB9CiAgICAgIH0gZWxzZSB7CiAgICAgICAgaW52ZXJ0ID0gdHJ1ZTsKICAgICAgfQogICAgfSBlbHNlIHsKICAgICAgLy8gUmVndWxhcgogICAgICBpZiAobW91c2VPbkF4aXMgPiB0YXJnZXRTMSArIHRhcmdldExlbmd0aCAqICgxIC0gc3dhcFRocmVzaG9sZCkgLyAyICYmIG1vdXNlT25BeGlzIDwgdGFyZ2V0UzIgLSB0YXJnZXRMZW5ndGggKiAoMSAtIHN3YXBUaHJlc2hvbGQpIC8gMikgewogICAgICAgIHJldHVybiBfZ2V0SW5zZXJ0RGlyZWN0aW9uKHRhcmdldCk7CiAgICAgIH0KICAgIH0KICB9CgogIGludmVydCA9IGludmVydCB8fCBpbnZlcnRTd2FwOwoKICBpZiAoaW52ZXJ0KSB7CiAgICAvLyBJbnZlcnQgb2YgcmVndWxhcgogICAgaWYgKG1vdXNlT25BeGlzIDwgdGFyZ2V0UzEgKyB0YXJnZXRMZW5ndGggKiBpbnZlcnRlZFN3YXBUaHJlc2hvbGQgLyAyIHx8IG1vdXNlT25BeGlzID4gdGFyZ2V0UzIgLSB0YXJnZXRMZW5ndGggKiBpbnZlcnRlZFN3YXBUaHJlc2hvbGQgLyAyKSB7CiAgICAgIHJldHVybiBtb3VzZU9uQXhpcyA+IHRhcmdldFMxICsgdGFyZ2V0TGVuZ3RoIC8gMiA/IDEgOiAtMTsKICAgIH0KICB9CgogIHJldHVybiAwOwp9Ci8qKgogKiBHZXRzIHRoZSBkaXJlY3Rpb24gZHJhZ0VsIG11c3QgYmUgc3dhcHBlZCByZWxhdGl2ZSB0byB0YXJnZXQgaW4gb3JkZXIgdG8gbWFrZSBpdAogKiBzZWVtIHRoYXQgZHJhZ0VsIGhhcyBiZWVuICJpbnNlcnRlZCIgaW50byB0aGF0IGVsZW1lbnQncyBwb3NpdGlvbgogKiBAcGFyYW0gIHtIVE1MRWxlbWVudH0gdGFyZ2V0ICAgICAgIFRoZSB0YXJnZXQgd2hvc2UgcG9zaXRpb24gZHJhZ0VsIGlzIGJlaW5nIGluc2VydGVkIGF0CiAqIEByZXR1cm4ge051bWJlcn0gICAgICAgICAgICAgICAgICAgRGlyZWN0aW9uIGRyYWdFbCBtdXN0IGJlIHN3YXBwZWQKICovCgoKZnVuY3Rpb24gX2dldEluc2VydERpcmVjdGlvbih0YXJnZXQpIHsKICBpZiAoaW5kZXgoZHJhZ0VsKSA8IGluZGV4KHRhcmdldCkpIHsKICAgIHJldHVybiAxOwogIH0gZWxzZSB7CiAgICByZXR1cm4gLTE7CiAgfQp9Ci8qKgogKiBHZW5lcmF0ZSBpZAogKiBAcGFyYW0gICB7SFRNTEVsZW1lbnR9IGVsCiAqIEByZXR1cm5zIHtTdHJpbmd9CiAqIEBwcml2YXRlCiAqLwoKCmZ1bmN0aW9uIF9nZW5lcmF0ZUlkKGVsKSB7CiAgdmFyIHN0ciA9IGVsLnRhZ05hbWUgKyBlbC5jbGFzc05hbWUgKyBlbC5zcmMgKyBlbC5ocmVmICsgZWwudGV4dENvbnRlbnQsCiAgICAgIGkgPSBzdHIubGVuZ3RoLAogICAgICBzdW0gPSAwOwoKICB3aGlsZSAoaS0tKSB7CiAgICBzdW0gKz0gc3RyLmNoYXJDb2RlQXQoaSk7CiAgfQoKICByZXR1cm4gc3VtLnRvU3RyaW5nKDM2KTsKfQoKZnVuY3Rpb24gX3NhdmVJbnB1dENoZWNrZWRTdGF0ZShyb290KSB7CiAgc2F2ZWRJbnB1dENoZWNrZWQubGVuZ3RoID0gMDsKICB2YXIgaW5wdXRzID0gcm9vdC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaW5wdXQnKTsKICB2YXIgaWR4ID0gaW5wdXRzLmxlbmd0aDsKCiAgd2hpbGUgKGlkeC0tKSB7CiAgICB2YXIgZWwgPSBpbnB1dHNbaWR4XTsKICAgIGVsLmNoZWNrZWQgJiYgc2F2ZWRJbnB1dENoZWNrZWQucHVzaChlbCk7CiAgfQp9CgpmdW5jdGlvbiBfbmV4dFRpY2soZm4pIHsKICByZXR1cm4gc2V0VGltZW91dChmbiwgMCk7Cn0KCmZ1bmN0aW9uIF9jYW5jZWxOZXh0VGljayhpZCkgewogIHJldHVybiBjbGVhclRpbWVvdXQoaWQpOwp9IC8vIEZpeGVkICM5NzM6CgoKaWYgKGRvY3VtZW50RXhpc3RzKSB7CiAgb24oZG9jdW1lbnQsICd0b3VjaG1vdmUnLCBmdW5jdGlvbiAoZXZ0KSB7CiAgICBpZiAoKFNvcnRhYmxlLmFjdGl2ZSB8fCBhd2FpdGluZ0RyYWdTdGFydGVkKSAmJiBldnQuY2FuY2VsYWJsZSkgewogICAgICBldnQucHJldmVudERlZmF1bHQoKTsKICAgIH0KICB9KTsKfSAvLyBFeHBvcnQgdXRpbHMKCgpTb3J0YWJsZS51dGlscyA9IHsKICBvbjogb24sCiAgb2ZmOiBvZmYsCiAgY3NzOiBjc3MsCiAgZmluZDogZmluZCwKICBpczogZnVuY3Rpb24gaXMoZWwsIHNlbGVjdG9yKSB7CiAgICByZXR1cm4gISFjbG9zZXN0KGVsLCBzZWxlY3RvciwgZWwsIGZhbHNlKTsKICB9LAogIGV4dGVuZDogZXh0ZW5kLAogIHRocm90dGxlOiB0aHJvdHRsZSwKICBjbG9zZXN0OiBjbG9zZXN0LAogIHRvZ2dsZUNsYXNzOiB0b2dnbGVDbGFzcywKICBjbG9uZTogY2xvbmUsCiAgaW5kZXg6IGluZGV4LAogIG5leHRUaWNrOiBfbmV4dFRpY2ssCiAgY2FuY2VsTmV4dFRpY2s6IF9jYW5jZWxOZXh0VGljaywKICBkZXRlY3REaXJlY3Rpb246IF9kZXRlY3REaXJlY3Rpb24sCiAgZ2V0Q2hpbGQ6IGdldENoaWxkCn07Ci8qKgogKiBHZXQgdGhlIFNvcnRhYmxlIGluc3RhbmNlIG9mIGFuIGVsZW1lbnQKICogQHBhcmFtICB7SFRNTEVsZW1lbnR9IGVsZW1lbnQgVGhlIGVsZW1lbnQKICogQHJldHVybiB7U29ydGFibGV8dW5kZWZpbmVkfSAgICAgICAgIFRoZSBpbnN0YW5jZSBvZiBTb3J0YWJsZQogKi8KClNvcnRhYmxlLmdldCA9IGZ1bmN0aW9uIChlbGVtZW50KSB7CiAgcmV0dXJuIGVsZW1lbnRbZXhwYW5kb107Cn07Ci8qKgogKiBNb3VudCBhIHBsdWdpbiB0byBTb3J0YWJsZQogKiBAcGFyYW0gIHsuLi5Tb3J0YWJsZVBsdWdpbnxTb3J0YWJsZVBsdWdpbltdfSBwbHVnaW5zICAgICAgIFBsdWdpbnMgYmVpbmcgbW91bnRlZAogKi8KCgpTb3J0YWJsZS5tb3VudCA9IGZ1bmN0aW9uICgpIHsKICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgcGx1Z2lucyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHsKICAgIHBsdWdpbnNbX2tleV0gPSBhcmd1bWVudHNbX2tleV07CiAgfQoKICBpZiAocGx1Z2luc1swXS5jb25zdHJ1Y3RvciA9PT0gQXJyYXkpIHBsdWdpbnMgPSBwbHVnaW5zWzBdOwogIHBsdWdpbnMuZm9yRWFjaChmdW5jdGlvbiAocGx1Z2luKSB7CiAgICBpZiAoIXBsdWdpbi5wcm90b3R5cGUgfHwgIXBsdWdpbi5wcm90b3R5cGUuY29uc3RydWN0b3IpIHsKICAgICAgdGhyb3cgIlNvcnRhYmxlOiBNb3VudGVkIHBsdWdpbiBtdXN0IGJlIGEgY29uc3RydWN0b3IgZnVuY3Rpb24sIG5vdCAiLmNvbmNhdCh7fS50b1N0cmluZy5jYWxsKHBsdWdpbikpOwogICAgfQoKICAgIGlmIChwbHVnaW4udXRpbHMpIFNvcnRhYmxlLnV0aWxzID0gX29iamVjdFNwcmVhZCh7fSwgU29ydGFibGUudXRpbHMsIHBsdWdpbi51dGlscyk7CiAgICBQbHVnaW5NYW5hZ2VyLm1vdW50KHBsdWdpbik7CiAgfSk7Cn07Ci8qKgogKiBDcmVhdGUgc29ydGFibGUgaW5zdGFuY2UKICogQHBhcmFtIHtIVE1MRWxlbWVudH0gIGVsCiAqIEBwYXJhbSB7T2JqZWN0fSAgICAgIFtvcHRpb25zXQogKi8KCgpTb3J0YWJsZS5jcmVhdGUgPSBmdW5jdGlvbiAoZWwsIG9wdGlvbnMpIHsKICByZXR1cm4gbmV3IFNvcnRhYmxlKGVsLCBvcHRpb25zKTsKfTsgLy8gRXhwb3J0CgoKU29ydGFibGUudmVyc2lvbiA9IHZlcnNpb247CnZhciBhdXRvU2Nyb2xscyA9IFtdLAogICAgc2Nyb2xsRWwsCiAgICBzY3JvbGxSb290RWwsCiAgICBzY3JvbGxpbmcgPSBmYWxzZSwKICAgIGxhc3RBdXRvU2Nyb2xsWCwKICAgIGxhc3RBdXRvU2Nyb2xsWSwKICAgIHRvdWNoRXZ0JDEsCiAgICBwb2ludGVyRWxlbUNoYW5nZWRJbnRlcnZhbDsKCmZ1bmN0aW9uIEF1dG9TY3JvbGxQbHVnaW4oKSB7CiAgZnVuY3Rpb24gQXV0b1Njcm9sbCgpIHsKICAgIHRoaXMuZGVmYXVsdHMgPSB7CiAgICAgIHNjcm9sbDogdHJ1ZSwKICAgICAgc2Nyb2xsU2Vuc2l0aXZpdHk6IDMwLAogICAgICBzY3JvbGxTcGVlZDogMTAsCiAgICAgIGJ1YmJsZVNjcm9sbDogdHJ1ZQogICAgfTsgLy8gQmluZCBhbGwgcHJpdmF0ZSBtZXRob2RzCgogICAgZm9yICh2YXIgZm4gaW4gdGhpcykgewogICAgICBpZiAoZm4uY2hhckF0KDApID09PSAnXycgJiYgdHlwZW9mIHRoaXNbZm5dID09PSAnZnVuY3Rpb24nKSB7CiAgICAgICAgdGhpc1tmbl0gPSB0aGlzW2ZuXS5iaW5kKHRoaXMpOwogICAgICB9CiAgICB9CiAgfQoKICBBdXRvU2Nyb2xsLnByb3RvdHlwZSA9IHsKICAgIGRyYWdTdGFydGVkOiBmdW5jdGlvbiBkcmFnU3RhcnRlZChfcmVmKSB7CiAgICAgIHZhciBvcmlnaW5hbEV2ZW50ID0gX3JlZi5vcmlnaW5hbEV2ZW50OwoKICAgICAgaWYgKHRoaXMuc29ydGFibGUubmF0aXZlRHJhZ2dhYmxlKSB7CiAgICAgICAgb24oZG9jdW1lbnQsICdkcmFnb3ZlcicsIHRoaXMuX2hhbmRsZUF1dG9TY3JvbGwpOwogICAgICB9IGVsc2UgewogICAgICAgIGlmICh0aGlzLm9wdGlvbnMuc3VwcG9ydFBvaW50ZXIpIHsKICAgICAgICAgIG9uKGRvY3VtZW50LCAncG9pbnRlcm1vdmUnLCB0aGlzLl9oYW5kbGVGYWxsYmFja0F1dG9TY3JvbGwpOwogICAgICAgIH0gZWxzZSBpZiAob3JpZ2luYWxFdmVudC50b3VjaGVzKSB7CiAgICAgICAgICBvbihkb2N1bWVudCwgJ3RvdWNobW92ZScsIHRoaXMuX2hhbmRsZUZhbGxiYWNrQXV0b1Njcm9sbCk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIG9uKGRvY3VtZW50LCAnbW91c2Vtb3ZlJywgdGhpcy5faGFuZGxlRmFsbGJhY2tBdXRvU2Nyb2xsKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0sCiAgICBkcmFnT3ZlckNvbXBsZXRlZDogZnVuY3Rpb24gZHJhZ092ZXJDb21wbGV0ZWQoX3JlZjIpIHsKICAgICAgdmFyIG9yaWdpbmFsRXZlbnQgPSBfcmVmMi5vcmlnaW5hbEV2ZW50OyAvLyBGb3Igd2hlbiBidWJibGluZyBpcyBjYW5jZWxlZCBhbmQgdXNpbmcgZmFsbGJhY2sgKGZhbGxiYWNrICd0b3VjaG1vdmUnIGFsd2F5cyByZWFjaGVkKQoKICAgICAgaWYgKCF0aGlzLm9wdGlvbnMuZHJhZ092ZXJCdWJibGUgJiYgIW9yaWdpbmFsRXZlbnQucm9vdEVsKSB7CiAgICAgICAgdGhpcy5faGFuZGxlQXV0b1Njcm9sbChvcmlnaW5hbEV2ZW50KTsKICAgICAgfQogICAgfSwKICAgIGRyb3A6IGZ1bmN0aW9uIGRyb3AoKSB7CiAgICAgIGlmICh0aGlzLnNvcnRhYmxlLm5hdGl2ZURyYWdnYWJsZSkgewogICAgICAgIG9mZihkb2N1bWVudCwgJ2RyYWdvdmVyJywgdGhpcy5faGFuZGxlQXV0b1Njcm9sbCk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgb2ZmKGRvY3VtZW50LCAncG9pbnRlcm1vdmUnLCB0aGlzLl9oYW5kbGVGYWxsYmFja0F1dG9TY3JvbGwpOwogICAgICAgIG9mZihkb2N1bWVudCwgJ3RvdWNobW92ZScsIHRoaXMuX2hhbmRsZUZhbGxiYWNrQXV0b1Njcm9sbCk7CiAgICAgICAgb2ZmKGRvY3VtZW50LCAnbW91c2Vtb3ZlJywgdGhpcy5faGFuZGxlRmFsbGJhY2tBdXRvU2Nyb2xsKTsKICAgICAgfQoKICAgICAgY2xlYXJQb2ludGVyRWxlbUNoYW5nZWRJbnRlcnZhbCgpOwogICAgICBjbGVhckF1dG9TY3JvbGxzKCk7CiAgICAgIGNhbmNlbFRocm90dGxlKCk7CiAgICB9LAogICAgbnVsbGluZzogZnVuY3Rpb24gbnVsbGluZygpIHsKICAgICAgdG91Y2hFdnQkMSA9IHNjcm9sbFJvb3RFbCA9IHNjcm9sbEVsID0gc2Nyb2xsaW5nID0gcG9pbnRlckVsZW1DaGFuZ2VkSW50ZXJ2YWwgPSBsYXN0QXV0b1Njcm9sbFggPSBsYXN0QXV0b1Njcm9sbFkgPSBudWxsOwogICAgICBhdXRvU2Nyb2xscy5sZW5ndGggPSAwOwogICAgfSwKICAgIF9oYW5kbGVGYWxsYmFja0F1dG9TY3JvbGw6IGZ1bmN0aW9uIF9oYW5kbGVGYWxsYmFja0F1dG9TY3JvbGwoZXZ0KSB7CiAgICAgIHRoaXMuX2hhbmRsZUF1dG9TY3JvbGwoZXZ0LCB0cnVlKTsKICAgIH0sCiAgICBfaGFuZGxlQXV0b1Njcm9sbDogZnVuY3Rpb24gX2hhbmRsZUF1dG9TY3JvbGwoZXZ0LCBmYWxsYmFjaykgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgdmFyIHggPSAoZXZ0LnRvdWNoZXMgPyBldnQudG91Y2hlc1swXSA6IGV2dCkuY2xpZW50WCwKICAgICAgICAgIHkgPSAoZXZ0LnRvdWNoZXMgPyBldnQudG91Y2hlc1swXSA6IGV2dCkuY2xpZW50WSwKICAgICAgICAgIGVsZW0gPSBkb2N1bWVudC5lbGVtZW50RnJvbVBvaW50KHgsIHkpOwogICAgICB0b3VjaEV2dCQxID0gZXZ0OyAvLyBJRSBkb2VzIG5vdCBzZWVtIHRvIGhhdmUgbmF0aXZlIGF1dG9zY3JvbGwsCiAgICAgIC8vIEVkZ2UncyBhdXRvc2Nyb2xsIHNlZW1zIHRvbyBjb25kaXRpb25hbCwKICAgICAgLy8gTUFDT1MgU2FmYXJpIGRvZXMgbm90IGhhdmUgYXV0b3Njcm9sbCwKICAgICAgLy8gRmlyZWZveCBhbmQgQ2hyb21lIGFyZSBnb29kCgogICAgICBpZiAoZmFsbGJhY2sgfHwgRWRnZSB8fCBJRTExT3JMZXNzIHx8IFNhZmFyaSkgewogICAgICAgIGF1dG9TY3JvbGwoZXZ0LCB0aGlzLm9wdGlvbnMsIGVsZW0sIGZhbGxiYWNrKTsgLy8gTGlzdGVuZXIgZm9yIHBvaW50ZXIgZWxlbWVudCBjaGFuZ2UKCiAgICAgICAgdmFyIG9nRWxlbVNjcm9sbGVyID0gZ2V0UGFyZW50QXV0b1Njcm9sbEVsZW1lbnQoZWxlbSwgdHJ1ZSk7CgogICAgICAgIGlmIChzY3JvbGxpbmcgJiYgKCFwb2ludGVyRWxlbUNoYW5nZWRJbnRlcnZhbCB8fCB4ICE9PSBsYXN0QXV0b1Njcm9sbFggfHwgeSAhPT0gbGFzdEF1dG9TY3JvbGxZKSkgewogICAgICAgICAgcG9pbnRlckVsZW1DaGFuZ2VkSW50ZXJ2YWwgJiYgY2xlYXJQb2ludGVyRWxlbUNoYW5nZWRJbnRlcnZhbCgpOyAvLyBEZXRlY3QgZm9yIHBvaW50ZXIgZWxlbSBjaGFuZ2UsIGVtdWxhdGluZyBuYXRpdmUgRG5EIGJlaGF2aW91cgoKICAgICAgICAgIHBvaW50ZXJFbGVtQ2hhbmdlZEludGVydmFsID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24gKCkgewogICAgICAgICAgICB2YXIgbmV3RWxlbSA9IGdldFBhcmVudEF1dG9TY3JvbGxFbGVtZW50KGRvY3VtZW50LmVsZW1lbnRGcm9tUG9pbnQoeCwgeSksIHRydWUpOwoKICAgICAgICAgICAgaWYgKG5ld0VsZW0gIT09IG9nRWxlbVNjcm9sbGVyKSB7CiAgICAgICAgICAgICAgb2dFbGVtU2Nyb2xsZXIgPSBuZXdFbGVtOwogICAgICAgICAgICAgIGNsZWFyQXV0b1Njcm9sbHMoKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgYXV0b1Njcm9sbChldnQsIF90aGlzLm9wdGlvbnMsIG5ld0VsZW0sIGZhbGxiYWNrKTsKICAgICAgICAgIH0sIDEwKTsKICAgICAgICAgIGxhc3RBdXRvU2Nyb2xsWCA9IHg7CiAgICAgICAgICBsYXN0QXV0b1Njcm9sbFkgPSB5OwogICAgICAgIH0KICAgICAgfSBlbHNlIHsKICAgICAgICAvLyBpZiBEbkQgaXMgZW5hYmxlZCAoYW5kIGJyb3dzZXIgaGFzIGdvb2QgYXV0b3Njcm9sbGluZyksIGZpcnN0IGF1dG9zY3JvbGwgd2lsbCBhbHJlYWR5IHNjcm9sbCwgc28gZ2V0IHBhcmVudCBhdXRvc2Nyb2xsIG9mIGZpcnN0IGF1dG9zY3JvbGwKICAgICAgICBpZiAoIXRoaXMub3B0aW9ucy5idWJibGVTY3JvbGwgfHwgZ2V0UGFyZW50QXV0b1Njcm9sbEVsZW1lbnQoZWxlbSwgdHJ1ZSkgPT09IGdldFdpbmRvd1Njcm9sbGluZ0VsZW1lbnQoKSkgewogICAgICAgICAgY2xlYXJBdXRvU2Nyb2xscygpOwogICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KCiAgICAgICAgYXV0b1Njcm9sbChldnQsIHRoaXMub3B0aW9ucywgZ2V0UGFyZW50QXV0b1Njcm9sbEVsZW1lbnQoZWxlbSwgZmFsc2UpLCBmYWxzZSk7CiAgICAgIH0KICAgIH0KICB9OwogIHJldHVybiBfZXh0ZW5kcyhBdXRvU2Nyb2xsLCB7CiAgICBwbHVnaW5OYW1lOiAnc2Nyb2xsJywKICAgIGluaXRpYWxpemVCeURlZmF1bHQ6IHRydWUKICB9KTsKfQoKZnVuY3Rpb24gY2xlYXJBdXRvU2Nyb2xscygpIHsKICBhdXRvU2Nyb2xscy5mb3JFYWNoKGZ1bmN0aW9uIChhdXRvU2Nyb2xsKSB7CiAgICBjbGVhckludGVydmFsKGF1dG9TY3JvbGwucGlkKTsKICB9KTsKICBhdXRvU2Nyb2xscyA9IFtdOwp9CgpmdW5jdGlvbiBjbGVhclBvaW50ZXJFbGVtQ2hhbmdlZEludGVydmFsKCkgewogIGNsZWFySW50ZXJ2YWwocG9pbnRlckVsZW1DaGFuZ2VkSW50ZXJ2YWwpOwp9Cgp2YXIgYXV0b1Njcm9sbCA9IHRocm90dGxlKGZ1bmN0aW9uIChldnQsIG9wdGlvbnMsIHJvb3RFbCwgaXNGYWxsYmFjaykgewogIC8vIEJ1ZzogaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9NTA1NTIxCiAgaWYgKCFvcHRpb25zLnNjcm9sbCkgcmV0dXJuOwogIHZhciB4ID0gKGV2dC50b3VjaGVzID8gZXZ0LnRvdWNoZXNbMF0gOiBldnQpLmNsaWVudFgsCiAgICAgIHkgPSAoZXZ0LnRvdWNoZXMgPyBldnQudG91Y2hlc1swXSA6IGV2dCkuY2xpZW50WSwKICAgICAgc2VucyA9IG9wdGlvbnMuc2Nyb2xsU2Vuc2l0aXZpdHksCiAgICAgIHNwZWVkID0gb3B0aW9ucy5zY3JvbGxTcGVlZCwKICAgICAgd2luU2Nyb2xsZXIgPSBnZXRXaW5kb3dTY3JvbGxpbmdFbGVtZW50KCk7CiAgdmFyIHNjcm9sbFRoaXNJbnN0YW5jZSA9IGZhbHNlLAogICAgICBzY3JvbGxDdXN0b21GbjsgLy8gTmV3IHNjcm9sbCByb290LCBzZXQgc2Nyb2xsRWwKCiAgaWYgKHNjcm9sbFJvb3RFbCAhPT0gcm9vdEVsKSB7CiAgICBzY3JvbGxSb290RWwgPSByb290RWw7CiAgICBjbGVhckF1dG9TY3JvbGxzKCk7CiAgICBzY3JvbGxFbCA9IG9wdGlvbnMuc2Nyb2xsOwogICAgc2Nyb2xsQ3VzdG9tRm4gPSBvcHRpb25zLnNjcm9sbEZuOwoKICAgIGlmIChzY3JvbGxFbCA9PT0gdHJ1ZSkgewogICAgICBzY3JvbGxFbCA9IGdldFBhcmVudEF1dG9TY3JvbGxFbGVtZW50KHJvb3RFbCwgdHJ1ZSk7CiAgICB9CiAgfQoKICB2YXIgbGF5ZXJzT3V0ID0gMDsKICB2YXIgY3VycmVudFBhcmVudCA9IHNjcm9sbEVsOwoKICBkbyB7CiAgICB2YXIgZWwgPSBjdXJyZW50UGFyZW50LAogICAgICAgIHJlY3QgPSBnZXRSZWN0KGVsKSwKICAgICAgICB0b3AgPSByZWN0LnRvcCwKICAgICAgICBib3R0b20gPSByZWN0LmJvdHRvbSwKICAgICAgICBsZWZ0ID0gcmVjdC5sZWZ0LAogICAgICAgIHJpZ2h0ID0gcmVjdC5yaWdodCwKICAgICAgICB3aWR0aCA9IHJlY3Qud2lkdGgsCiAgICAgICAgaGVpZ2h0ID0gcmVjdC5oZWlnaHQsCiAgICAgICAgY2FuU2Nyb2xsWCA9IHZvaWQgMCwKICAgICAgICBjYW5TY3JvbGxZID0gdm9pZCAwLAogICAgICAgIHNjcm9sbFdpZHRoID0gZWwuc2Nyb2xsV2lkdGgsCiAgICAgICAgc2Nyb2xsSGVpZ2h0ID0gZWwuc2Nyb2xsSGVpZ2h0LAogICAgICAgIGVsQ1NTID0gY3NzKGVsKSwKICAgICAgICBzY3JvbGxQb3NYID0gZWwuc2Nyb2xsTGVmdCwKICAgICAgICBzY3JvbGxQb3NZID0gZWwuc2Nyb2xsVG9wOwoKICAgIGlmIChlbCA9PT0gd2luU2Nyb2xsZXIpIHsKICAgICAgY2FuU2Nyb2xsWCA9IHdpZHRoIDwgc2Nyb2xsV2lkdGggJiYgKGVsQ1NTLm92ZXJmbG93WCA9PT0gJ2F1dG8nIHx8IGVsQ1NTLm92ZXJmbG93WCA9PT0gJ3Njcm9sbCcgfHwgZWxDU1Mub3ZlcmZsb3dYID09PSAndmlzaWJsZScpOwogICAgICBjYW5TY3JvbGxZID0gaGVpZ2h0IDwgc2Nyb2xsSGVpZ2h0ICYmIChlbENTUy5vdmVyZmxvd1kgPT09ICdhdXRvJyB8fCBlbENTUy5vdmVyZmxvd1kgPT09ICdzY3JvbGwnIHx8IGVsQ1NTLm92ZXJmbG93WSA9PT0gJ3Zpc2libGUnKTsKICAgIH0gZWxzZSB7CiAgICAgIGNhblNjcm9sbFggPSB3aWR0aCA8IHNjcm9sbFdpZHRoICYmIChlbENTUy5vdmVyZmxvd1ggPT09ICdhdXRvJyB8fCBlbENTUy5vdmVyZmxvd1ggPT09ICdzY3JvbGwnKTsKICAgICAgY2FuU2Nyb2xsWSA9IGhlaWdodCA8IHNjcm9sbEhlaWdodCAmJiAoZWxDU1Mub3ZlcmZsb3dZID09PSAnYXV0bycgfHwgZWxDU1Mub3ZlcmZsb3dZID09PSAnc2Nyb2xsJyk7CiAgICB9CgogICAgdmFyIHZ4ID0gY2FuU2Nyb2xsWCAmJiAoTWF0aC5hYnMocmlnaHQgLSB4KSA8PSBzZW5zICYmIHNjcm9sbFBvc1ggKyB3aWR0aCA8IHNjcm9sbFdpZHRoKSAtIChNYXRoLmFicyhsZWZ0IC0geCkgPD0gc2VucyAmJiAhIXNjcm9sbFBvc1gpOwogICAgdmFyIHZ5ID0gY2FuU2Nyb2xsWSAmJiAoTWF0aC5hYnMoYm90dG9tIC0geSkgPD0gc2VucyAmJiBzY3JvbGxQb3NZICsgaGVpZ2h0IDwgc2Nyb2xsSGVpZ2h0KSAtIChNYXRoLmFicyh0b3AgLSB5KSA8PSBzZW5zICYmICEhc2Nyb2xsUG9zWSk7CgogICAgaWYgKCFhdXRvU2Nyb2xsc1tsYXllcnNPdXRdKSB7CiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDw9IGxheWVyc091dDsgaSsrKSB7CiAgICAgICAgaWYgKCFhdXRvU2Nyb2xsc1tpXSkgewogICAgICAgICAgYXV0b1Njcm9sbHNbaV0gPSB7fTsKICAgICAgICB9CiAgICAgIH0KICAgIH0KCiAgICBpZiAoYXV0b1Njcm9sbHNbbGF5ZXJzT3V0XS52eCAhPSB2eCB8fCBhdXRvU2Nyb2xsc1tsYXllcnNPdXRdLnZ5ICE9IHZ5IHx8IGF1dG9TY3JvbGxzW2xheWVyc091dF0uZWwgIT09IGVsKSB7CiAgICAgIGF1dG9TY3JvbGxzW2xheWVyc091dF0uZWwgPSBlbDsKICAgICAgYXV0b1Njcm9sbHNbbGF5ZXJzT3V0XS52eCA9IHZ4OwogICAgICBhdXRvU2Nyb2xsc1tsYXllcnNPdXRdLnZ5ID0gdnk7CiAgICAgIGNsZWFySW50ZXJ2YWwoYXV0b1Njcm9sbHNbbGF5ZXJzT3V0XS5waWQpOwoKICAgICAgaWYgKHZ4ICE9IDAgfHwgdnkgIT0gMCkgewogICAgICAgIHNjcm9sbFRoaXNJbnN0YW5jZSA9IHRydWU7CiAgICAgICAgLyoganNoaW50IGxvb3BmdW5jOnRydWUgKi8KCiAgICAgICAgYXV0b1Njcm9sbHNbbGF5ZXJzT3V0XS5waWQgPSBzZXRJbnRlcnZhbChmdW5jdGlvbiAoKSB7CiAgICAgICAgICAvLyBlbXVsYXRlIGRyYWcgb3ZlciBkdXJpbmcgYXV0b3Njcm9sbCAoZmFsbGJhY2spLCBlbXVsYXRpbmcgbmF0aXZlIERuRCBiZWhhdmlvdXIKICAgICAgICAgIGlmIChpc0ZhbGxiYWNrICYmIHRoaXMubGF5ZXIgPT09IDApIHsKICAgICAgICAgICAgU29ydGFibGUuYWN0aXZlLl9vblRvdWNoTW92ZSh0b3VjaEV2dCQxKTsgLy8gVG8gbW92ZSBnaG9zdCBpZiBpdCBpcyBwb3NpdGlvbmVkIGFic29sdXRlbHkKCiAgICAgICAgICB9CgogICAgICAgICAgdmFyIHNjcm9sbE9mZnNldFkgPSBhdXRvU2Nyb2xsc1t0aGlzLmxheWVyXS52eSA/IGF1dG9TY3JvbGxzW3RoaXMubGF5ZXJdLnZ5ICogc3BlZWQgOiAwOwogICAgICAgICAgdmFyIHNjcm9sbE9mZnNldFggPSBhdXRvU2Nyb2xsc1t0aGlzLmxheWVyXS52eCA/IGF1dG9TY3JvbGxzW3RoaXMubGF5ZXJdLnZ4ICogc3BlZWQgOiAwOwoKICAgICAgICAgIGlmICh0eXBlb2Ygc2Nyb2xsQ3VzdG9tRm4gPT09ICdmdW5jdGlvbicpIHsKICAgICAgICAgICAgaWYgKHNjcm9sbEN1c3RvbUZuLmNhbGwoU29ydGFibGUuZHJhZ2dlZC5wYXJlbnROb2RlW2V4cGFuZG9dLCBzY3JvbGxPZmZzZXRYLCBzY3JvbGxPZmZzZXRZLCBldnQsIHRvdWNoRXZ0JDEsIGF1dG9TY3JvbGxzW3RoaXMubGF5ZXJdLmVsKSAhPT0gJ2NvbnRpbnVlJykgewogICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgfQogICAgICAgICAgfQoKICAgICAgICAgIHNjcm9sbEJ5KGF1dG9TY3JvbGxzW3RoaXMubGF5ZXJdLmVsLCBzY3JvbGxPZmZzZXRYLCBzY3JvbGxPZmZzZXRZKTsKICAgICAgICB9LmJpbmQoewogICAgICAgICAgbGF5ZXI6IGxheWVyc091dAogICAgICAgIH0pLCAyNCk7CiAgICAgIH0KICAgIH0KCiAgICBsYXllcnNPdXQrKzsKICB9IHdoaWxlIChvcHRpb25zLmJ1YmJsZVNjcm9sbCAmJiBjdXJyZW50UGFyZW50ICE9PSB3aW5TY3JvbGxlciAmJiAoY3VycmVudFBhcmVudCA9IGdldFBhcmVudEF1dG9TY3JvbGxFbGVtZW50KGN1cnJlbnRQYXJlbnQsIGZhbHNlKSkpOwoKICBzY3JvbGxpbmcgPSBzY3JvbGxUaGlzSW5zdGFuY2U7IC8vIGluIGNhc2UgYW5vdGhlciBmdW5jdGlvbiBjYXRjaGVzIHNjcm9sbGluZyBhcyBmYWxzZSBpbiBiZXR3ZWVuIHdoZW4gaXQgaXMgbm90Cn0sIDMwKTsKCnZhciBkcm9wID0gZnVuY3Rpb24gZHJvcChfcmVmKSB7CiAgdmFyIG9yaWdpbmFsRXZlbnQgPSBfcmVmLm9yaWdpbmFsRXZlbnQsCiAgICAgIHB1dFNvcnRhYmxlID0gX3JlZi5wdXRTb3J0YWJsZSwKICAgICAgZHJhZ0VsID0gX3JlZi5kcmFnRWwsCiAgICAgIGFjdGl2ZVNvcnRhYmxlID0gX3JlZi5hY3RpdmVTb3J0YWJsZSwKICAgICAgZGlzcGF0Y2hTb3J0YWJsZUV2ZW50ID0gX3JlZi5kaXNwYXRjaFNvcnRhYmxlRXZlbnQsCiAgICAgIGhpZGVHaG9zdEZvclRhcmdldCA9IF9yZWYuaGlkZUdob3N0Rm9yVGFyZ2V0LAogICAgICB1bmhpZGVHaG9zdEZvclRhcmdldCA9IF9yZWYudW5oaWRlR2hvc3RGb3JUYXJnZXQ7CiAgaWYgKCFvcmlnaW5hbEV2ZW50KSByZXR1cm47CiAgdmFyIHRvU29ydGFibGUgPSBwdXRTb3J0YWJsZSB8fCBhY3RpdmVTb3J0YWJsZTsKICBoaWRlR2hvc3RGb3JUYXJnZXQoKTsKICB2YXIgdG91Y2ggPSBvcmlnaW5hbEV2ZW50LmNoYW5nZWRUb3VjaGVzICYmIG9yaWdpbmFsRXZlbnQuY2hhbmdlZFRvdWNoZXMubGVuZ3RoID8gb3JpZ2luYWxFdmVudC5jaGFuZ2VkVG91Y2hlc1swXSA6IG9yaWdpbmFsRXZlbnQ7CiAgdmFyIHRhcmdldCA9IGRvY3VtZW50LmVsZW1lbnRGcm9tUG9pbnQodG91Y2guY2xpZW50WCwgdG91Y2guY2xpZW50WSk7CiAgdW5oaWRlR2hvc3RGb3JUYXJnZXQoKTsKCiAgaWYgKHRvU29ydGFibGUgJiYgIXRvU29ydGFibGUuZWwuY29udGFpbnModGFyZ2V0KSkgewogICAgZGlzcGF0Y2hTb3J0YWJsZUV2ZW50KCdzcGlsbCcpOwogICAgdGhpcy5vblNwaWxsKHsKICAgICAgZHJhZ0VsOiBkcmFnRWwsCiAgICAgIHB1dFNvcnRhYmxlOiBwdXRTb3J0YWJsZQogICAgfSk7CiAgfQp9OwoKZnVuY3Rpb24gUmV2ZXJ0KCkge30KClJldmVydC5wcm90b3R5cGUgPSB7CiAgc3RhcnRJbmRleDogbnVsbCwKICBkcmFnU3RhcnQ6IGZ1bmN0aW9uIGRyYWdTdGFydChfcmVmMikgewogICAgdmFyIG9sZERyYWdnYWJsZUluZGV4ID0gX3JlZjIub2xkRHJhZ2dhYmxlSW5kZXg7CiAgICB0aGlzLnN0YXJ0SW5kZXggPSBvbGREcmFnZ2FibGVJbmRleDsKICB9LAogIG9uU3BpbGw6IGZ1bmN0aW9uIG9uU3BpbGwoX3JlZjMpIHsKICAgIHZhciBkcmFnRWwgPSBfcmVmMy5kcmFnRWwsCiAgICAgICAgcHV0U29ydGFibGUgPSBfcmVmMy5wdXRTb3J0YWJsZTsKICAgIHRoaXMuc29ydGFibGUuY2FwdHVyZUFuaW1hdGlvblN0YXRlKCk7CgogICAgaWYgKHB1dFNvcnRhYmxlKSB7CiAgICAgIHB1dFNvcnRhYmxlLmNhcHR1cmVBbmltYXRpb25TdGF0ZSgpOwogICAgfQoKICAgIHZhciBuZXh0U2libGluZyA9IGdldENoaWxkKHRoaXMuc29ydGFibGUuZWwsIHRoaXMuc3RhcnRJbmRleCwgdGhpcy5vcHRpb25zKTsKCiAgICBpZiAobmV4dFNpYmxpbmcpIHsKICAgICAgdGhpcy5zb3J0YWJsZS5lbC5pbnNlcnRCZWZvcmUoZHJhZ0VsLCBuZXh0U2libGluZyk7CiAgICB9IGVsc2UgewogICAgICB0aGlzLnNvcnRhYmxlLmVsLmFwcGVuZENoaWxkKGRyYWdFbCk7CiAgICB9CgogICAgdGhpcy5zb3J0YWJsZS5hbmltYXRlQWxsKCk7CgogICAgaWYgKHB1dFNvcnRhYmxlKSB7CiAgICAgIHB1dFNvcnRhYmxlLmFuaW1hdGVBbGwoKTsKICAgIH0KICB9LAogIGRyb3A6IGRyb3AKfTsKCl9leHRlbmRzKFJldmVydCwgewogIHBsdWdpbk5hbWU6ICdyZXZlcnRPblNwaWxsJwp9KTsKCmZ1bmN0aW9uIFJlbW92ZSgpIHt9CgpSZW1vdmUucHJvdG90eXBlID0gewogIG9uU3BpbGw6IGZ1bmN0aW9uIG9uU3BpbGwoX3JlZjQpIHsKICAgIHZhciBkcmFnRWwgPSBfcmVmNC5kcmFnRWwsCiAgICAgICAgcHV0U29ydGFibGUgPSBfcmVmNC5wdXRTb3J0YWJsZTsKICAgIHZhciBwYXJlbnRTb3J0YWJsZSA9IHB1dFNvcnRhYmxlIHx8IHRoaXMuc29ydGFibGU7CiAgICBwYXJlbnRTb3J0YWJsZS5jYXB0dXJlQW5pbWF0aW9uU3RhdGUoKTsKICAgIGRyYWdFbC5wYXJlbnROb2RlICYmIGRyYWdFbC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGRyYWdFbCk7CiAgICBwYXJlbnRTb3J0YWJsZS5hbmltYXRlQWxsKCk7CiAgfSwKICBkcm9wOiBkcm9wCn07CgpfZXh0ZW5kcyhSZW1vdmUsIHsKICBwbHVnaW5OYW1lOiAncmVtb3ZlT25TcGlsbCcKfSk7Cgp2YXIgbGFzdFN3YXBFbDsKCmZ1bmN0aW9uIFN3YXBQbHVnaW4oKSB7CiAgZnVuY3Rpb24gU3dhcCgpIHsKICAgIHRoaXMuZGVmYXVsdHMgPSB7CiAgICAgIHN3YXBDbGFzczogJ3NvcnRhYmxlLXN3YXAtaGlnaGxpZ2h0JwogICAgfTsKICB9CgogIFN3YXAucHJvdG90eXBlID0gewogICAgZHJhZ1N0YXJ0OiBmdW5jdGlvbiBkcmFnU3RhcnQoX3JlZikgewogICAgICB2YXIgZHJhZ0VsID0gX3JlZi5kcmFnRWw7CiAgICAgIGxhc3RTd2FwRWwgPSBkcmFnRWw7CiAgICB9LAogICAgZHJhZ092ZXJWYWxpZDogZnVuY3Rpb24gZHJhZ092ZXJWYWxpZChfcmVmMikgewogICAgICB2YXIgY29tcGxldGVkID0gX3JlZjIuY29tcGxldGVkLAogICAgICAgICAgdGFyZ2V0ID0gX3JlZjIudGFyZ2V0LAogICAgICAgICAgb25Nb3ZlID0gX3JlZjIub25Nb3ZlLAogICAgICAgICAgYWN0aXZlU29ydGFibGUgPSBfcmVmMi5hY3RpdmVTb3J0YWJsZSwKICAgICAgICAgIGNoYW5nZWQgPSBfcmVmMi5jaGFuZ2VkLAogICAgICAgICAgY2FuY2VsID0gX3JlZjIuY2FuY2VsOwogICAgICBpZiAoIWFjdGl2ZVNvcnRhYmxlLm9wdGlvbnMuc3dhcCkgcmV0dXJuOwogICAgICB2YXIgZWwgPSB0aGlzLnNvcnRhYmxlLmVsLAogICAgICAgICAgb3B0aW9ucyA9IHRoaXMub3B0aW9uczsKCiAgICAgIGlmICh0YXJnZXQgJiYgdGFyZ2V0ICE9PSBlbCkgewogICAgICAgIHZhciBwcmV2U3dhcEVsID0gbGFzdFN3YXBFbDsKCiAgICAgICAgaWYgKG9uTW92ZSh0YXJnZXQpICE9PSBmYWxzZSkgewogICAgICAgICAgdG9nZ2xlQ2xhc3ModGFyZ2V0LCBvcHRpb25zLnN3YXBDbGFzcywgdHJ1ZSk7CiAgICAgICAgICBsYXN0U3dhcEVsID0gdGFyZ2V0OwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBsYXN0U3dhcEVsID0gbnVsbDsKICAgICAgICB9CgogICAgICAgIGlmIChwcmV2U3dhcEVsICYmIHByZXZTd2FwRWwgIT09IGxhc3RTd2FwRWwpIHsKICAgICAgICAgIHRvZ2dsZUNsYXNzKHByZXZTd2FwRWwsIG9wdGlvbnMuc3dhcENsYXNzLCBmYWxzZSk7CiAgICAgICAgfQogICAgICB9CgogICAgICBjaGFuZ2VkKCk7CiAgICAgIGNvbXBsZXRlZCh0cnVlKTsKICAgICAgY2FuY2VsKCk7CiAgICB9LAogICAgZHJvcDogZnVuY3Rpb24gZHJvcChfcmVmMykgewogICAgICB2YXIgYWN0aXZlU29ydGFibGUgPSBfcmVmMy5hY3RpdmVTb3J0YWJsZSwKICAgICAgICAgIHB1dFNvcnRhYmxlID0gX3JlZjMucHV0U29ydGFibGUsCiAgICAgICAgICBkcmFnRWwgPSBfcmVmMy5kcmFnRWw7CiAgICAgIHZhciB0b1NvcnRhYmxlID0gcHV0U29ydGFibGUgfHwgdGhpcy5zb3J0YWJsZTsKICAgICAgdmFyIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7CiAgICAgIGxhc3RTd2FwRWwgJiYgdG9nZ2xlQ2xhc3MobGFzdFN3YXBFbCwgb3B0aW9ucy5zd2FwQ2xhc3MsIGZhbHNlKTsKCiAgICAgIGlmIChsYXN0U3dhcEVsICYmIChvcHRpb25zLnN3YXAgfHwgcHV0U29ydGFibGUgJiYgcHV0U29ydGFibGUub3B0aW9ucy5zd2FwKSkgewogICAgICAgIGlmIChkcmFnRWwgIT09IGxhc3RTd2FwRWwpIHsKICAgICAgICAgIHRvU29ydGFibGUuY2FwdHVyZUFuaW1hdGlvblN0YXRlKCk7CiAgICAgICAgICBpZiAodG9Tb3J0YWJsZSAhPT0gYWN0aXZlU29ydGFibGUpIGFjdGl2ZVNvcnRhYmxlLmNhcHR1cmVBbmltYXRpb25TdGF0ZSgpOwogICAgICAgICAgc3dhcE5vZGVzKGRyYWdFbCwgbGFzdFN3YXBFbCk7CiAgICAgICAgICB0b1NvcnRhYmxlLmFuaW1hdGVBbGwoKTsKICAgICAgICAgIGlmICh0b1NvcnRhYmxlICE9PSBhY3RpdmVTb3J0YWJsZSkgYWN0aXZlU29ydGFibGUuYW5pbWF0ZUFsbCgpOwogICAgICAgIH0KICAgICAgfQogICAgfSwKICAgIG51bGxpbmc6IGZ1bmN0aW9uIG51bGxpbmcoKSB7CiAgICAgIGxhc3RTd2FwRWwgPSBudWxsOwogICAgfQogIH07CiAgcmV0dXJuIF9leHRlbmRzKFN3YXAsIHsKICAgIHBsdWdpbk5hbWU6ICdzd2FwJywKICAgIGV2ZW50UHJvcGVydGllczogZnVuY3Rpb24gZXZlbnRQcm9wZXJ0aWVzKCkgewogICAgICByZXR1cm4gewogICAgICAgIHN3YXBJdGVtOiBsYXN0U3dhcEVsCiAgICAgIH07CiAgICB9CiAgfSk7Cn0KCmZ1bmN0aW9uIHN3YXBOb2RlcyhuMSwgbjIpIHsKICB2YXIgcDEgPSBuMS5wYXJlbnROb2RlLAogICAgICBwMiA9IG4yLnBhcmVudE5vZGUsCiAgICAgIGkxLAogICAgICBpMjsKICBpZiAoIXAxIHx8ICFwMiB8fCBwMS5pc0VxdWFsTm9kZShuMikgfHwgcDIuaXNFcXVhbE5vZGUobjEpKSByZXR1cm47CiAgaTEgPSBpbmRleChuMSk7CiAgaTIgPSBpbmRleChuMik7CgogIGlmIChwMS5pc0VxdWFsTm9kZShwMikgJiYgaTEgPCBpMikgewogICAgaTIrKzsKICB9CgogIHAxLmluc2VydEJlZm9yZShuMiwgcDEuY2hpbGRyZW5baTFdKTsKICBwMi5pbnNlcnRCZWZvcmUobjEsIHAyLmNoaWxkcmVuW2kyXSk7Cn0KCnZhciBtdWx0aURyYWdFbGVtZW50cyA9IFtdLAogICAgbXVsdGlEcmFnQ2xvbmVzID0gW10sCiAgICBsYXN0TXVsdGlEcmFnU2VsZWN0LAogICAgLy8gZm9yIHNlbGVjdGlvbiB3aXRoIG1vZGlmaWVyIGtleSBkb3duIChTSElGVCkKbXVsdGlEcmFnU29ydGFibGUsCiAgICBpbml0aWFsRm9sZGluZyA9IGZhbHNlLAogICAgLy8gSW5pdGlhbCBtdWx0aS1kcmFnIGZvbGQgd2hlbiBkcmFnIHN0YXJ0ZWQKZm9sZGluZyA9IGZhbHNlLAogICAgLy8gRm9sZGluZyBhbnkgb3RoZXIgdGltZQpkcmFnU3RhcnRlZCA9IGZhbHNlLAogICAgZHJhZ0VsJDEsCiAgICBjbG9uZXNGcm9tUmVjdCwKICAgIGNsb25lc0hpZGRlbjsKCmZ1bmN0aW9uIE11bHRpRHJhZ1BsdWdpbigpIHsKICBmdW5jdGlvbiBNdWx0aURyYWcoc29ydGFibGUpIHsKICAgIC8vIEJpbmQgYWxsIHByaXZhdGUgbWV0aG9kcwogICAgZm9yICh2YXIgZm4gaW4gdGhpcykgewogICAgICBpZiAoZm4uY2hhckF0KDApID09PSAnXycgJiYgdHlwZW9mIHRoaXNbZm5dID09PSAnZnVuY3Rpb24nKSB7CiAgICAgICAgdGhpc1tmbl0gPSB0aGlzW2ZuXS5iaW5kKHRoaXMpOwogICAgICB9CiAgICB9CgogICAgaWYgKHNvcnRhYmxlLm9wdGlvbnMuc3VwcG9ydFBvaW50ZXIpIHsKICAgICAgb24oZG9jdW1lbnQsICdwb2ludGVydXAnLCB0aGlzLl9kZXNlbGVjdE11bHRpRHJhZyk7CiAgICB9IGVsc2UgewogICAgICBvbihkb2N1bWVudCwgJ21vdXNldXAnLCB0aGlzLl9kZXNlbGVjdE11bHRpRHJhZyk7CiAgICAgIG9uKGRvY3VtZW50LCAndG91Y2hlbmQnLCB0aGlzLl9kZXNlbGVjdE11bHRpRHJhZyk7CiAgICB9CgogICAgb24oZG9jdW1lbnQsICdrZXlkb3duJywgdGhpcy5fY2hlY2tLZXlEb3duKTsKICAgIG9uKGRvY3VtZW50LCAna2V5dXAnLCB0aGlzLl9jaGVja0tleVVwKTsKICAgIHRoaXMuZGVmYXVsdHMgPSB7CiAgICAgIHNlbGVjdGVkQ2xhc3M6ICdzb3J0YWJsZS1zZWxlY3RlZCcsCiAgICAgIG11bHRpRHJhZ0tleTogbnVsbCwKICAgICAgc2V0RGF0YTogZnVuY3Rpb24gc2V0RGF0YShkYXRhVHJhbnNmZXIsIGRyYWdFbCkgewogICAgICAgIHZhciBkYXRhID0gJyc7CgogICAgICAgIGlmIChtdWx0aURyYWdFbGVtZW50cy5sZW5ndGggJiYgbXVsdGlEcmFnU29ydGFibGUgPT09IHNvcnRhYmxlKSB7CiAgICAgICAgICBtdWx0aURyYWdFbGVtZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChtdWx0aURyYWdFbGVtZW50LCBpKSB7CiAgICAgICAgICAgIGRhdGEgKz0gKCFpID8gJycgOiAnLCAnKSArIG11bHRpRHJhZ0VsZW1lbnQudGV4dENvbnRlbnQ7CiAgICAgICAgICB9KTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgZGF0YSA9IGRyYWdFbC50ZXh0Q29udGVudDsKICAgICAgICB9CgogICAgICAgIGRhdGFUcmFuc2Zlci5zZXREYXRhKCdUZXh0JywgZGF0YSk7CiAgICAgIH0KICAgIH07CiAgfQoKICBNdWx0aURyYWcucHJvdG90eXBlID0gewogICAgbXVsdGlEcmFnS2V5RG93bjogZmFsc2UsCiAgICBpc011bHRpRHJhZzogZmFsc2UsCiAgICBkZWxheVN0YXJ0R2xvYmFsOiBmdW5jdGlvbiBkZWxheVN0YXJ0R2xvYmFsKF9yZWYpIHsKICAgICAgdmFyIGRyYWdnZWQgPSBfcmVmLmRyYWdFbDsKICAgICAgZHJhZ0VsJDEgPSBkcmFnZ2VkOwogICAgfSwKICAgIGRlbGF5RW5kZWQ6IGZ1bmN0aW9uIGRlbGF5RW5kZWQoKSB7CiAgICAgIHRoaXMuaXNNdWx0aURyYWcgPSB+bXVsdGlEcmFnRWxlbWVudHMuaW5kZXhPZihkcmFnRWwkMSk7CiAgICB9LAogICAgc2V0dXBDbG9uZTogZnVuY3Rpb24gc2V0dXBDbG9uZShfcmVmMikgewogICAgICB2YXIgc29ydGFibGUgPSBfcmVmMi5zb3J0YWJsZSwKICAgICAgICAgIGNhbmNlbCA9IF9yZWYyLmNhbmNlbDsKICAgICAgaWYgKCF0aGlzLmlzTXVsdGlEcmFnKSByZXR1cm47CgogICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG11bHRpRHJhZ0VsZW1lbnRzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgbXVsdGlEcmFnQ2xvbmVzLnB1c2goY2xvbmUobXVsdGlEcmFnRWxlbWVudHNbaV0pKTsKICAgICAgICBtdWx0aURyYWdDbG9uZXNbaV0uc29ydGFibGVJbmRleCA9IG11bHRpRHJhZ0VsZW1lbnRzW2ldLnNvcnRhYmxlSW5kZXg7CiAgICAgICAgbXVsdGlEcmFnQ2xvbmVzW2ldLmRyYWdnYWJsZSA9IGZhbHNlOwogICAgICAgIG11bHRpRHJhZ0Nsb25lc1tpXS5zdHlsZVsnd2lsbC1jaGFuZ2UnXSA9ICcnOwogICAgICAgIHRvZ2dsZUNsYXNzKG11bHRpRHJhZ0Nsb25lc1tpXSwgdGhpcy5vcHRpb25zLnNlbGVjdGVkQ2xhc3MsIGZhbHNlKTsKICAgICAgICBtdWx0aURyYWdFbGVtZW50c1tpXSA9PT0gZHJhZ0VsJDEgJiYgdG9nZ2xlQ2xhc3MobXVsdGlEcmFnQ2xvbmVzW2ldLCB0aGlzLm9wdGlvbnMuY2hvc2VuQ2xhc3MsIGZhbHNlKTsKICAgICAgfQoKICAgICAgc29ydGFibGUuX2hpZGVDbG9uZSgpOwoKICAgICAgY2FuY2VsKCk7CiAgICB9LAogICAgY2xvbmU6IGZ1bmN0aW9uIGNsb25lKF9yZWYzKSB7CiAgICAgIHZhciBzb3J0YWJsZSA9IF9yZWYzLnNvcnRhYmxlLAogICAgICAgICAgcm9vdEVsID0gX3JlZjMucm9vdEVsLAogICAgICAgICAgZGlzcGF0Y2hTb3J0YWJsZUV2ZW50ID0gX3JlZjMuZGlzcGF0Y2hTb3J0YWJsZUV2ZW50LAogICAgICAgICAgY2FuY2VsID0gX3JlZjMuY2FuY2VsOwogICAgICBpZiAoIXRoaXMuaXNNdWx0aURyYWcpIHJldHVybjsKCiAgICAgIGlmICghdGhpcy5vcHRpb25zLnJlbW92ZUNsb25lT25IaWRlKSB7CiAgICAgICAgaWYgKG11bHRpRHJhZ0VsZW1lbnRzLmxlbmd0aCAmJiBtdWx0aURyYWdTb3J0YWJsZSA9PT0gc29ydGFibGUpIHsKICAgICAgICAgIGluc2VydE11bHRpRHJhZ0Nsb25lcyh0cnVlLCByb290RWwpOwogICAgICAgICAgZGlzcGF0Y2hTb3J0YWJsZUV2ZW50KCdjbG9uZScpOwogICAgICAgICAgY2FuY2VsKCk7CiAgICAgICAgfQogICAgICB9CiAgICB9LAogICAgc2hvd0Nsb25lOiBmdW5jdGlvbiBzaG93Q2xvbmUoX3JlZjQpIHsKICAgICAgdmFyIGNsb25lTm93U2hvd24gPSBfcmVmNC5jbG9uZU5vd1Nob3duLAogICAgICAgICAgcm9vdEVsID0gX3JlZjQucm9vdEVsLAogICAgICAgICAgY2FuY2VsID0gX3JlZjQuY2FuY2VsOwogICAgICBpZiAoIXRoaXMuaXNNdWx0aURyYWcpIHJldHVybjsKICAgICAgaW5zZXJ0TXVsdGlEcmFnQ2xvbmVzKGZhbHNlLCByb290RWwpOwogICAgICBtdWx0aURyYWdDbG9uZXMuZm9yRWFjaChmdW5jdGlvbiAoY2xvbmUpIHsKICAgICAgICBjc3MoY2xvbmUsICdkaXNwbGF5JywgJycpOwogICAgICB9KTsKICAgICAgY2xvbmVOb3dTaG93bigpOwogICAgICBjbG9uZXNIaWRkZW4gPSBmYWxzZTsKICAgICAgY2FuY2VsKCk7CiAgICB9LAogICAgaGlkZUNsb25lOiBmdW5jdGlvbiBoaWRlQ2xvbmUoX3JlZjUpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHZhciBzb3J0YWJsZSA9IF9yZWY1LnNvcnRhYmxlLAogICAgICAgICAgY2xvbmVOb3dIaWRkZW4gPSBfcmVmNS5jbG9uZU5vd0hpZGRlbiwKICAgICAgICAgIGNhbmNlbCA9IF9yZWY1LmNhbmNlbDsKICAgICAgaWYgKCF0aGlzLmlzTXVsdGlEcmFnKSByZXR1cm47CiAgICAgIG11bHRpRHJhZ0Nsb25lcy5mb3JFYWNoKGZ1bmN0aW9uIChjbG9uZSkgewogICAgICAgIGNzcyhjbG9uZSwgJ2Rpc3BsYXknLCAnbm9uZScpOwoKICAgICAgICBpZiAoX3RoaXMub3B0aW9ucy5yZW1vdmVDbG9uZU9uSGlkZSAmJiBjbG9uZS5wYXJlbnROb2RlKSB7CiAgICAgICAgICBjbG9uZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGNsb25lKTsKICAgICAgICB9CiAgICAgIH0pOwogICAgICBjbG9uZU5vd0hpZGRlbigpOwogICAgICBjbG9uZXNIaWRkZW4gPSB0cnVlOwogICAgICBjYW5jZWwoKTsKICAgIH0sCiAgICBkcmFnU3RhcnRHbG9iYWw6IGZ1bmN0aW9uIGRyYWdTdGFydEdsb2JhbChfcmVmNikgewogICAgICB2YXIgc29ydGFibGUgPSBfcmVmNi5zb3J0YWJsZTsKCiAgICAgIGlmICghdGhpcy5pc011bHRpRHJhZyAmJiBtdWx0aURyYWdTb3J0YWJsZSkgewogICAgICAgIG11bHRpRHJhZ1NvcnRhYmxlLm11bHRpRHJhZy5fZGVzZWxlY3RNdWx0aURyYWcoKTsKICAgICAgfQoKICAgICAgbXVsdGlEcmFnRWxlbWVudHMuZm9yRWFjaChmdW5jdGlvbiAobXVsdGlEcmFnRWxlbWVudCkgewogICAgICAgIG11bHRpRHJhZ0VsZW1lbnQuc29ydGFibGVJbmRleCA9IGluZGV4KG11bHRpRHJhZ0VsZW1lbnQpOwogICAgICB9KTsgLy8gU29ydCBtdWx0aS1kcmFnIGVsZW1lbnRzCgogICAgICBtdWx0aURyYWdFbGVtZW50cyA9IG11bHRpRHJhZ0VsZW1lbnRzLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHsKICAgICAgICByZXR1cm4gYS5zb3J0YWJsZUluZGV4IC0gYi5zb3J0YWJsZUluZGV4OwogICAgICB9KTsKICAgICAgZHJhZ1N0YXJ0ZWQgPSB0cnVlOwogICAgfSwKICAgIGRyYWdTdGFydGVkOiBmdW5jdGlvbiBkcmFnU3RhcnRlZChfcmVmNykgewogICAgICB2YXIgX3RoaXMyID0gdGhpczsKCiAgICAgIHZhciBzb3J0YWJsZSA9IF9yZWY3LnNvcnRhYmxlOwogICAgICBpZiAoIXRoaXMuaXNNdWx0aURyYWcpIHJldHVybjsKCiAgICAgIGlmICh0aGlzLm9wdGlvbnMuc29ydCkgewogICAgICAgIC8vIENhcHR1cmUgcmVjdHMsCiAgICAgICAgLy8gaGlkZSBtdWx0aSBkcmFnIGVsZW1lbnRzIChieSBwb3NpdGlvbmluZyB0aGVtIGFic29sdXRlKSwKICAgICAgICAvLyBzZXQgbXVsdGkgZHJhZyBlbGVtZW50cyByZWN0cyB0byBkcmFnUmVjdCwKICAgICAgICAvLyBzaG93IG11bHRpIGRyYWcgZWxlbWVudHMsCiAgICAgICAgLy8gYW5pbWF0ZSB0byByZWN0cywKICAgICAgICAvLyB1bnNldCByZWN0cyAmIHJlbW92ZSBmcm9tIERPTQogICAgICAgIHNvcnRhYmxlLmNhcHR1cmVBbmltYXRpb25TdGF0ZSgpOwoKICAgICAgICBpZiAodGhpcy5vcHRpb25zLmFuaW1hdGlvbikgewogICAgICAgICAgbXVsdGlEcmFnRWxlbWVudHMuZm9yRWFjaChmdW5jdGlvbiAobXVsdGlEcmFnRWxlbWVudCkgewogICAgICAgICAgICBpZiAobXVsdGlEcmFnRWxlbWVudCA9PT0gZHJhZ0VsJDEpIHJldHVybjsKICAgICAgICAgICAgY3NzKG11bHRpRHJhZ0VsZW1lbnQsICdwb3NpdGlvbicsICdhYnNvbHV0ZScpOwogICAgICAgICAgfSk7CiAgICAgICAgICB2YXIgZHJhZ1JlY3QgPSBnZXRSZWN0KGRyYWdFbCQxLCBmYWxzZSwgdHJ1ZSwgdHJ1ZSk7CiAgICAgICAgICBtdWx0aURyYWdFbGVtZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChtdWx0aURyYWdFbGVtZW50KSB7CiAgICAgICAgICAgIGlmIChtdWx0aURyYWdFbGVtZW50ID09PSBkcmFnRWwkMSkgcmV0dXJuOwogICAgICAgICAgICBzZXRSZWN0KG11bHRpRHJhZ0VsZW1lbnQsIGRyYWdSZWN0KTsKICAgICAgICAgIH0pOwogICAgICAgICAgZm9sZGluZyA9IHRydWU7CiAgICAgICAgICBpbml0aWFsRm9sZGluZyA9IHRydWU7CiAgICAgICAgfQogICAgICB9CgogICAgICBzb3J0YWJsZS5hbmltYXRlQWxsKGZ1bmN0aW9uICgpIHsKICAgICAgICBmb2xkaW5nID0gZmFsc2U7CiAgICAgICAgaW5pdGlhbEZvbGRpbmcgPSBmYWxzZTsKCiAgICAgICAgaWYgKF90aGlzMi5vcHRpb25zLmFuaW1hdGlvbikgewogICAgICAgICAgbXVsdGlEcmFnRWxlbWVudHMuZm9yRWFjaChmdW5jdGlvbiAobXVsdGlEcmFnRWxlbWVudCkgewogICAgICAgICAgICB1bnNldFJlY3QobXVsdGlEcmFnRWxlbWVudCk7CiAgICAgICAgICB9KTsKICAgICAgICB9IC8vIFJlbW92ZSBhbGwgYXV4aWxpYXJ5IG11bHRpZHJhZyBpdGVtcyBmcm9tIGVsLCBpZiBzb3J0aW5nIGVuYWJsZWQKCgogICAgICAgIGlmIChfdGhpczIub3B0aW9ucy5zb3J0KSB7CiAgICAgICAgICByZW1vdmVNdWx0aURyYWdFbGVtZW50cygpOwogICAgICAgIH0KICAgICAgfSk7CiAgICB9LAogICAgZHJhZ092ZXI6IGZ1bmN0aW9uIGRyYWdPdmVyKF9yZWY4KSB7CiAgICAgIHZhciB0YXJnZXQgPSBfcmVmOC50YXJnZXQsCiAgICAgICAgICBjb21wbGV0ZWQgPSBfcmVmOC5jb21wbGV0ZWQsCiAgICAgICAgICBjYW5jZWwgPSBfcmVmOC5jYW5jZWw7CgogICAgICBpZiAoZm9sZGluZyAmJiB+bXVsdGlEcmFnRWxlbWVudHMuaW5kZXhPZih0YXJnZXQpKSB7CiAgICAgICAgY29tcGxldGVkKGZhbHNlKTsKICAgICAgICBjYW5jZWwoKTsKICAgICAgfQogICAgfSwKICAgIHJldmVydDogZnVuY3Rpb24gcmV2ZXJ0KF9yZWY5KSB7CiAgICAgIHZhciBmcm9tU29ydGFibGUgPSBfcmVmOS5mcm9tU29ydGFibGUsCiAgICAgICAgICByb290RWwgPSBfcmVmOS5yb290RWwsCiAgICAgICAgICBzb3J0YWJsZSA9IF9yZWY5LnNvcnRhYmxlLAogICAgICAgICAgZHJhZ1JlY3QgPSBfcmVmOS5kcmFnUmVjdDsKCiAgICAgIGlmIChtdWx0aURyYWdFbGVtZW50cy5sZW5ndGggPiAxKSB7CiAgICAgICAgLy8gU2V0dXAgdW5mb2xkIGFuaW1hdGlvbgogICAgICAgIG11bHRpRHJhZ0VsZW1lbnRzLmZvckVhY2goZnVuY3Rpb24gKG11bHRpRHJhZ0VsZW1lbnQpIHsKICAgICAgICAgIHNvcnRhYmxlLmFkZEFuaW1hdGlvblN0YXRlKHsKICAgICAgICAgICAgdGFyZ2V0OiBtdWx0aURyYWdFbGVtZW50LAogICAgICAgICAgICByZWN0OiBmb2xkaW5nID8gZ2V0UmVjdChtdWx0aURyYWdFbGVtZW50KSA6IGRyYWdSZWN0CiAgICAgICAgICB9KTsKICAgICAgICAgIHVuc2V0UmVjdChtdWx0aURyYWdFbGVtZW50KTsKICAgICAgICAgIG11bHRpRHJhZ0VsZW1lbnQuZnJvbVJlY3QgPSBkcmFnUmVjdDsKICAgICAgICAgIGZyb21Tb3J0YWJsZS5yZW1vdmVBbmltYXRpb25TdGF0ZShtdWx0aURyYWdFbGVtZW50KTsKICAgICAgICB9KTsKICAgICAgICBmb2xkaW5nID0gZmFsc2U7CiAgICAgICAgaW5zZXJ0TXVsdGlEcmFnRWxlbWVudHMoIXRoaXMub3B0aW9ucy5yZW1vdmVDbG9uZU9uSGlkZSwgcm9vdEVsKTsKICAgICAgfQogICAgfSwKICAgIGRyYWdPdmVyQ29tcGxldGVkOiBmdW5jdGlvbiBkcmFnT3ZlckNvbXBsZXRlZChfcmVmMTApIHsKICAgICAgdmFyIHNvcnRhYmxlID0gX3JlZjEwLnNvcnRhYmxlLAogICAgICAgICAgaXNPd25lciA9IF9yZWYxMC5pc093bmVyLAogICAgICAgICAgaW5zZXJ0aW9uID0gX3JlZjEwLmluc2VydGlvbiwKICAgICAgICAgIGFjdGl2ZVNvcnRhYmxlID0gX3JlZjEwLmFjdGl2ZVNvcnRhYmxlLAogICAgICAgICAgcGFyZW50RWwgPSBfcmVmMTAucGFyZW50RWwsCiAgICAgICAgICBwdXRTb3J0YWJsZSA9IF9yZWYxMC5wdXRTb3J0YWJsZTsKICAgICAgdmFyIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7CgogICAgICBpZiAoaW5zZXJ0aW9uKSB7CiAgICAgICAgLy8gQ2xvbmVzIG11c3QgYmUgaGlkZGVuIGJlZm9yZSBmb2xkaW5nIGFuaW1hdGlvbiB0byBjYXB0dXJlIGRyYWdSZWN0QWJzb2x1dGUgcHJvcGVybHkKICAgICAgICBpZiAoaXNPd25lcikgewogICAgICAgICAgYWN0aXZlU29ydGFibGUuX2hpZGVDbG9uZSgpOwogICAgICAgIH0KCiAgICAgICAgaW5pdGlhbEZvbGRpbmcgPSBmYWxzZTsgLy8gSWYgbGVhdmluZyBzb3J0OmZhbHNlIHJvb3QsIG9yIGFscmVhZHkgZm9sZGluZyAtIEZvbGQgdG8gbmV3IGxvY2F0aW9uCgogICAgICAgIGlmIChvcHRpb25zLmFuaW1hdGlvbiAmJiBtdWx0aURyYWdFbGVtZW50cy5sZW5ndGggPiAxICYmIChmb2xkaW5nIHx8ICFpc093bmVyICYmICFhY3RpdmVTb3J0YWJsZS5vcHRpb25zLnNvcnQgJiYgIXB1dFNvcnRhYmxlKSkgewogICAgICAgICAgLy8gRm9sZDogU2V0IGFsbCBtdWx0aSBkcmFnIGVsZW1lbnRzJ3MgcmVjdHMgdG8gZHJhZ0VsJ3MgcmVjdCB3aGVuIG11bHRpLWRyYWcgZWxlbWVudHMgYXJlIGludmlzaWJsZQogICAgICAgICAgdmFyIGRyYWdSZWN0QWJzb2x1dGUgPSBnZXRSZWN0KGRyYWdFbCQxLCBmYWxzZSwgdHJ1ZSwgdHJ1ZSk7CiAgICAgICAgICBtdWx0aURyYWdFbGVtZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChtdWx0aURyYWdFbGVtZW50KSB7CiAgICAgICAgICAgIGlmIChtdWx0aURyYWdFbGVtZW50ID09PSBkcmFnRWwkMSkgcmV0dXJuOwogICAgICAgICAgICBzZXRSZWN0KG11bHRpRHJhZ0VsZW1lbnQsIGRyYWdSZWN0QWJzb2x1dGUpOyAvLyBNb3ZlIGVsZW1lbnQocykgdG8gZW5kIG9mIHBhcmVudEVsIHNvIHRoYXQgaXQgZG9lcyBub3QgaW50ZXJmZXJlIHdpdGggbXVsdGktZHJhZyBjbG9uZXMgaW5zZXJ0aW9uIGlmIHRoZXkgYXJlIGluc2VydGVkCiAgICAgICAgICAgIC8vIHdoaWxlIGZvbGRpbmcsIGFuZCBzbyB0aGF0IHdlIGNhbiBjYXB0dXJlIHRoZW0gYWdhaW4gYmVjYXVzZSBvbGQgc29ydGFibGUgd2lsbCBubyBsb25nZXIgYmUgZnJvbVNvcnRhYmxlCgogICAgICAgICAgICBwYXJlbnRFbC5hcHBlbmRDaGlsZChtdWx0aURyYWdFbGVtZW50KTsKICAgICAgICAgIH0pOwogICAgICAgICAgZm9sZGluZyA9IHRydWU7CiAgICAgICAgfSAvLyBDbG9uZXMgbXVzdCBiZSBzaG93biAoYW5kIGNoZWNrIHRvIHJlbW92ZSBtdWx0aSBkcmFncykgYWZ0ZXIgZm9sZGluZyB3aGVuIGludGVyZmVyaW5nIG11bHRpRHJhZ0VsZW1lbnRzIGFyZSBtb3ZlZCBvdXQKCgogICAgICAgIGlmICghaXNPd25lcikgewogICAgICAgICAgLy8gT25seSByZW1vdmUgaWYgbm90IGZvbGRpbmcgKGZvbGRpbmcgd2lsbCByZW1vdmUgdGhlbSBhbnl3YXlzKQogICAgICAgICAgaWYgKCFmb2xkaW5nKSB7CiAgICAgICAgICAgIHJlbW92ZU11bHRpRHJhZ0VsZW1lbnRzKCk7CiAgICAgICAgICB9CgogICAgICAgICAgaWYgKG11bHRpRHJhZ0VsZW1lbnRzLmxlbmd0aCA+IDEpIHsKICAgICAgICAgICAgdmFyIGNsb25lc0hpZGRlbkJlZm9yZSA9IGNsb25lc0hpZGRlbjsKCiAgICAgICAgICAgIGFjdGl2ZVNvcnRhYmxlLl9zaG93Q2xvbmUoc29ydGFibGUpOyAvLyBVbmZvbGQgYW5pbWF0aW9uIGZvciBjbG9uZXMgaWYgc2hvd2luZyBmcm9tIGhpZGRlbgoKCiAgICAgICAgICAgIGlmIChhY3RpdmVTb3J0YWJsZS5vcHRpb25zLmFuaW1hdGlvbiAmJiAhY2xvbmVzSGlkZGVuICYmIGNsb25lc0hpZGRlbkJlZm9yZSkgewogICAgICAgICAgICAgIG11bHRpRHJhZ0Nsb25lcy5mb3JFYWNoKGZ1bmN0aW9uIChjbG9uZSkgewogICAgICAgICAgICAgICAgYWN0aXZlU29ydGFibGUuYWRkQW5pbWF0aW9uU3RhdGUoewogICAgICAgICAgICAgICAgICB0YXJnZXQ6IGNsb25lLAogICAgICAgICAgICAgICAgICByZWN0OiBjbG9uZXNGcm9tUmVjdAogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICBjbG9uZS5mcm9tUmVjdCA9IGNsb25lc0Zyb21SZWN0OwogICAgICAgICAgICAgICAgY2xvbmUudGhpc0FuaW1hdGlvbkR1cmF0aW9uID0gbnVsbDsKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfQogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgYWN0aXZlU29ydGFibGUuX3Nob3dDbG9uZShzb3J0YWJsZSk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICB9LAogICAgZHJhZ092ZXJBbmltYXRpb25DYXB0dXJlOiBmdW5jdGlvbiBkcmFnT3ZlckFuaW1hdGlvbkNhcHR1cmUoX3JlZjExKSB7CiAgICAgIHZhciBkcmFnUmVjdCA9IF9yZWYxMS5kcmFnUmVjdCwKICAgICAgICAgIGlzT3duZXIgPSBfcmVmMTEuaXNPd25lciwKICAgICAgICAgIGFjdGl2ZVNvcnRhYmxlID0gX3JlZjExLmFjdGl2ZVNvcnRhYmxlOwogICAgICBtdWx0aURyYWdFbGVtZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChtdWx0aURyYWdFbGVtZW50KSB7CiAgICAgICAgbXVsdGlEcmFnRWxlbWVudC50aGlzQW5pbWF0aW9uRHVyYXRpb24gPSBudWxsOwogICAgICB9KTsKCiAgICAgIGlmIChhY3RpdmVTb3J0YWJsZS5vcHRpb25zLmFuaW1hdGlvbiAmJiAhaXNPd25lciAmJiBhY3RpdmVTb3J0YWJsZS5tdWx0aURyYWcuaXNNdWx0aURyYWcpIHsKICAgICAgICBjbG9uZXNGcm9tUmVjdCA9IF9leHRlbmRzKHt9LCBkcmFnUmVjdCk7CiAgICAgICAgdmFyIGRyYWdNYXRyaXggPSBtYXRyaXgoZHJhZ0VsJDEsIHRydWUpOwogICAgICAgIGNsb25lc0Zyb21SZWN0LnRvcCAtPSBkcmFnTWF0cml4LmY7CiAgICAgICAgY2xvbmVzRnJvbVJlY3QubGVmdCAtPSBkcmFnTWF0cml4LmU7CiAgICAgIH0KICAgIH0sCiAgICBkcmFnT3ZlckFuaW1hdGlvbkNvbXBsZXRlOiBmdW5jdGlvbiBkcmFnT3ZlckFuaW1hdGlvbkNvbXBsZXRlKCkgewogICAgICBpZiAoZm9sZGluZykgewogICAgICAgIGZvbGRpbmcgPSBmYWxzZTsKICAgICAgICByZW1vdmVNdWx0aURyYWdFbGVtZW50cygpOwogICAgICB9CiAgICB9LAogICAgZHJvcDogZnVuY3Rpb24gZHJvcChfcmVmMTIpIHsKICAgICAgdmFyIGV2dCA9IF9yZWYxMi5vcmlnaW5hbEV2ZW50LAogICAgICAgICAgcm9vdEVsID0gX3JlZjEyLnJvb3RFbCwKICAgICAgICAgIHBhcmVudEVsID0gX3JlZjEyLnBhcmVudEVsLAogICAgICAgICAgc29ydGFibGUgPSBfcmVmMTIuc29ydGFibGUsCiAgICAgICAgICBkaXNwYXRjaFNvcnRhYmxlRXZlbnQgPSBfcmVmMTIuZGlzcGF0Y2hTb3J0YWJsZUV2ZW50LAogICAgICAgICAgb2xkSW5kZXggPSBfcmVmMTIub2xkSW5kZXgsCiAgICAgICAgICBwdXRTb3J0YWJsZSA9IF9yZWYxMi5wdXRTb3J0YWJsZTsKICAgICAgdmFyIHRvU29ydGFibGUgPSBwdXRTb3J0YWJsZSB8fCB0aGlzLnNvcnRhYmxlOwogICAgICBpZiAoIWV2dCkgcmV0dXJuOwogICAgICB2YXIgb3B0aW9ucyA9IHRoaXMub3B0aW9ucywKICAgICAgICAgIGNoaWxkcmVuID0gcGFyZW50RWwuY2hpbGRyZW47IC8vIE11bHRpLWRyYWcgc2VsZWN0aW9uCgogICAgICBpZiAoIWRyYWdTdGFydGVkKSB7CiAgICAgICAgaWYgKG9wdGlvbnMubXVsdGlEcmFnS2V5ICYmICF0aGlzLm11bHRpRHJhZ0tleURvd24pIHsKICAgICAgICAgIHRoaXMuX2Rlc2VsZWN0TXVsdGlEcmFnKCk7CiAgICAgICAgfQoKICAgICAgICB0b2dnbGVDbGFzcyhkcmFnRWwkMSwgb3B0aW9ucy5zZWxlY3RlZENsYXNzLCAhfm11bHRpRHJhZ0VsZW1lbnRzLmluZGV4T2YoZHJhZ0VsJDEpKTsKCiAgICAgICAgaWYgKCF+bXVsdGlEcmFnRWxlbWVudHMuaW5kZXhPZihkcmFnRWwkMSkpIHsKICAgICAgICAgIG11bHRpRHJhZ0VsZW1lbnRzLnB1c2goZHJhZ0VsJDEpOwogICAgICAgICAgZGlzcGF0Y2hFdmVudCh7CiAgICAgICAgICAgIHNvcnRhYmxlOiBzb3J0YWJsZSwKICAgICAgICAgICAgcm9vdEVsOiByb290RWwsCiAgICAgICAgICAgIG5hbWU6ICdzZWxlY3QnLAogICAgICAgICAgICB0YXJnZXRFbDogZHJhZ0VsJDEsCiAgICAgICAgICAgIG9yaWdpbmFsRXZ0OiBldnQKICAgICAgICAgIH0pOyAvLyBNb2RpZmllciBhY3RpdmF0ZWQsIHNlbGVjdCBmcm9tIGxhc3QgdG8gZHJhZ0VsCgogICAgICAgICAgaWYgKGV2dC5zaGlmdEtleSAmJiBsYXN0TXVsdGlEcmFnU2VsZWN0ICYmIHNvcnRhYmxlLmVsLmNvbnRhaW5zKGxhc3RNdWx0aURyYWdTZWxlY3QpKSB7CiAgICAgICAgICAgIHZhciBsYXN0SW5kZXggPSBpbmRleChsYXN0TXVsdGlEcmFnU2VsZWN0KSwKICAgICAgICAgICAgICAgIGN1cnJlbnRJbmRleCA9IGluZGV4KGRyYWdFbCQxKTsKCiAgICAgICAgICAgIGlmICh+bGFzdEluZGV4ICYmIH5jdXJyZW50SW5kZXggJiYgbGFzdEluZGV4ICE9PSBjdXJyZW50SW5kZXgpIHsKICAgICAgICAgICAgICAvLyBNdXN0IGluY2x1ZGUgbGFzdE11bHRpRHJhZ1NlbGVjdCAoc2VsZWN0IGl0KSwgaW4gY2FzZSBtb2RpZmllZCBzZWxlY3Rpb24gZnJvbSBubyBzZWxlY3Rpb24KICAgICAgICAgICAgICAvLyAoYnV0IHByZXZpb3VzIHNlbGVjdGlvbiBleGlzdGVkKQogICAgICAgICAgICAgIHZhciBuLCBpOwoKICAgICAgICAgICAgICBpZiAoY3VycmVudEluZGV4ID4gbGFzdEluZGV4KSB7CiAgICAgICAgICAgICAgICBpID0gbGFzdEluZGV4OwogICAgICAgICAgICAgICAgbiA9IGN1cnJlbnRJbmRleDsKICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgaSA9IGN1cnJlbnRJbmRleDsKICAgICAgICAgICAgICAgIG4gPSBsYXN0SW5kZXggKyAxOwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgZm9yICg7IGkgPCBuOyBpKyspIHsKICAgICAgICAgICAgICAgIGlmICh+bXVsdGlEcmFnRWxlbWVudHMuaW5kZXhPZihjaGlsZHJlbltpXSkpIGNvbnRpbnVlOwogICAgICAgICAgICAgICAgdG9nZ2xlQ2xhc3MoY2hpbGRyZW5baV0sIG9wdGlvbnMuc2VsZWN0ZWRDbGFzcywgdHJ1ZSk7CiAgICAgICAgICAgICAgICBtdWx0aURyYWdFbGVtZW50cy5wdXNoKGNoaWxkcmVuW2ldKTsKICAgICAgICAgICAgICAgIGRpc3BhdGNoRXZlbnQoewogICAgICAgICAgICAgICAgICBzb3J0YWJsZTogc29ydGFibGUsCiAgICAgICAgICAgICAgICAgIHJvb3RFbDogcm9vdEVsLAogICAgICAgICAgICAgICAgICBuYW1lOiAnc2VsZWN0JywKICAgICAgICAgICAgICAgICAgdGFyZ2V0RWw6IGNoaWxkcmVuW2ldLAogICAgICAgICAgICAgICAgICBvcmlnaW5hbEV2dDogZXZ0CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGxhc3RNdWx0aURyYWdTZWxlY3QgPSBkcmFnRWwkMTsKICAgICAgICAgIH0KCiAgICAgICAgICBtdWx0aURyYWdTb3J0YWJsZSA9IHRvU29ydGFibGU7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIG11bHRpRHJhZ0VsZW1lbnRzLnNwbGljZShtdWx0aURyYWdFbGVtZW50cy5pbmRleE9mKGRyYWdFbCQxKSwgMSk7CiAgICAgICAgICBsYXN0TXVsdGlEcmFnU2VsZWN0ID0gbnVsbDsKICAgICAgICAgIGRpc3BhdGNoRXZlbnQoewogICAgICAgICAgICBzb3J0YWJsZTogc29ydGFibGUsCiAgICAgICAgICAgIHJvb3RFbDogcm9vdEVsLAogICAgICAgICAgICBuYW1lOiAnZGVzZWxlY3QnLAogICAgICAgICAgICB0YXJnZXRFbDogZHJhZ0VsJDEsCiAgICAgICAgICAgIG9yaWdpbmFsRXZ0OiBldnQKICAgICAgICAgIH0pOwogICAgICAgIH0KICAgICAgfSAvLyBNdWx0aS1kcmFnIGRyb3AKCgogICAgICBpZiAoZHJhZ1N0YXJ0ZWQgJiYgdGhpcy5pc011bHRpRHJhZykgewogICAgICAgIC8vIERvIG5vdCAidW5mb2xkIiBhZnRlciBhcm91bmQgZHJhZ0VsIGlmIHJldmVydGVkCiAgICAgICAgaWYgKChwYXJlbnRFbFtleHBhbmRvXS5vcHRpb25zLnNvcnQgfHwgcGFyZW50RWwgIT09IHJvb3RFbCkgJiYgbXVsdGlEcmFnRWxlbWVudHMubGVuZ3RoID4gMSkgewogICAgICAgICAgdmFyIGRyYWdSZWN0ID0gZ2V0UmVjdChkcmFnRWwkMSksCiAgICAgICAgICAgICAgbXVsdGlEcmFnSW5kZXggPSBpbmRleChkcmFnRWwkMSwgJzpub3QoLicgKyB0aGlzLm9wdGlvbnMuc2VsZWN0ZWRDbGFzcyArICcpJyk7CiAgICAgICAgICBpZiAoIWluaXRpYWxGb2xkaW5nICYmIG9wdGlvbnMuYW5pbWF0aW9uKSBkcmFnRWwkMS50aGlzQW5pbWF0aW9uRHVyYXRpb24gPSBudWxsOwogICAgICAgICAgdG9Tb3J0YWJsZS5jYXB0dXJlQW5pbWF0aW9uU3RhdGUoKTsKCiAgICAgICAgICBpZiAoIWluaXRpYWxGb2xkaW5nKSB7CiAgICAgICAgICAgIGlmIChvcHRpb25zLmFuaW1hdGlvbikgewogICAgICAgICAgICAgIGRyYWdFbCQxLmZyb21SZWN0ID0gZHJhZ1JlY3Q7CiAgICAgICAgICAgICAgbXVsdGlEcmFnRWxlbWVudHMuZm9yRWFjaChmdW5jdGlvbiAobXVsdGlEcmFnRWxlbWVudCkgewogICAgICAgICAgICAgICAgbXVsdGlEcmFnRWxlbWVudC50aGlzQW5pbWF0aW9uRHVyYXRpb24gPSBudWxsOwoKICAgICAgICAgICAgICAgIGlmIChtdWx0aURyYWdFbGVtZW50ICE9PSBkcmFnRWwkMSkgewogICAgICAgICAgICAgICAgICB2YXIgcmVjdCA9IGZvbGRpbmcgPyBnZXRSZWN0KG11bHRpRHJhZ0VsZW1lbnQpIDogZHJhZ1JlY3Q7CiAgICAgICAgICAgICAgICAgIG11bHRpRHJhZ0VsZW1lbnQuZnJvbVJlY3QgPSByZWN0OyAvLyBQcmVwYXJlIHVuZm9sZCBhbmltYXRpb24KCiAgICAgICAgICAgICAgICAgIHRvU29ydGFibGUuYWRkQW5pbWF0aW9uU3RhdGUoewogICAgICAgICAgICAgICAgICAgIHRhcmdldDogbXVsdGlEcmFnRWxlbWVudCwKICAgICAgICAgICAgICAgICAgICByZWN0OiByZWN0CiAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9IC8vIE11bHRpIGRyYWcgZWxlbWVudHMgYXJlIG5vdCBuZWNlc3NhcmlseSByZW1vdmVkIGZyb20gdGhlIERPTSBvbiBkcm9wLCBzbyB0byByZWluc2VydAogICAgICAgICAgICAvLyBwcm9wZXJseSB0aGV5IG11c3QgYWxsIGJlIHJlbW92ZWQKCgogICAgICAgICAgICByZW1vdmVNdWx0aURyYWdFbGVtZW50cygpOwogICAgICAgICAgICBtdWx0aURyYWdFbGVtZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChtdWx0aURyYWdFbGVtZW50KSB7CiAgICAgICAgICAgICAgaWYgKGNoaWxkcmVuW211bHRpRHJhZ0luZGV4XSkgewogICAgICAgICAgICAgICAgcGFyZW50RWwuaW5zZXJ0QmVmb3JlKG11bHRpRHJhZ0VsZW1lbnQsIGNoaWxkcmVuW211bHRpRHJhZ0luZGV4XSk7CiAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHBhcmVudEVsLmFwcGVuZENoaWxkKG11bHRpRHJhZ0VsZW1lbnQpOwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgbXVsdGlEcmFnSW5kZXgrKzsKICAgICAgICAgICAgfSk7IC8vIElmIGluaXRpYWwgZm9sZGluZyBpcyBkb25lLCB0aGUgZWxlbWVudHMgbWF5IGhhdmUgY2hhbmdlZCBwb3NpdGlvbiBiZWNhdXNlIHRoZXkgYXJlIG5vdwogICAgICAgICAgICAvLyB1bmZvbGRpbmcgYXJvdW5kIGRyYWdFbCwgZXZlbiB0aG91Z2ggZHJhZ0VsIG1heSBub3QgaGF2ZSBoaXMgaW5kZXggY2hhbmdlZCwgc28gdXBkYXRlIGV2ZW50CiAgICAgICAgICAgIC8vIG11c3QgYmUgZmlyZWQgaGVyZSBhcyBTb3J0YWJsZSB3aWxsIG5vdC4KCiAgICAgICAgICAgIGlmIChvbGRJbmRleCA9PT0gaW5kZXgoZHJhZ0VsJDEpKSB7CiAgICAgICAgICAgICAgdmFyIHVwZGF0ZSA9IGZhbHNlOwogICAgICAgICAgICAgIG11bHRpRHJhZ0VsZW1lbnRzLmZvckVhY2goZnVuY3Rpb24gKG11bHRpRHJhZ0VsZW1lbnQpIHsKICAgICAgICAgICAgICAgIGlmIChtdWx0aURyYWdFbGVtZW50LnNvcnRhYmxlSW5kZXggIT09IGluZGV4KG11bHRpRHJhZ0VsZW1lbnQpKSB7CiAgICAgICAgICAgICAgICAgIHVwZGF0ZSA9IHRydWU7CiAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgaWYgKHVwZGF0ZSkgewogICAgICAgICAgICAgICAgZGlzcGF0Y2hTb3J0YWJsZUV2ZW50KCd1cGRhdGUnKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIH0gLy8gTXVzdCBiZSBkb25lIGFmdGVyIGNhcHR1cmluZyBpbmRpdmlkdWFsIHJlY3RzIChzY3JvbGwgYmFyKQoKCiAgICAgICAgICBtdWx0aURyYWdFbGVtZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChtdWx0aURyYWdFbGVtZW50KSB7CiAgICAgICAgICAgIHVuc2V0UmVjdChtdWx0aURyYWdFbGVtZW50KTsKICAgICAgICAgIH0pOwogICAgICAgICAgdG9Tb3J0YWJsZS5hbmltYXRlQWxsKCk7CiAgICAgICAgfQoKICAgICAgICBtdWx0aURyYWdTb3J0YWJsZSA9IHRvU29ydGFibGU7CiAgICAgIH0gLy8gUmVtb3ZlIGNsb25lcyBpZiBuZWNlc3NhcnkKCgogICAgICBpZiAocm9vdEVsID09PSBwYXJlbnRFbCB8fCBwdXRTb3J0YWJsZSAmJiBwdXRTb3J0YWJsZS5sYXN0UHV0TW9kZSAhPT0gJ2Nsb25lJykgewogICAgICAgIG11bHRpRHJhZ0Nsb25lcy5mb3JFYWNoKGZ1bmN0aW9uIChjbG9uZSkgewogICAgICAgICAgY2xvbmUucGFyZW50Tm9kZSAmJiBjbG9uZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGNsb25lKTsKICAgICAgICB9KTsKICAgICAgfQogICAgfSwKICAgIG51bGxpbmdHbG9iYWw6IGZ1bmN0aW9uIG51bGxpbmdHbG9iYWwoKSB7CiAgICAgIHRoaXMuaXNNdWx0aURyYWcgPSBkcmFnU3RhcnRlZCA9IGZhbHNlOwogICAgICBtdWx0aURyYWdDbG9uZXMubGVuZ3RoID0gMDsKICAgIH0sCiAgICBkZXN0cm95R2xvYmFsOiBmdW5jdGlvbiBkZXN0cm95R2xvYmFsKCkgewogICAgICB0aGlzLl9kZXNlbGVjdE11bHRpRHJhZygpOwoKICAgICAgb2ZmKGRvY3VtZW50LCAncG9pbnRlcnVwJywgdGhpcy5fZGVzZWxlY3RNdWx0aURyYWcpOwogICAgICBvZmYoZG9jdW1lbnQsICdtb3VzZXVwJywgdGhpcy5fZGVzZWxlY3RNdWx0aURyYWcpOwogICAgICBvZmYoZG9jdW1lbnQsICd0b3VjaGVuZCcsIHRoaXMuX2Rlc2VsZWN0TXVsdGlEcmFnKTsKICAgICAgb2ZmKGRvY3VtZW50LCAna2V5ZG93bicsIHRoaXMuX2NoZWNrS2V5RG93bik7CiAgICAgIG9mZihkb2N1bWVudCwgJ2tleXVwJywgdGhpcy5fY2hlY2tLZXlVcCk7CiAgICB9LAogICAgX2Rlc2VsZWN0TXVsdGlEcmFnOiBmdW5jdGlvbiBfZGVzZWxlY3RNdWx0aURyYWcoZXZ0KSB7CiAgICAgIGlmICh0eXBlb2YgZHJhZ1N0YXJ0ZWQgIT09ICJ1bmRlZmluZWQiICYmIGRyYWdTdGFydGVkKSByZXR1cm47IC8vIE9ubHkgZGVzZWxlY3QgaWYgc2VsZWN0aW9uIGlzIGluIHRoaXMgc29ydGFibGUKCiAgICAgIGlmIChtdWx0aURyYWdTb3J0YWJsZSAhPT0gdGhpcy5zb3J0YWJsZSkgcmV0dXJuOyAvLyBPbmx5IGRlc2VsZWN0IGlmIHRhcmdldCBpcyBub3QgaXRlbSBpbiB0aGlzIHNvcnRhYmxlCgogICAgICBpZiAoZXZ0ICYmIGNsb3Nlc3QoZXZ0LnRhcmdldCwgdGhpcy5vcHRpb25zLmRyYWdnYWJsZSwgdGhpcy5zb3J0YWJsZS5lbCwgZmFsc2UpKSByZXR1cm47IC8vIE9ubHkgZGVzZWxlY3QgaWYgbGVmdCBjbGljawoKICAgICAgaWYgKGV2dCAmJiBldnQuYnV0dG9uICE9PSAwKSByZXR1cm47CgogICAgICB3aGlsZSAobXVsdGlEcmFnRWxlbWVudHMubGVuZ3RoKSB7CiAgICAgICAgdmFyIGVsID0gbXVsdGlEcmFnRWxlbWVudHNbMF07CiAgICAgICAgdG9nZ2xlQ2xhc3MoZWwsIHRoaXMub3B0aW9ucy5zZWxlY3RlZENsYXNzLCBmYWxzZSk7CiAgICAgICAgbXVsdGlEcmFnRWxlbWVudHMuc2hpZnQoKTsKICAgICAgICBkaXNwYXRjaEV2ZW50KHsKICAgICAgICAgIHNvcnRhYmxlOiB0aGlzLnNvcnRhYmxlLAogICAgICAgICAgcm9vdEVsOiB0aGlzLnNvcnRhYmxlLmVsLAogICAgICAgICAgbmFtZTogJ2Rlc2VsZWN0JywKICAgICAgICAgIHRhcmdldEVsOiBlbCwKICAgICAgICAgIG9yaWdpbmFsRXZ0OiBldnQKICAgICAgICB9KTsKICAgICAgfQogICAgfSwKICAgIF9jaGVja0tleURvd246IGZ1bmN0aW9uIF9jaGVja0tleURvd24oZXZ0KSB7CiAgICAgIGlmIChldnQua2V5ID09PSB0aGlzLm9wdGlvbnMubXVsdGlEcmFnS2V5KSB7CiAgICAgICAgdGhpcy5tdWx0aURyYWdLZXlEb3duID0gdHJ1ZTsKICAgICAgfQogICAgfSwKICAgIF9jaGVja0tleVVwOiBmdW5jdGlvbiBfY2hlY2tLZXlVcChldnQpIHsKICAgICAgaWYgKGV2dC5rZXkgPT09IHRoaXMub3B0aW9ucy5tdWx0aURyYWdLZXkpIHsKICAgICAgICB0aGlzLm11bHRpRHJhZ0tleURvd24gPSBmYWxzZTsKICAgICAgfQogICAgfQogIH07CiAgcmV0dXJuIF9leHRlbmRzKE11bHRpRHJhZywgewogICAgLy8gU3RhdGljIG1ldGhvZHMgJiBwcm9wZXJ0aWVzCiAgICBwbHVnaW5OYW1lOiAnbXVsdGlEcmFnJywKICAgIHV0aWxzOiB7CiAgICAgIC8qKg0KICAgICAgICogU2VsZWN0cyB0aGUgcHJvdmlkZWQgbXVsdGktZHJhZyBpdGVtDQogICAgICAgKiBAcGFyYW0gIHtIVE1MRWxlbWVudH0gZWwgICAgVGhlIGVsZW1lbnQgdG8gYmUgc2VsZWN0ZWQNCiAgICAgICAqLwogICAgICBzZWxlY3Q6IGZ1bmN0aW9uIHNlbGVjdChlbCkgewogICAgICAgIHZhciBzb3J0YWJsZSA9IGVsLnBhcmVudE5vZGVbZXhwYW5kb107CiAgICAgICAgaWYgKCFzb3J0YWJsZSB8fCAhc29ydGFibGUub3B0aW9ucy5tdWx0aURyYWcgfHwgfm11bHRpRHJhZ0VsZW1lbnRzLmluZGV4T2YoZWwpKSByZXR1cm47CgogICAgICAgIGlmIChtdWx0aURyYWdTb3J0YWJsZSAmJiBtdWx0aURyYWdTb3J0YWJsZSAhPT0gc29ydGFibGUpIHsKICAgICAgICAgIG11bHRpRHJhZ1NvcnRhYmxlLm11bHRpRHJhZy5fZGVzZWxlY3RNdWx0aURyYWcoKTsKCiAgICAgICAgICBtdWx0aURyYWdTb3J0YWJsZSA9IHNvcnRhYmxlOwogICAgICAgIH0KCiAgICAgICAgdG9nZ2xlQ2xhc3MoZWwsIHNvcnRhYmxlLm9wdGlvbnMuc2VsZWN0ZWRDbGFzcywgdHJ1ZSk7CiAgICAgICAgbXVsdGlEcmFnRWxlbWVudHMucHVzaChlbCk7CiAgICAgIH0sCgogICAgICAvKioNCiAgICAgICAqIERlc2VsZWN0cyB0aGUgcHJvdmlkZWQgbXVsdGktZHJhZyBpdGVtDQogICAgICAgKiBAcGFyYW0gIHtIVE1MRWxlbWVudH0gZWwgICAgVGhlIGVsZW1lbnQgdG8gYmUgZGVzZWxlY3RlZA0KICAgICAgICovCiAgICAgIGRlc2VsZWN0OiBmdW5jdGlvbiBkZXNlbGVjdChlbCkgewogICAgICAgIHZhciBzb3J0YWJsZSA9IGVsLnBhcmVudE5vZGVbZXhwYW5kb10sCiAgICAgICAgICAgIGluZGV4ID0gbXVsdGlEcmFnRWxlbWVudHMuaW5kZXhPZihlbCk7CiAgICAgICAgaWYgKCFzb3J0YWJsZSB8fCAhc29ydGFibGUub3B0aW9ucy5tdWx0aURyYWcgfHwgIX5pbmRleCkgcmV0dXJuOwogICAgICAgIHRvZ2dsZUNsYXNzKGVsLCBzb3J0YWJsZS5vcHRpb25zLnNlbGVjdGVkQ2xhc3MsIGZhbHNlKTsKICAgICAgICBtdWx0aURyYWdFbGVtZW50cy5zcGxpY2UoaW5kZXgsIDEpOwogICAgICB9CiAgICB9LAogICAgZXZlbnRQcm9wZXJ0aWVzOiBmdW5jdGlvbiBldmVudFByb3BlcnRpZXMoKSB7CiAgICAgIHZhciBfdGhpczMgPSB0aGlzOwoKICAgICAgdmFyIG9sZEluZGljaWVzID0gW10sCiAgICAgICAgICBuZXdJbmRpY2llcyA9IFtdOwogICAgICBtdWx0aURyYWdFbGVtZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChtdWx0aURyYWdFbGVtZW50KSB7CiAgICAgICAgb2xkSW5kaWNpZXMucHVzaCh7CiAgICAgICAgICBtdWx0aURyYWdFbGVtZW50OiBtdWx0aURyYWdFbGVtZW50LAogICAgICAgICAgaW5kZXg6IG11bHRpRHJhZ0VsZW1lbnQuc29ydGFibGVJbmRleAogICAgICAgIH0pOyAvLyBtdWx0aURyYWdFbGVtZW50cyB3aWxsIGFscmVhZHkgYmUgc29ydGVkIGlmIGZvbGRpbmcKCiAgICAgICAgdmFyIG5ld0luZGV4OwoKICAgICAgICBpZiAoZm9sZGluZyAmJiBtdWx0aURyYWdFbGVtZW50ICE9PSBkcmFnRWwkMSkgewogICAgICAgICAgbmV3SW5kZXggPSAtMTsKICAgICAgICB9IGVsc2UgaWYgKGZvbGRpbmcpIHsKICAgICAgICAgIG5ld0luZGV4ID0gaW5kZXgobXVsdGlEcmFnRWxlbWVudCwgJzpub3QoLicgKyBfdGhpczMub3B0aW9ucy5zZWxlY3RlZENsYXNzICsgJyknKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgbmV3SW5kZXggPSBpbmRleChtdWx0aURyYWdFbGVtZW50KTsKICAgICAgICB9CgogICAgICAgIG5ld0luZGljaWVzLnB1c2goewogICAgICAgICAgbXVsdGlEcmFnRWxlbWVudDogbXVsdGlEcmFnRWxlbWVudCwKICAgICAgICAgIGluZGV4OiBuZXdJbmRleAogICAgICAgIH0pOwogICAgICB9KTsKICAgICAgcmV0dXJuIHsKICAgICAgICBpdGVtczogX3RvQ29uc3VtYWJsZUFycmF5KG11bHRpRHJhZ0VsZW1lbnRzKSwKICAgICAgICBjbG9uZXM6IFtdLmNvbmNhdChtdWx0aURyYWdDbG9uZXMpLAogICAgICAgIG9sZEluZGljaWVzOiBvbGRJbmRpY2llcywKICAgICAgICBuZXdJbmRpY2llczogbmV3SW5kaWNpZXMKICAgICAgfTsKICAgIH0sCiAgICBvcHRpb25MaXN0ZW5lcnM6IHsKICAgICAgbXVsdGlEcmFnS2V5OiBmdW5jdGlvbiBtdWx0aURyYWdLZXkoa2V5KSB7CiAgICAgICAga2V5ID0ga2V5LnRvTG93ZXJDYXNlKCk7CgogICAgICAgIGlmIChrZXkgPT09ICdjdHJsJykgewogICAgICAgICAga2V5ID0gJ0NvbnRyb2wnOwogICAgICAgIH0gZWxzZSBpZiAoa2V5Lmxlbmd0aCA+IDEpIHsKICAgICAgICAgIGtleSA9IGtleS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIGtleS5zdWJzdHIoMSk7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4ga2V5OwogICAgICB9CiAgICB9CiAgfSk7Cn0KCmZ1bmN0aW9uIGluc2VydE11bHRpRHJhZ0VsZW1lbnRzKGNsb25lc0luc2VydGVkLCByb290RWwpIHsKICBtdWx0aURyYWdFbGVtZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChtdWx0aURyYWdFbGVtZW50LCBpKSB7CiAgICB2YXIgdGFyZ2V0ID0gcm9vdEVsLmNoaWxkcmVuW211bHRpRHJhZ0VsZW1lbnQuc29ydGFibGVJbmRleCArIChjbG9uZXNJbnNlcnRlZCA/IE51bWJlcihpKSA6IDApXTsKCiAgICBpZiAodGFyZ2V0KSB7CiAgICAgIHJvb3RFbC5pbnNlcnRCZWZvcmUobXVsdGlEcmFnRWxlbWVudCwgdGFyZ2V0KTsKICAgIH0gZWxzZSB7CiAgICAgIHJvb3RFbC5hcHBlbmRDaGlsZChtdWx0aURyYWdFbGVtZW50KTsKICAgIH0KICB9KTsKfQovKioNCiAqIEluc2VydCBtdWx0aS1kcmFnIGNsb25lcw0KICogQHBhcmFtICB7W0Jvb2xlYW5dfSBlbGVtZW50c0luc2VydGVkICBXaGV0aGVyIHRoZSBtdWx0aS1kcmFnIGVsZW1lbnRzIGFyZSBpbnNlcnRlZA0KICogQHBhcmFtICB7SFRNTEVsZW1lbnR9IHJvb3RFbA0KICovCgoKZnVuY3Rpb24gaW5zZXJ0TXVsdGlEcmFnQ2xvbmVzKGVsZW1lbnRzSW5zZXJ0ZWQsIHJvb3RFbCkgewogIG11bHRpRHJhZ0Nsb25lcy5mb3JFYWNoKGZ1bmN0aW9uIChjbG9uZSwgaSkgewogICAgdmFyIHRhcmdldCA9IHJvb3RFbC5jaGlsZHJlbltjbG9uZS5zb3J0YWJsZUluZGV4ICsgKGVsZW1lbnRzSW5zZXJ0ZWQgPyBOdW1iZXIoaSkgOiAwKV07CgogICAgaWYgKHRhcmdldCkgewogICAgICByb290RWwuaW5zZXJ0QmVmb3JlKGNsb25lLCB0YXJnZXQpOwogICAgfSBlbHNlIHsKICAgICAgcm9vdEVsLmFwcGVuZENoaWxkKGNsb25lKTsKICAgIH0KICB9KTsKfQoKZnVuY3Rpb24gcmVtb3ZlTXVsdGlEcmFnRWxlbWVudHMoKSB7CiAgbXVsdGlEcmFnRWxlbWVudHMuZm9yRWFjaChmdW5jdGlvbiAobXVsdGlEcmFnRWxlbWVudCkgewogICAgaWYgKG11bHRpRHJhZ0VsZW1lbnQgPT09IGRyYWdFbCQxKSByZXR1cm47CiAgICBtdWx0aURyYWdFbGVtZW50LnBhcmVudE5vZGUgJiYgbXVsdGlEcmFnRWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKG11bHRpRHJhZ0VsZW1lbnQpOwogIH0pOwp9CgpTb3J0YWJsZS5tb3VudChuZXcgQXV0b1Njcm9sbFBsdWdpbigpKTsKU29ydGFibGUubW91bnQoUmVtb3ZlLCBSZXZlcnQpOwpleHBvcnQgZGVmYXVsdCBTb3J0YWJsZTsKZXhwb3J0IHsgTXVsdGlEcmFnUGx1Z2luIGFzIE11bHRpRHJhZywgU29ydGFibGUsIFN3YXBQbHVnaW4gYXMgU3dhcCB9Ow=="},null]}