{"remainingRequest":"/media/ernst/63bce43c-5e51-4bf1-a611-3afdf32ac6f6/VueJS/IPTV-Tools/node_modules/thread-loader/dist/cjs.js!/media/ernst/63bce43c-5e51-4bf1-a611-3afdf32ac6f6/VueJS/IPTV-Tools/node_modules/babel-loader/lib/index.js!/media/ernst/63bce43c-5e51-4bf1-a611-3afdf32ac6f6/VueJS/IPTV-Tools/node_modules/bootstrap-vue/esm/components/table/helpers/mixin-tbody-row.js","dependencies":[{"path":"/media/ernst/63bce43c-5e51-4bf1-a611-3afdf32ac6f6/VueJS/IPTV-Tools/node_modules/bootstrap-vue/esm/components/table/helpers/mixin-tbody-row.js","mtime":499162500000},{"path":"/media/ernst/63bce43c-5e51-4bf1-a611-3afdf32ac6f6/VueJS/IPTV-Tools/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/media/ernst/63bce43c-5e51-4bf1-a611-3afdf32ac6f6/VueJS/IPTV-Tools/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/media/ernst/63bce43c-5e51-4bf1-a611-3afdf32ac6f6/VueJS/IPTV-Tools/node_modules/babel-loader/lib/index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmtleXMuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5zeW1ib2wuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5maWx0ZXIuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvd2ViLmRvbS1jb2xsZWN0aW9ucy5mb3ItZWFjaC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3JzLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuc2xpY2UuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QudG8tc3RyaW5nLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuZnVuY3Rpb24ubmFtZS5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmZyb20uanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuaXRlcmF0b3IuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5zeW1ib2wuZGVzY3JpcHRpb24uanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5zeW1ib2wuaXRlcmF0b3IuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy93ZWIuZG9tLWNvbGxlY3Rpb25zLml0ZXJhdG9yLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuY29uY2F0LmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkubWFwLmpzIjsKCmZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkgewogIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTsKCiAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsKICAgIHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpOwogICAgaWYgKGVudW1lcmFibGVPbmx5KSBzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkgewogICAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTsKICAgIH0pOwogICAga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpOwogIH0KCiAgcmV0dXJuIGtleXM7Cn0KCmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7CiAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsKICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9OwoKICAgIGlmIChpICUgMikgewogICAgICBvd25LZXlzKE9iamVjdChzb3VyY2UpLCB0cnVlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsKICAgICAgICBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTsKICAgICAgfSk7CiAgICB9IGVsc2UgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKSB7CiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSk7CiAgICB9IGVsc2UgewogICAgICBvd25LZXlzKE9iamVjdChzb3VyY2UpKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsKICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTsKICAgICAgfSk7CiAgICB9CiAgfQoKICByZXR1cm4gdGFyZ2V0Owp9CgpmdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7CiAgaWYgKGtleSBpbiBvYmopIHsKICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgewogICAgICB2YWx1ZTogdmFsdWUsCiAgICAgIGVudW1lcmFibGU6IHRydWUsCiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSwKICAgICAgd3JpdGFibGU6IHRydWUKICAgIH0pOwogIH0gZWxzZSB7CiAgICBvYmpba2V5XSA9IHZhbHVlOwogIH0KCiAgcmV0dXJuIG9iajsKfQoKZnVuY3Rpb24gX3RvQ29uc3VtYWJsZUFycmF5KGFycikgewogIHJldHVybiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5KGFycikgfHwgX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KGFycikgfHwgX25vbkl0ZXJhYmxlU3ByZWFkKCk7Cn0KCmZ1bmN0aW9uIF9ub25JdGVyYWJsZVNwcmVhZCgpIHsKICB0aHJvdyBuZXcgVHlwZUVycm9yKCJJbnZhbGlkIGF0dGVtcHQgdG8gc3ByZWFkIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC4iKTsKfQoKZnVuY3Rpb24gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KG8sIG1pbkxlbikgewogIGlmICghbykgcmV0dXJuOwogIGlmICh0eXBlb2YgbyA9PT0gInN0cmluZyIpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pOwogIHZhciBuID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pLnNsaWNlKDgsIC0xKTsKICBpZiAobiA9PT0gIk9iamVjdCIgJiYgby5jb25zdHJ1Y3RvcikgbiA9IG8uY29uc3RydWN0b3IubmFtZTsKICBpZiAobiA9PT0gIk1hcCIgfHwgbiA9PT0gIlNldCIpIHJldHVybiBBcnJheS5mcm9tKG8pOwogIGlmIChuID09PSAiQXJndW1lbnRzIiB8fCAvXig/OlVpfEkpbnQoPzo4fDE2fDMyKSg/OkNsYW1wZWQpP0FycmF5JC8udGVzdChuKSkgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7Cn0KCmZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXkoaXRlcikgewogIGlmICh0eXBlb2YgU3ltYm9sICE9PSAidW5kZWZpbmVkIiAmJiBTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGl0ZXIpKSByZXR1cm4gQXJyYXkuZnJvbShpdGVyKTsKfQoKZnVuY3Rpb24gX2FycmF5V2l0aG91dEhvbGVzKGFycikgewogIGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShhcnIpOwp9CgpmdW5jdGlvbiBfYXJyYXlMaWtlVG9BcnJheShhcnIsIGxlbikgewogIGlmIChsZW4gPT0gbnVsbCB8fCBsZW4gPiBhcnIubGVuZ3RoKSBsZW4gPSBhcnIubGVuZ3RoOwoKICBmb3IgKHZhciBpID0gMCwgYXJyMiA9IG5ldyBBcnJheShsZW4pOyBpIDwgbGVuOyBpKyspIHsKICAgIGFycjJbaV0gPSBhcnJbaV07CiAgfQoKICByZXR1cm4gYXJyMjsKfQoKaW1wb3J0IHsgVnVlIH0gZnJvbSAnLi4vLi4vLi4vdnVlJzsKaW1wb3J0IHsgRVZFTlRfTkFNRV9ST1dfQ0xJQ0tFRCwgRVZFTlRfTkFNRV9ST1dfSE9WRVJFRCwgRVZFTlRfTkFNRV9ST1dfVU5IT1ZFUkVEIH0gZnJvbSAnLi4vLi4vLi4vY29uc3RhbnRzL2V2ZW50cyc7CmltcG9ydCB7IFBST1BfVFlQRV9BUlJBWV9PQkpFQ1RfU1RSSU5HLCBQUk9QX1RZUEVfRlVOQ1RJT04sIFBST1BfVFlQRV9PQkpFQ1RfRlVOQ1RJT04gfSBmcm9tICcuLi8uLi8uLi9jb25zdGFudHMvcHJvcHMnOwppbXBvcnQgeyBTTE9UX05BTUVfUk9XX0RFVEFJTFMgfSBmcm9tICcuLi8uLi8uLi9jb25zdGFudHMvc2xvdHMnOwppbXBvcnQgeyBnZXQgfSBmcm9tICcuLi8uLi8uLi91dGlscy9nZXQnOwppbXBvcnQgeyBpc0Z1bmN0aW9uLCBpc1N0cmluZywgaXNVbmRlZmluZWRPck51bGwgfSBmcm9tICcuLi8uLi8uLi91dGlscy9pbnNwZWN0JzsKaW1wb3J0IHsgbWFrZVByb3AgfSBmcm9tICcuLi8uLi8uLi91dGlscy9wcm9wcyc7CmltcG9ydCB7IHRvU3RyaW5nIH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvc3RyaW5nJzsKaW1wb3J0IHsgQlRyIH0gZnJvbSAnLi4vdHInOwppbXBvcnQgeyBCVGQgfSBmcm9tICcuLi90ZCc7CmltcG9ydCB7IEJUaCB9IGZyb20gJy4uL3RoJzsKaW1wb3J0IHsgRklFTERfS0VZX0NFTExfVkFSSUFOVCwgRklFTERfS0VZX1JPV19WQVJJQU5ULCBGSUVMRF9LRVlfU0hPV19ERVRBSUxTIH0gZnJvbSAnLi9jb25zdGFudHMnOyAvLyAtLS0gUHJvcHMgLS0tCgpleHBvcnQgdmFyIHByb3BzID0gewogIGRldGFpbHNUZENsYXNzOiBtYWtlUHJvcChQUk9QX1RZUEVfQVJSQVlfT0JKRUNUX1NUUklORyksCiAgdGJvZHlUckF0dHI6IG1ha2VQcm9wKFBST1BfVFlQRV9PQkpFQ1RfRlVOQ1RJT04pLAogIHRib2R5VHJDbGFzczogbWFrZVByb3AoW10uY29uY2F0KF90b0NvbnN1bWFibGVBcnJheShQUk9QX1RZUEVfQVJSQVlfT0JKRUNUX1NUUklORyksIFtQUk9QX1RZUEVfRlVOQ1RJT05dKSkKfTsgLy8gLS0tIE1peGluIC0tLQovLyBAdnVlL2NvbXBvbmVudAoKZXhwb3J0IHZhciB0Ym9keVJvd01peGluID0gVnVlLmV4dGVuZCh7CiAgcHJvcHM6IHByb3BzLAogIG1ldGhvZHM6IHsKICAgIC8vIE1ldGhvZHMgZm9yIGNvbXB1dGluZyBjbGFzc2VzLCBhdHRyaWJ1dGVzIGFuZCBzdHlsZXMgZm9yIHRhYmxlIGNlbGxzCiAgICBnZXRUZFZhbHVlczogZnVuY3Rpb24gZ2V0VGRWYWx1ZXMoaXRlbSwga2V5LCB0ZFZhbHVlLCBkZWZhdWx0VmFsdWUpIHsKICAgICAgdmFyICRwYXJlbnQgPSB0aGlzLiRwYXJlbnQ7CgogICAgICBpZiAodGRWYWx1ZSkgewogICAgICAgIHZhciB2YWx1ZSA9IGdldChpdGVtLCBrZXksICcnKTsKCiAgICAgICAgaWYgKGlzRnVuY3Rpb24odGRWYWx1ZSkpIHsKICAgICAgICAgIHJldHVybiB0ZFZhbHVlKHZhbHVlLCBrZXksIGl0ZW0pOwogICAgICAgIH0gZWxzZSBpZiAoaXNTdHJpbmcodGRWYWx1ZSkgJiYgaXNGdW5jdGlvbigkcGFyZW50W3RkVmFsdWVdKSkgewogICAgICAgICAgcmV0dXJuICRwYXJlbnRbdGRWYWx1ZV0odmFsdWUsIGtleSwgaXRlbSk7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gdGRWYWx1ZTsKICAgICAgfQoKICAgICAgcmV0dXJuIGRlZmF1bHRWYWx1ZTsKICAgIH0sCiAgICBnZXRUaFZhbHVlczogZnVuY3Rpb24gZ2V0VGhWYWx1ZXMoaXRlbSwga2V5LCB0aFZhbHVlLCB0eXBlLCBkZWZhdWx0VmFsdWUpIHsKICAgICAgdmFyICRwYXJlbnQgPSB0aGlzLiRwYXJlbnQ7CgogICAgICBpZiAodGhWYWx1ZSkgewogICAgICAgIHZhciB2YWx1ZSA9IGdldChpdGVtLCBrZXksICcnKTsKCiAgICAgICAgaWYgKGlzRnVuY3Rpb24odGhWYWx1ZSkpIHsKICAgICAgICAgIHJldHVybiB0aFZhbHVlKHZhbHVlLCBrZXksIGl0ZW0sIHR5cGUpOwogICAgICAgIH0gZWxzZSBpZiAoaXNTdHJpbmcodGhWYWx1ZSkgJiYgaXNGdW5jdGlvbigkcGFyZW50W3RoVmFsdWVdKSkgewogICAgICAgICAgcmV0dXJuICRwYXJlbnRbdGhWYWx1ZV0odmFsdWUsIGtleSwgaXRlbSwgdHlwZSk7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gdGhWYWx1ZTsKICAgICAgfQoKICAgICAgcmV0dXJuIGRlZmF1bHRWYWx1ZTsKICAgIH0sCiAgICAvLyBNZXRob2QgdG8gZ2V0IHRoZSB2YWx1ZSBmb3IgYSBmaWVsZAogICAgZ2V0Rm9ybWF0dGVkVmFsdWU6IGZ1bmN0aW9uIGdldEZvcm1hdHRlZFZhbHVlKGl0ZW0sIGZpZWxkKSB7CiAgICAgIHZhciBrZXkgPSBmaWVsZC5rZXk7CiAgICAgIHZhciBmb3JtYXR0ZXIgPSB0aGlzLmdldEZpZWxkRm9ybWF0dGVyKGtleSk7CiAgICAgIHZhciB2YWx1ZSA9IGdldChpdGVtLCBrZXksIG51bGwpOwoKICAgICAgaWYgKGlzRnVuY3Rpb24oZm9ybWF0dGVyKSkgewogICAgICAgIHZhbHVlID0gZm9ybWF0dGVyKHZhbHVlLCBrZXksIGl0ZW0pOwogICAgICB9CgogICAgICByZXR1cm4gaXNVbmRlZmluZWRPck51bGwodmFsdWUpID8gJycgOiB2YWx1ZTsKICAgIH0sCiAgICAvLyBGYWN0b3J5IGZ1bmN0aW9uIG1ldGhvZHMKICAgIHRvZ2dsZURldGFpbHNGYWN0b3J5OiBmdW5jdGlvbiB0b2dnbGVEZXRhaWxzRmFjdG9yeShoYXNEZXRhaWxzU2xvdCwgaXRlbSkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOyAvLyBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdG9nZ2xlIGEgcm93J3MgZGV0YWlscyBzbG90CgoKICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHsKICAgICAgICBpZiAoaGFzRGV0YWlsc1Nsb3QpIHsKICAgICAgICAgIF90aGlzLiRzZXQoaXRlbSwgRklFTERfS0VZX1NIT1dfREVUQUlMUywgIWl0ZW1bRklFTERfS0VZX1NIT1dfREVUQUlMU10pOwogICAgICAgIH0KICAgICAgfTsKICAgIH0sCiAgICAvLyBSb3cgZXZlbnQgaGFuZGxlcnMKICAgIHJvd0hvdmVyZWQ6IGZ1bmN0aW9uIHJvd0hvdmVyZWQoZXZlbnQpIHsKICAgICAgLy8gYG1vdXNlZW50ZXJgIGhhbmRsZXIgKG5vbi1idWJibGluZykKICAgICAgLy8gYHRoaXMudGJvZHlSb3dFdnRTdG9wcGVkYCBmcm9tIHRib2R5IG1peGluCiAgICAgIGlmICghdGhpcy50Ym9keVJvd0V2dFN0b3BwZWQoZXZlbnQpKSB7CiAgICAgICAgLy8gYHRoaXMuZW1pdFRib2R5Um93RXZlbnRgIGZyb20gdGJvZHkgbWl4aW4KICAgICAgICB0aGlzLmVtaXRUYm9keVJvd0V2ZW50KEVWRU5UX05BTUVfUk9XX0hPVkVSRUQsIGV2ZW50KTsKICAgICAgfQogICAgfSwKICAgIHJvd1VuaG92ZXJlZDogZnVuY3Rpb24gcm93VW5ob3ZlcmVkKGV2ZW50KSB7CiAgICAgIC8vIGBtb3VzZWxlYXZlYCBoYW5kbGVyIChub24tYnViYmxpbmcpCiAgICAgIC8vIGB0aGlzLnRib2R5Um93RXZ0U3RvcHBlZGAgZnJvbSB0Ym9keSBtaXhpbgogICAgICBpZiAoIXRoaXMudGJvZHlSb3dFdnRTdG9wcGVkKGV2ZW50KSkgewogICAgICAgIC8vIGB0aGlzLmVtaXRUYm9keVJvd0V2ZW50YCBmcm9tIHRib2R5IG1peGluCiAgICAgICAgdGhpcy5lbWl0VGJvZHlSb3dFdmVudChFVkVOVF9OQU1FX1JPV19VTkhPVkVSRUQsIGV2ZW50KTsKICAgICAgfQogICAgfSwKICAgIC8vIFJlbmRlcnMgYSBURCBvciBUSCBmb3IgYSByb3cncyBmaWVsZAogICAgcmVuZGVyVGJvZHlSb3dDZWxsOiBmdW5jdGlvbiByZW5kZXJUYm9keVJvd0NlbGwoZmllbGQsIGNvbEluZGV4LCBpdGVtLCByb3dJbmRleCkgewogICAgICB2YXIgX3RoaXMyID0gdGhpczsKCiAgICAgIHZhciBpc1N0YWNrZWQgPSB0aGlzLmlzU3RhY2tlZDsKICAgICAgdmFyIGtleSA9IGZpZWxkLmtleSwKICAgICAgICAgIGxhYmVsID0gZmllbGQubGFiZWwsCiAgICAgICAgICBpc1Jvd0hlYWRlciA9IGZpZWxkLmlzUm93SGVhZGVyOwogICAgICB2YXIgaCA9IHRoaXMuJGNyZWF0ZUVsZW1lbnQ7CiAgICAgIHZhciBoYXNEZXRhaWxzU2xvdCA9IHRoaXMuaGFzTm9ybWFsaXplZFNsb3QoU0xPVF9OQU1FX1JPV19ERVRBSUxTKTsKICAgICAgdmFyIGZvcm1hdHRlZCA9IHRoaXMuZ2V0Rm9ybWF0dGVkVmFsdWUoaXRlbSwgZmllbGQpOwogICAgICB2YXIgc3RpY2t5Q29sdW1uID0gIWlzU3RhY2tlZCAmJiAodGhpcy5pc1Jlc3BvbnNpdmUgfHwgdGhpcy5zdGlja3lIZWFkZXIpICYmIGZpZWxkLnN0aWNreUNvbHVtbjsgLy8gV2Ugb25seSB1c2VzIHRoZSBoZWxwZXIgY29tcG9uZW50cyBmb3Igc3RpY2t5IGNvbHVtbnMgdG8KICAgICAgLy8gaW1wcm92ZSBwZXJmb3JtYW5jZSBvZiBCVGFibGUvQlRhYmxlTGl0ZSBieSByZWR1Y2luZyB0aGUKICAgICAgLy8gdG90YWwgbnVtYmVyIG9mIHZ1ZSBpbnN0YW5jZXMgY3JlYXRlZCBkdXJpbmcgcmVuZGVyCgogICAgICB2YXIgY2VsbFRhZyA9IHN0aWNreUNvbHVtbiA/IGlzUm93SGVhZGVyID8gQlRoIDogQlRkIDogaXNSb3dIZWFkZXIgPyAndGgnIDogJ3RkJzsKICAgICAgdmFyIGNlbGxWYXJpYW50ID0gaXRlbVtGSUVMRF9LRVlfQ0VMTF9WQVJJQU5UXSAmJiBpdGVtW0ZJRUxEX0tFWV9DRUxMX1ZBUklBTlRdW2tleV0gPyBpdGVtW0ZJRUxEX0tFWV9DRUxMX1ZBUklBTlRdW2tleV0gOiBmaWVsZC52YXJpYW50IHx8IG51bGw7CiAgICAgIHZhciBkYXRhID0gewogICAgICAgIC8vIEZvciB0aGUgVnVlIGtleSwgd2UgY29uY2F0ZW5hdGUgdGhlIGNvbHVtbiBpbmRleCBhbmQKICAgICAgICAvLyBmaWVsZCBrZXkgKGFzIGZpZWxkIGtleXMgY291bGQgYmUgZHVwbGljYXRlZCkKICAgICAgICAvLyBUT0RPOiBBbHRob3VnaCB3ZSBkbyBwcmV2ZW50IGR1cGxpY2F0ZSBmaWVsZCBrZXlzLi4uCiAgICAgICAgLy8gICBTbyB3ZSBjb3VsZCBjaGFuZ2UgdGhpcyB0bzogYHJvdy0ke3Jvd0luZGV4fS1jZWxsLSR7a2V5fWAKICAgICAgICBjbGFzczogW2ZpZWxkLmNsYXNzID8gZmllbGQuY2xhc3MgOiAnJywgdGhpcy5nZXRUZFZhbHVlcyhpdGVtLCBrZXksIGZpZWxkLnRkQ2xhc3MsICcnKV0sCiAgICAgICAgcHJvcHM6IHt9LAogICAgICAgIGF0dHJzOiBfb2JqZWN0U3ByZWFkKHsKICAgICAgICAgICdhcmlhLWNvbGluZGV4JzogU3RyaW5nKGNvbEluZGV4ICsgMSkKICAgICAgICB9LCBpc1Jvd0hlYWRlciA/IHRoaXMuZ2V0VGhWYWx1ZXMoaXRlbSwga2V5LCBmaWVsZC50aEF0dHIsICdyb3cnLCB7fSkgOiB0aGlzLmdldFRkVmFsdWVzKGl0ZW0sIGtleSwgZmllbGQudGRBdHRyLCB7fSkpLAogICAgICAgIGtleTogInJvdy0iLmNvbmNhdChyb3dJbmRleCwgIi1jZWxsLSIpLmNvbmNhdChjb2xJbmRleCwgIi0iKS5jb25jYXQoa2V5KQogICAgICB9OwoKICAgICAgaWYgKHN0aWNreUNvbHVtbikgewogICAgICAgIC8vIFdlIGFyZSB1c2luZyB0aGUgaGVscGVyIEJUZCBvciBCVGgKICAgICAgICBkYXRhLnByb3BzID0gewogICAgICAgICAgc3RhY2tlZEhlYWRpbmc6IGlzU3RhY2tlZCA/IGxhYmVsIDogbnVsbCwKICAgICAgICAgIHN0aWNreUNvbHVtbjogdHJ1ZSwKICAgICAgICAgIHZhcmlhbnQ6IGNlbGxWYXJpYW50CiAgICAgICAgfTsKICAgICAgfSBlbHNlIHsKICAgICAgICAvLyBVc2luZyBuYXRpdmUgVEQgb3IgVEggZWxlbWVudCwgc28gd2UgbmVlZCB0bwogICAgICAgIC8vIGFkZCBpbiB0aGUgYXR0cmlidXRlcyBhbmQgdmFyaWFudCBjbGFzcwogICAgICAgIGRhdGEuYXR0cnNbJ2RhdGEtbGFiZWwnXSA9IGlzU3RhY2tlZCAmJiAhaXNVbmRlZmluZWRPck51bGwobGFiZWwpID8gdG9TdHJpbmcobGFiZWwpIDogbnVsbDsKICAgICAgICBkYXRhLmF0dHJzLnJvbGUgPSBpc1Jvd0hlYWRlciA/ICdyb3doZWFkZXInIDogJ2NlbGwnOwogICAgICAgIGRhdGEuYXR0cnMuc2NvcGUgPSBpc1Jvd0hlYWRlciA/ICdyb3cnIDogbnVsbDsgLy8gQWRkIGluIHRoZSB2YXJpYW50IGNsYXNzCgogICAgICAgIGlmIChjZWxsVmFyaWFudCkgewogICAgICAgICAgZGF0YS5jbGFzcy5wdXNoKCIiLmNvbmNhdCh0aGlzLmRhcmsgPyAnYmcnIDogJ3RhYmxlJywgIi0iKS5jb25jYXQoY2VsbFZhcmlhbnQpKTsKICAgICAgICB9CiAgICAgIH0KCiAgICAgIHZhciBzbG90U2NvcGUgPSB7CiAgICAgICAgaXRlbTogaXRlbSwKICAgICAgICBpbmRleDogcm93SW5kZXgsCiAgICAgICAgZmllbGQ6IGZpZWxkLAogICAgICAgIHVuZm9ybWF0dGVkOiBnZXQoaXRlbSwga2V5LCAnJyksCiAgICAgICAgdmFsdWU6IGZvcm1hdHRlZCwKICAgICAgICB0b2dnbGVEZXRhaWxzOiB0aGlzLnRvZ2dsZURldGFpbHNGYWN0b3J5KGhhc0RldGFpbHNTbG90LCBpdGVtKSwKICAgICAgICBkZXRhaWxzU2hvd2luZzogQm9vbGVhbihpdGVtW0ZJRUxEX0tFWV9TSE9XX0RFVEFJTFNdKQogICAgICB9OyAvLyBJZiB0YWJsZSBzdXBwb3J0cyBzZWxlY3RhYmxlIG1vZGUsIHRoZW4gYWRkIGluIHRoZSBmb2xsb3dpbmcgc2NvcGUKICAgICAgLy8gdGhpcy5zdXBwb3J0c1NlbGVjdGFibGVSb3dzIHdpbGwgYmUgdW5kZWZpbmVkIGlmIG1peGluIGlzbid0IGxvYWRlZAoKICAgICAgaWYgKHRoaXMuc3VwcG9ydHNTZWxlY3RhYmxlUm93cykgewogICAgICAgIHNsb3RTY29wZS5yb3dTZWxlY3RlZCA9IHRoaXMuaXNSb3dTZWxlY3RlZChyb3dJbmRleCk7CgogICAgICAgIHNsb3RTY29wZS5zZWxlY3RSb3cgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICByZXR1cm4gX3RoaXMyLnNlbGVjdFJvdyhyb3dJbmRleCk7CiAgICAgICAgfTsKCiAgICAgICAgc2xvdFNjb3BlLnVuc2VsZWN0Um93ID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgcmV0dXJuIF90aGlzMi51bnNlbGVjdFJvdyhyb3dJbmRleCk7CiAgICAgICAgfTsKICAgICAgfSAvLyBUaGUgbmV3IGB2LXNsb3RgIHN5bnRheCBkb2Vzbid0IGxpa2UgYSBzbG90IG5hbWUgc3RhcnRpbmcgd2l0aAogICAgICAvLyBhIHNxdWFyZSBicmFja2V0IGFuZCBpZiB1c2luZyBpbi1kb2N1bWVudCBIVE1MIHRlbXBsYXRlcywgdGhlCiAgICAgIC8vIHYtc2xvdCBhdHRyaWJ1dGVzIGFyZSBsb3dlci1jYXNlZCBieSB0aGUgYnJvd3Nlci4KICAgICAgLy8gU3dpdGNoZWQgdG8gcm91bmQgYnJhY2tldCBzeW50YXggdG8gcHJldmVudCBjb25mdXNpb24gd2l0aAogICAgICAvLyBkeW5hbWljIHNsb3QgbmFtZSBzeW50YXguCiAgICAgIC8vIFdlIGxvb2sgZm9yIHNsb3RzIGluIHRoaXMgb3JkZXI6IGBjZWxsKCR7a2V5fSlgLCBgY2VsbCgke2tleS50b0xvd2VyQ2FzZSgpfSlgLCAnY2VsbCgpJwogICAgICAvLyBTbG90IG5hbWVzIGFyZSBub3cgY2FjaGVkIGJ5IG1peGluIHRib2R5IGluIGB0aGlzLiRfYm9keUZpZWxkU2xvdE5hbWVDYWNoZWAKICAgICAgLy8gV2lsbCBiZSBgbnVsbGAgaWYgbm8gc2xvdCAob3IgZmFsbGJhY2sgc2xvdCkgZXhpc3RzCgoKICAgICAgdmFyIHNsb3ROYW1lID0gdGhpcy4kX2JvZHlGaWVsZFNsb3ROYW1lQ2FjaGVba2V5XTsKICAgICAgdmFyICRjaGlsZE5vZGVzID0gc2xvdE5hbWUgPyB0aGlzLm5vcm1hbGl6ZVNsb3Qoc2xvdE5hbWUsIHNsb3RTY29wZSkgOiB0b1N0cmluZyhmb3JtYXR0ZWQpOwoKICAgICAgaWYgKHRoaXMuaXNTdGFja2VkKSB7CiAgICAgICAgLy8gV2Ugd3JhcCBpbiBhIERJViB0byBlbnN1cmUgcmVuZGVyZWQgYXMgYSBzaW5nbGUgY2VsbCB3aGVuIHZpc3VhbGx5IHN0YWNrZWQhCiAgICAgICAgJGNoaWxkTm9kZXMgPSBbaCgnZGl2JywgWyRjaGlsZE5vZGVzXSldOwogICAgICB9IC8vIFJlbmRlciBlaXRoZXIgYSB0ZCBvciB0aCBjZWxsCgoKICAgICAgcmV0dXJuIGgoY2VsbFRhZywgZGF0YSwgWyRjaGlsZE5vZGVzXSk7CiAgICB9LAogICAgLy8gUmVuZGVycyBhbiBpdGVtJ3Mgcm93IChvciByb3dzIGlmIGRldGFpbHMgc3VwcG9ydGVkKQogICAgcmVuZGVyVGJvZHlSb3c6IGZ1bmN0aW9uIHJlbmRlclRib2R5Um93KGl0ZW0sIHJvd0luZGV4KSB7CiAgICAgIHZhciBfdGhpczMgPSB0aGlzOwoKICAgICAgdmFyIGZpZWxkcyA9IHRoaXMuY29tcHV0ZWRGaWVsZHMsCiAgICAgICAgICBzdHJpcGVkID0gdGhpcy5zdHJpcGVkLAogICAgICAgICAgcHJpbWFyeUtleSA9IHRoaXMucHJpbWFyeUtleSwKICAgICAgICAgIGN1cnJlbnRQYWdlID0gdGhpcy5jdXJyZW50UGFnZSwKICAgICAgICAgIHBlclBhZ2UgPSB0aGlzLnBlclBhZ2UsCiAgICAgICAgICB0Ym9keVRyQ2xhc3MgPSB0aGlzLnRib2R5VHJDbGFzcywKICAgICAgICAgIHRib2R5VHJBdHRyID0gdGhpcy50Ym9keVRyQXR0cjsKICAgICAgdmFyIGggPSB0aGlzLiRjcmVhdGVFbGVtZW50OwogICAgICB2YXIgaGFzRGV0YWlsc1Nsb3QgPSB0aGlzLmhhc05vcm1hbGl6ZWRTbG90KFNMT1RfTkFNRV9ST1dfREVUQUlMUyk7CiAgICAgIHZhciByb3dTaG93RGV0YWlscyA9IGl0ZW1bRklFTERfS0VZX1NIT1dfREVUQUlMU10gJiYgaGFzRGV0YWlsc1Nsb3Q7CiAgICAgIHZhciBoYXNSb3dDbGlja0hhbmRsZXIgPSB0aGlzLiRsaXN0ZW5lcnNbRVZFTlRfTkFNRV9ST1dfQ0xJQ0tFRF0gfHwgdGhpcy5oYXNTZWxlY3RhYmxlUm93Q2xpY2s7IC8vIFdlIGNhbiByZXR1cm4gbW9yZSB0aGFuIG9uZSBUUiBpZiByb3dEZXRhaWxzIGVuYWJsZWQKCiAgICAgIHZhciAkcm93cyA9IFtdOyAvLyBEZXRhaWxzIElEIG5lZWRlZCBmb3IgYGFyaWEtZGV0YWlsc2Agd2hlbiBkZXRhaWxzIHNob3dpbmcKICAgICAgLy8gV2Ugc2V0IGl0IHRvIGBudWxsYCB3aGVuIG5vdCBzaG93aW5nIHNvIHRoYXQgYXR0cmlidXRlCiAgICAgIC8vIGRvZXMgbm90IGFwcGVhciBvbiB0aGUgZWxlbWVudAoKICAgICAgdmFyIGRldGFpbHNJZCA9IHJvd1Nob3dEZXRhaWxzID8gdGhpcy5zYWZlSWQoIl9kZXRhaWxzXyIuY29uY2F0KHJvd0luZGV4LCAiXyIpKSA6IG51bGw7IC8vIEZvciBlYWNoIGl0ZW0gZGF0YSBmaWVsZCBpbiByb3cKCiAgICAgIHZhciAkdGRzID0gZmllbGRzLm1hcChmdW5jdGlvbiAoZmllbGQsIGNvbEluZGV4KSB7CiAgICAgICAgcmV0dXJuIF90aGlzMy5yZW5kZXJUYm9keVJvd0NlbGwoZmllbGQsIGNvbEluZGV4LCBpdGVtLCByb3dJbmRleCk7CiAgICAgIH0pOyAvLyBDYWxjdWxhdGUgdGhlIHJvdyBudW1iZXIgaW4gdGhlIGRhdGFzZXQgKGluZGV4ZWQgZnJvbSAxKQoKICAgICAgdmFyIGFyaWFSb3dJbmRleCA9IG51bGw7CgogICAgICBpZiAoY3VycmVudFBhZ2UgJiYgcGVyUGFnZSAmJiBwZXJQYWdlID4gMCkgewogICAgICAgIGFyaWFSb3dJbmRleCA9IFN0cmluZygoY3VycmVudFBhZ2UgLSAxKSAqIHBlclBhZ2UgKyByb3dJbmRleCArIDEpOwogICAgICB9IC8vIENyZWF0ZSBhIHVuaXF1ZSA6a2V5IHRvIGhlbHAgZW5zdXJlIHRoYXQgc3ViIGNvbXBvbmVudHMgYXJlIHJlLXJlbmRlcmVkIHJhdGhlciB0aGFuCiAgICAgIC8vIHJlLXVzZWQsIHdoaWNoIGNhbiBjYXVzZSBpc3N1ZXMuIElmIGEgcHJpbWFyeSBrZXkgaXMgbm90IHByb3ZpZGVkIHdlIHVzZSB0aGUgcmVuZGVyZWQKICAgICAgLy8gcm93cyBpbmRleCB3aXRoaW4gdGhlIHRib2R5LgogICAgICAvLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9ib290c3RyYXAtdnVlL2Jvb3RzdHJhcC12dWUvaXNzdWVzLzI0MTAKCgogICAgICB2YXIgcHJpbWFyeUtleVZhbHVlID0gdG9TdHJpbmcoZ2V0KGl0ZW0sIHByaW1hcnlLZXkpKSB8fCBudWxsOwogICAgICB2YXIgcm93S2V5ID0gcHJpbWFyeUtleVZhbHVlIHx8IHRvU3RyaW5nKHJvd0luZGV4KTsgLy8gSWYgcHJpbWFyeSBrZXkgaXMgcHJvdmlkZWQsIHVzZSBpdCB0byBnZW5lcmF0ZSBhIHVuaXF1ZSBJRCBvbiBlYWNoIHRib2R5ID4gdHIKICAgICAgLy8gSW4gdGhlIGZvcm1hdCBvZiAne3RhYmxlSWR9X19yb3dfe3ByaW1hcnlLZXlWYWx1ZX0nCgogICAgICB2YXIgcm93SWQgPSBwcmltYXJ5S2V5VmFsdWUgPyB0aGlzLnNhZmVJZCgiX3Jvd18iLmNvbmNhdChwcmltYXJ5S2V5VmFsdWUpKSA6IG51bGw7IC8vIFNlbGVjdGFibGUgY2xhc3NlcyBhbmQgYXR0cmlidXRlcwoKICAgICAgdmFyIHNlbGVjdGFibGVDbGFzc2VzID0gdGhpcy5zZWxlY3RhYmxlUm93Q2xhc3NlcyA/IHRoaXMuc2VsZWN0YWJsZVJvd0NsYXNzZXMocm93SW5kZXgpIDoge307CiAgICAgIHZhciBzZWxlY3RhYmxlQXR0cnMgPSB0aGlzLnNlbGVjdGFibGVSb3dBdHRycyA/IHRoaXMuc2VsZWN0YWJsZVJvd0F0dHJzKHJvd0luZGV4KSA6IHt9OyAvLyBBZGRpdGlvbmFsIGNsYXNzZXMgYW5kIGF0dHJpYnV0ZXMKCiAgICAgIHZhciB1c2VyVHJDbGFzc2VzID0gaXNGdW5jdGlvbih0Ym9keVRyQ2xhc3MpID8gdGJvZHlUckNsYXNzKGl0ZW0sICdyb3cnKSA6IHRib2R5VHJDbGFzczsKICAgICAgdmFyIHVzZXJUckF0dHJzID0gaXNGdW5jdGlvbih0Ym9keVRyQXR0cikgPwogICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqLwogICAgICB0Ym9keVRyQXR0cihpdGVtLCAncm93JykgOiB0Ym9keVRyQXR0cjsgLy8gQWRkIHRoZSBpdGVtIHJvdwoKICAgICAgJHJvd3MucHVzaChoKEJUciwgewogICAgICAgIGNsYXNzOiBbdXNlclRyQ2xhc3Nlcywgc2VsZWN0YWJsZUNsYXNzZXMsIHJvd1Nob3dEZXRhaWxzID8gJ2ItdGFibGUtaGFzLWRldGFpbHMnIDogJyddLAogICAgICAgIHByb3BzOiB7CiAgICAgICAgICB2YXJpYW50OiBpdGVtW0ZJRUxEX0tFWV9ST1dfVkFSSUFOVF0gfHwgbnVsbAogICAgICAgIH0sCiAgICAgICAgYXR0cnM6IF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7CiAgICAgICAgICBpZDogcm93SWQKICAgICAgICB9LCB1c2VyVHJBdHRycyksIHt9LCB7CiAgICAgICAgICAvLyBVc2VycyBjYW5ub3Qgb3ZlcnJpZGUgdGhlIGZvbGxvd2luZyBhdHRyaWJ1dGVzCiAgICAgICAgICB0YWJpbmRleDogaGFzUm93Q2xpY2tIYW5kbGVyID8gJzAnIDogbnVsbCwKICAgICAgICAgICdkYXRhLXBrJzogcHJpbWFyeUtleVZhbHVlIHx8IG51bGwsCiAgICAgICAgICAnYXJpYS1kZXRhaWxzJzogZGV0YWlsc0lkLAogICAgICAgICAgJ2FyaWEtb3ducyc6IGRldGFpbHNJZCwKICAgICAgICAgICdhcmlhLXJvd2luZGV4JzogYXJpYVJvd0luZGV4CiAgICAgICAgfSwgc2VsZWN0YWJsZUF0dHJzKSwKICAgICAgICBvbjogewogICAgICAgICAgLy8gTm90ZTogVGhlc2UgZXZlbnRzIGFyZSBub3QgQTExWSBmcmllbmRseSEKICAgICAgICAgIG1vdXNlZW50ZXI6IHRoaXMucm93SG92ZXJlZCwKICAgICAgICAgIG1vdXNlbGVhdmU6IHRoaXMucm93VW5ob3ZlcmVkCiAgICAgICAgfSwKICAgICAgICBrZXk6ICJfX2ItdGFibGUtcm93LSIuY29uY2F0KHJvd0tleSwgIl9fIiksCiAgICAgICAgcmVmOiAnaXRlbS1yb3dzJywKICAgICAgICByZWZJbkZvcjogdHJ1ZQogICAgICB9LCAkdGRzKSk7IC8vIFJvdyBEZXRhaWxzIHNsb3QKCiAgICAgIGlmIChyb3dTaG93RGV0YWlscykgewogICAgICAgIHZhciBkZXRhaWxzU2NvcGUgPSB7CiAgICAgICAgICBpdGVtOiBpdGVtLAogICAgICAgICAgaW5kZXg6IHJvd0luZGV4LAogICAgICAgICAgZmllbGRzOiBmaWVsZHMsCiAgICAgICAgICB0b2dnbGVEZXRhaWxzOiB0aGlzLnRvZ2dsZURldGFpbHNGYWN0b3J5KGhhc0RldGFpbHNTbG90LCBpdGVtKQogICAgICAgIH07IC8vIElmIHRhYmxlIHN1cHBvcnRzIHNlbGVjdGFibGUgbW9kZSwgdGhlbiBhZGQgaW4gdGhlIGZvbGxvd2luZyBzY29wZQogICAgICAgIC8vIHRoaXMuc3VwcG9ydHNTZWxlY3RhYmxlUm93cyB3aWxsIGJlIHVuZGVmaW5lZCBpZiBtaXhpbiBpc24ndCBsb2FkZWQKCiAgICAgICAgaWYgKHRoaXMuc3VwcG9ydHNTZWxlY3RhYmxlUm93cykgewogICAgICAgICAgZGV0YWlsc1Njb3BlLnJvd1NlbGVjdGVkID0gdGhpcy5pc1Jvd1NlbGVjdGVkKHJvd0luZGV4KTsKCiAgICAgICAgICBkZXRhaWxzU2NvcGUuc2VsZWN0Um93ID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICByZXR1cm4gX3RoaXMzLnNlbGVjdFJvdyhyb3dJbmRleCk7CiAgICAgICAgICB9OwoKICAgICAgICAgIGRldGFpbHNTY29wZS51bnNlbGVjdFJvdyA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgcmV0dXJuIF90aGlzMy51bnNlbGVjdFJvdyhyb3dJbmRleCk7CiAgICAgICAgICB9OwogICAgICAgIH0gLy8gUmVuZGVyIHRoZSBkZXRhaWxzIHNsb3QgaW4gYSBURAoKCiAgICAgICAgdmFyICRkZXRhaWxzID0gaChCVGQsIHsKICAgICAgICAgIHByb3BzOiB7CiAgICAgICAgICAgIGNvbHNwYW46IGZpZWxkcy5sZW5ndGgKICAgICAgICAgIH0sCiAgICAgICAgICBjbGFzczogdGhpcy5kZXRhaWxzVGRDbGFzcwogICAgICAgIH0sIFt0aGlzLm5vcm1hbGl6ZVNsb3QoU0xPVF9OQU1FX1JPV19ERVRBSUxTLCBkZXRhaWxzU2NvcGUpXSk7IC8vIEFkZCBhIGhpZGRlbiByb3cgdG8ga2VlcCB0YWJsZSByb3cgc3RyaXBpbmcgY29uc2lzdGVudCB3aGVuIGRldGFpbHMgc2hvd2luZwogICAgICAgIC8vIE9ubHkgYWRkZWQgaWYgdGhlIHRhYmxlIGlzIHN0cmlwZWQKCiAgICAgICAgaWYgKHN0cmlwZWQpIHsKICAgICAgICAgICRyb3dzLnB1c2goIC8vIFdlIGRvbid0IHVzZSBgQlRyYCBoZXJlIGFzIHdlIGRvbid0IG5lZWQgdGhlIGV4dHJhIGZ1bmN0aW9uYWxpdHkKICAgICAgICAgIGgoJ3RyJywgewogICAgICAgICAgICBzdGF0aWNDbGFzczogJ2Qtbm9uZScsCiAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgJ2FyaWEtaGlkZGVuJzogJ3RydWUnLAogICAgICAgICAgICAgIHJvbGU6ICdwcmVzZW50YXRpb24nCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGtleTogIl9fYi10YWJsZS1kZXRhaWxzLXN0cmlwZV9fIi5jb25jYXQocm93S2V5KQogICAgICAgICAgfSkpOwogICAgICAgIH0gLy8gQWRkIHRoZSBhY3R1YWwgZGV0YWlscyByb3cKCgogICAgICAgIHZhciB1c2VyRGV0YWlsc1RyQ2xhc3NlcyA9IGlzRnVuY3Rpb24odGhpcy50Ym9keVRyQ2xhc3MpID8KICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqLwogICAgICAgIHRoaXMudGJvZHlUckNsYXNzKGl0ZW0sIFNMT1RfTkFNRV9ST1dfREVUQUlMUykgOiB0aGlzLnRib2R5VHJDbGFzczsKICAgICAgICB2YXIgdXNlckRldGFpbHNUckF0dHJzID0gaXNGdW5jdGlvbih0aGlzLnRib2R5VHJBdHRyKSA/CiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi8KICAgICAgICB0aGlzLnRib2R5VHJBdHRyKGl0ZW0sIFNMT1RfTkFNRV9ST1dfREVUQUlMUykgOiB0aGlzLnRib2R5VHJBdHRyOwogICAgICAgICRyb3dzLnB1c2goaChCVHIsIHsKICAgICAgICAgIHN0YXRpY0NsYXNzOiAnYi10YWJsZS1kZXRhaWxzJywKICAgICAgICAgIGNsYXNzOiBbdXNlckRldGFpbHNUckNsYXNzZXNdLAogICAgICAgICAgcHJvcHM6IHsKICAgICAgICAgICAgdmFyaWFudDogaXRlbVtGSUVMRF9LRVlfUk9XX1ZBUklBTlRdIHx8IG51bGwKICAgICAgICAgIH0sCiAgICAgICAgICBhdHRyczogX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCB1c2VyRGV0YWlsc1RyQXR0cnMpLCB7fSwgewogICAgICAgICAgICAvLyBVc2VycyBjYW5ub3Qgb3ZlcnJpZGUgdGhlIGZvbGxvd2luZyBhdHRyaWJ1dGVzCiAgICAgICAgICAgIGlkOiBkZXRhaWxzSWQsCiAgICAgICAgICAgIHRhYmluZGV4OiAnLTEnCiAgICAgICAgICB9KSwKICAgICAgICAgIGtleTogIl9fYi10YWJsZS1kZXRhaWxzX18iLmNvbmNhdChyb3dLZXkpCiAgICAgICAgfSwgWyRkZXRhaWxzXSkpOwogICAgICB9IGVsc2UgaWYgKGhhc0RldGFpbHNTbG90KSB7CiAgICAgICAgLy8gT25seSBhZGQgdGhlIHBsYWNlaG9sZGVyIGlmIGEgdGhlIHRhYmxlIGhhcyBhIHJvdy1kZXRhaWxzIHNsb3QgZGVmaW5lZCAoYnV0IG5vdCBzaG93bikKICAgICAgICAkcm93cy5wdXNoKGgoKSk7CgogICAgICAgIGlmIChzdHJpcGVkKSB7CiAgICAgICAgICAvLyBBZGQgZXh0cmEgcGxhY2Vob2xkZXIgaWYgdGFibGUgaXMgc3RyaXBlZAogICAgICAgICAgJHJvd3MucHVzaChoKCkpOwogICAgICAgIH0KICAgICAgfSAvLyBSZXR1cm4gdGhlIHJvdyhzKQoKCiAgICAgIHJldHVybiAkcm93czsKICAgIH0KICB9Cn0pOw=="},null]}