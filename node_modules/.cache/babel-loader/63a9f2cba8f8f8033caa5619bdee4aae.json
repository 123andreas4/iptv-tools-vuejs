{"remainingRequest":"/media/ernst/63bce43c-5e51-4bf1-a611-3afdf32ac6f6/VueJS/IPTV-Tools/node_modules/thread-loader/dist/cjs.js!/media/ernst/63bce43c-5e51-4bf1-a611-3afdf32ac6f6/VueJS/IPTV-Tools/node_modules/babel-loader/lib/index.js!/media/ernst/63bce43c-5e51-4bf1-a611-3afdf32ac6f6/VueJS/IPTV-Tools/node_modules/eslint-loader/index.js??ref--13-0!/media/ernst/63bce43c-5e51-4bf1-a611-3afdf32ac6f6/VueJS/IPTV-Tools/src/router/routes.js","dependencies":[{"path":"/media/ernst/63bce43c-5e51-4bf1-a611-3afdf32ac6f6/VueJS/IPTV-Tools/src/router/routes.js","mtime":1626025979714},{"path":"/media/ernst/63bce43c-5e51-4bf1-a611-3afdf32ac6f6/VueJS/IPTV-Tools/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/media/ernst/63bce43c-5e51-4bf1-a611-3afdf32ac6f6/VueJS/IPTV-Tools/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/media/ernst/63bce43c-5e51-4bf1-a611-3afdf32ac6f6/VueJS/IPTV-Tools/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/media/ernst/63bce43c-5e51-4bf1-a611-3afdf32ac6f6/VueJS/IPTV-Tools/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}